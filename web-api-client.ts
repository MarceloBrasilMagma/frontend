//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAdClient {
    obterUsuarioPorNome(nome: string | null | undefined): Observable<UsuarioAd[]>;
    obterUsuarioPorLogin(login: string | null | undefined): Observable<UsuarioAd>;
}

@Injectable({
    providedIn: 'root'
})
export class AdClient implements IAdClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterUsuarioPorNome(nome: string | null | undefined): Observable<UsuarioAd[]> {
        let url_ = this.baseUrl + "/api/usuariosad/obter-usuarios-por-nome?";
        if (nome !== undefined && nome !== null)
            url_ += "nome=" + encodeURIComponent("" + nome) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterUsuarioPorNome(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterUsuarioPorNome(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioAd[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioAd[]>;
        }));
    }

    protected processObterUsuarioPorNome(response: HttpResponseBase): Observable<UsuarioAd[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UsuarioAd.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsuarioAd[]>(null as any);
    }

    obterUsuarioPorLogin(login: string | null | undefined): Observable<UsuarioAd> {
        let url_ = this.baseUrl + "/api/usuariosad/obter-usuario-por-login?";
        if (login !== undefined && login !== null)
            url_ += "login=" + encodeURIComponent("" + login) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterUsuarioPorLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterUsuarioPorLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioAd>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioAd>;
        }));
    }

    protected processObterUsuarioPorLogin(response: HttpResponseBase): Observable<UsuarioAd> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioAd.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsuarioAd>(null as any);
    }
}

export interface IAnaliseEconomicoFinanceiraClient {
    criar(command: AnaliseEconomicoFinanceiraCriarCommand): Observable<AnaliseEconomicoFinanceiraVm>;
    alterar(command: AnaliseEconomicoFinanceiraAlterarCommand): Observable<AnaliseEconomicoFinanceiraVm>;
    obterAnexoComBase64(analiseAnexoId: number): Observable<AnaliseEconomicoFinanceiraAnexoVm>;
    excluirAnexo(analiseAnexoId: number): Observable<Unit>;
    incluirAnexo(command: AnaliseEconomicoFinanceiraAnexoCriarCommand): Observable<AnaliseEconomicoFinanceiraAnexoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class AnaliseEconomicoFinanceiraClient implements IAnaliseEconomicoFinanceiraClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(command: AnaliseEconomicoFinanceiraCriarCommand): Observable<AnaliseEconomicoFinanceiraVm> {
        let url_ = this.baseUrl + "/api/AnaliseEconomicoFinanceira";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnaliseEconomicoFinanceiraVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnaliseEconomicoFinanceiraVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<AnaliseEconomicoFinanceiraVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnaliseEconomicoFinanceiraVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AnaliseEconomicoFinanceiraVm>(null as any);
    }

    alterar(command: AnaliseEconomicoFinanceiraAlterarCommand): Observable<AnaliseEconomicoFinanceiraVm> {
        let url_ = this.baseUrl + "/api/AnaliseEconomicoFinanceira";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnaliseEconomicoFinanceiraVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnaliseEconomicoFinanceiraVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<AnaliseEconomicoFinanceiraVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnaliseEconomicoFinanceiraVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AnaliseEconomicoFinanceiraVm>(null as any);
    }

    obterAnexoComBase64(analiseAnexoId: number): Observable<AnaliseEconomicoFinanceiraAnexoVm> {
        let url_ = this.baseUrl + "/api/AnaliseEconomicoFinanceira/anexo/{analiseAnexoId}";
        if (analiseAnexoId === undefined || analiseAnexoId === null)
            throw new Error("The parameter 'analiseAnexoId' must be defined.");
        url_ = url_.replace("{analiseAnexoId}", encodeURIComponent("" + analiseAnexoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterAnexoComBase64(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterAnexoComBase64(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnaliseEconomicoFinanceiraAnexoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnaliseEconomicoFinanceiraAnexoVm>;
        }));
    }

    protected processObterAnexoComBase64(response: HttpResponseBase): Observable<AnaliseEconomicoFinanceiraAnexoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnaliseEconomicoFinanceiraAnexoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AnaliseEconomicoFinanceiraAnexoVm>(null as any);
    }

    excluirAnexo(analiseAnexoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/AnaliseEconomicoFinanceira/anexo/{analiseAnexoId}";
        if (analiseAnexoId === undefined || analiseAnexoId === null)
            throw new Error("The parameter 'analiseAnexoId' must be defined.");
        url_ = url_.replace("{analiseAnexoId}", encodeURIComponent("" + analiseAnexoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirAnexo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirAnexo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirAnexo(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirAnexo(command: AnaliseEconomicoFinanceiraAnexoCriarCommand): Observable<AnaliseEconomicoFinanceiraAnexoVm> {
        let url_ = this.baseUrl + "/api/AnaliseEconomicoFinanceira/anexo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirAnexo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirAnexo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnaliseEconomicoFinanceiraAnexoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnaliseEconomicoFinanceiraAnexoVm>;
        }));
    }

    protected processIncluirAnexo(response: HttpResponseBase): Observable<AnaliseEconomicoFinanceiraAnexoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnaliseEconomicoFinanceiraAnexoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AnaliseEconomicoFinanceiraAnexoVm>(null as any);
    }
}

export interface IAuthClient {
    login(user: LoginModel): Observable<LoginModelOutput>;
    validarToken(model: ValidateTokenModel): Observable<boolean>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthClient implements IAuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    login(user: LoginModel): Observable<LoginModelOutput> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginModelOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginModelOutput>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginModelOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginModelOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginModelOutput>(null as any);
    }

    validarToken(model: ValidateTokenModel): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Auth/validar-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidarToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidarToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processValidarToken(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }
}

export interface ICentrosCustoClient {
    criar(request: CentroCustoCriarCommand): Observable<CentroCustoVm>;
    alterar(request: CentroCustoAlterarCommand): Observable<CentroCustoVm>;
    obter(query: CentroCustoObterTodosQuery): Observable<PaginatedListOfCentroCustoVm>;
    alterarSituacao(request: CentroCustoAlterarSituacaoCommand): Observable<CentroCustoVm>;
    responder(request: CentroCustoResponderCommand): Observable<CentroCustoVm>;
    obterPorId(id: number): Observable<CentroCustoVm>;
    excluir(request: CentroCustoExcluirCommand): Observable<Unit>;
    incluirResposta(request: CentroCustoIncluirRespostaCommand): Observable<CentroCustoRespostaVm>;
    excluirResposta(id: number): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class CentrosCustoClient implements ICentrosCustoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: CentroCustoCriarCommand): Observable<CentroCustoVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CentroCustoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CentroCustoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<CentroCustoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CentroCustoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CentroCustoVm>(null as any);
    }

    alterar(request: CentroCustoAlterarCommand): Observable<CentroCustoVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CentroCustoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CentroCustoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<CentroCustoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CentroCustoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CentroCustoVm>(null as any);
    }

    obter(query: CentroCustoObterTodosQuery): Observable<PaginatedListOfCentroCustoVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfCentroCustoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfCentroCustoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfCentroCustoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfCentroCustoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfCentroCustoVm>(null as any);
    }

    alterarSituacao(request: CentroCustoAlterarSituacaoCommand): Observable<CentroCustoVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto/alterar-situacao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CentroCustoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CentroCustoVm>;
        }));
    }

    protected processAlterarSituacao(response: HttpResponseBase): Observable<CentroCustoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CentroCustoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CentroCustoVm>(null as any);
    }

    responder(request: CentroCustoResponderCommand): Observable<CentroCustoVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto/responder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResponder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResponder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CentroCustoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CentroCustoVm>;
        }));
    }

    protected processResponder(response: HttpResponseBase): Observable<CentroCustoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CentroCustoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CentroCustoVm>(null as any);
    }

    obterPorId(id: number): Observable<CentroCustoVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CentroCustoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CentroCustoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<CentroCustoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CentroCustoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CentroCustoVm>(null as any);
    }

    excluir(request: CentroCustoExcluirCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/CentrosCusto/excluir";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirResposta(request: CentroCustoIncluirRespostaCommand): Observable<CentroCustoRespostaVm> {
        let url_ = this.baseUrl + "/api/CentrosCusto/resposta";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirResposta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirResposta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CentroCustoRespostaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CentroCustoRespostaVm>;
        }));
    }

    protected processIncluirResposta(response: HttpResponseBase): Observable<CentroCustoRespostaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CentroCustoRespostaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CentroCustoRespostaVm>(null as any);
    }

    excluirResposta(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/CentrosCusto/resposta/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirResposta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirResposta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirResposta(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface ICestasClient {
    criar(request: CestaCriarCommand): Observable<Cesta>;
    alterar(request: CestaAlterarCommand): Observable<Unit>;
    obter(pageSize: number | undefined, pageIndex: number | undefined): Observable<PaginatedListOfCestaRasaVm>;
    obterPorId(id: number): Observable<CestaVm>;
    excluir(request: CestaExcluirCommand): Observable<Unit>;
    obterPreProjetosParaVincular(): Observable<ProjetoSelecaoPortifolioVm[]>;
    incluirPreProjetosPlurianuais(request: CestaIncluirPreProjetoProjetoOuPlurianualCommand): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class CestasClient implements ICestasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: CestaCriarCommand): Observable<Cesta> {
        let url_ = this.baseUrl + "/api/Cestas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Cesta>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Cesta>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<Cesta> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Cesta.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Cesta>(null as any);
    }

    alterar(request: CestaAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Cestas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obter(pageSize: number | undefined, pageIndex: number | undefined): Observable<PaginatedListOfCestaRasaVm> {
        let url_ = this.baseUrl + "/api/Cestas?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfCestaRasaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfCestaRasaVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfCestaRasaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfCestaRasaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfCestaRasaVm>(null as any);
    }

    obterPorId(id: number): Observable<CestaVm> {
        let url_ = this.baseUrl + "/api/Cestas/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CestaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CestaVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<CestaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CestaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CestaVm>(null as any);
    }

    excluir(request: CestaExcluirCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Cestas/excluir";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPreProjetosParaVincular(): Observable<ProjetoSelecaoPortifolioVm[]> {
        let url_ = this.baseUrl + "/api/Cestas/obter-preprojetos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPreProjetosParaVincular(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPreProjetosParaVincular(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoSelecaoPortifolioVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoSelecaoPortifolioVm[]>;
        }));
    }

    protected processObterPreProjetosParaVincular(response: HttpResponseBase): Observable<ProjetoSelecaoPortifolioVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjetoSelecaoPortifolioVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoSelecaoPortifolioVm[]>(null as any);
    }

    incluirPreProjetosPlurianuais(request: CestaIncluirPreProjetoProjetoOuPlurianualCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Cestas/incluir-preprojetos-plurianuais";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirPreProjetosPlurianuais(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirPreProjetosPlurianuais(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processIncluirPreProjetosPlurianuais(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface ICronogramasClient {
    obterPorProjetoId(query: CronogramaObterPorProjetoQuery): Observable<PaginatedListOfCronogramaVm>;
    criar(request: CronogramaCriarCommand): Observable<CronogramaVm>;
    alterar(request: CronogramaAlterarCommand): Observable<CronogramaVm>;
    excluir(id: number): Observable<Unit>;
    importar(request: CronogramaImportarCommand): Observable<Unit>;
    visualizarImportacao(request: CronogramaVisualizarImportacaoCommand): Observable<CronogramaVm>;
    obterTarefaPorProjetoId(projetoId: number): Observable<TarefaVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CronogramasClient implements ICronogramasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorProjetoId(query: CronogramaObterPorProjetoQuery): Observable<PaginatedListOfCronogramaVm> {
        let url_ = this.baseUrl + "/api/Cronogramas/obter-por-projeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorProjetoId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorProjetoId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfCronogramaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfCronogramaVm>;
        }));
    }

    protected processObterPorProjetoId(response: HttpResponseBase): Observable<PaginatedListOfCronogramaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfCronogramaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfCronogramaVm>(null as any);
    }

    criar(request: CronogramaCriarCommand): Observable<CronogramaVm> {
        let url_ = this.baseUrl + "/api/Cronogramas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CronogramaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CronogramaVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<CronogramaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CronogramaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CronogramaVm>(null as any);
    }

    alterar(request: CronogramaAlterarCommand): Observable<CronogramaVm> {
        let url_ = this.baseUrl + "/api/Cronogramas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CronogramaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CronogramaVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<CronogramaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CronogramaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CronogramaVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Cronogramas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    importar(request: CronogramaImportarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Cronogramas/importar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processImportar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    visualizarImportacao(request: CronogramaVisualizarImportacaoCommand): Observable<CronogramaVm> {
        let url_ = this.baseUrl + "/api/Cronogramas/visualizar-importacao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVisualizarImportacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVisualizarImportacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CronogramaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CronogramaVm>;
        }));
    }

    protected processVisualizarImportacao(response: HttpResponseBase): Observable<CronogramaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CronogramaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CronogramaVm>(null as any);
    }

    obterTarefaPorProjetoId(projetoId: number): Observable<TarefaVm[]> {
        let url_ = this.baseUrl + "/api/Cronogramas/tarefas/obter-por-projeto/{projetoId}";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterTarefaPorProjetoId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterTarefaPorProjetoId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TarefaVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TarefaVm[]>;
        }));
    }

    protected processObterTarefaPorProjetoId(response: HttpResponseBase): Observable<TarefaVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TarefaVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TarefaVm[]>(null as any);
    }
}

export interface IDeclaracoesTrabalhoClient {
    obter(query: DeclaracaoTrabalhoObterQuery): Observable<PaginatedListOfDeclaracaoTrabalhoVm>;
    obterPorId(id: number): Observable<DeclaracaoTrabalhoVm>;
    criar(command: DeclaracaoTrabalhoCriarCommand): Observable<DeclaracaoTrabalhoVm>;
    alterar(command: DeclaracaoTrabalhoAlterarCommand): Observable<DeclaracaoTrabalhoVm>;
    excluir(declaracaoTrabalhoId: number): Observable<Unit>;
    incluirCorresponsaveis(id: string, command: DeclaracaoTrabalhoCorresponsavelCriarCommand): Observable<Unit>;
    excluirCorresponsaveis(id: number, corresponsavelId: number): Observable<Unit>;
    incluirOrcamento(id: string, command: DeclaracaoTrabalhoOrcamentoCriarCommand): Observable<Unit>;
    alterarOcamento(id: string, declaracaoTrabalhoOrcamentoId: string, command: DeclaracaoTrabalhoOrcamentoAlterarCommand): Observable<Unit>;
    excluirOrcamento(id: number, declaracaoTrabalhoOrcamentoId: number): Observable<Unit>;
    obterAnexoComBase64(id: number, declaracaoTrabalhoAnexoId: number): Observable<DeclaracaoTrabalhoAnexoComArquivoVm>;
    excluirAnexo(id: number, declaracaoTrabalhoAnexoId: number): Observable<Unit>;
    /**
     * Obtém um anexo da DT por ID do Anexo
     */
    incluirAnexo(id: string, command: DeclaracaoTrabalhoAnexoCriarCommand): Observable<DeclaracaoTrabalhoAnexoVm>;
    alterarSituacao(command: DeclaracaoTrabalhoAlterarSituacaoCommand): Observable<DeclaracaoTrabalhoVm>;
    obterPermissoesAcesso(query: DeclaracaoTrabalhoObterPermissoesAcessoQuery): Observable<PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm>;
    adicionarPermissaoAcesso(command: DeclaracaoTrabalhoAdicionarPermissaoAcessoCommand): Observable<PermissaoAcessoDeclaracaoTrabalhoVm>;
    alterarPermissaoAcesso(command: DeclaracaoTrabalhoAlterarPermissaoAcessoCommand): Observable<PermissaoAcessoDeclaracaoTrabalhoVm>;
    removerPermissaoAcesso(permissaoId: number): Observable<Unit>;
    obterOrcamento(orcamentoId: number): Observable<DeclaracaoTrabalhoOrcamentoVm>;
    exportar(query: DeclaracaoTrabalhoObterQuery): Observable<DeclaracaoTrabalhoExcelVm>;
    exportarOrcamentos(declaracaoTrabalhoId: number): Observable<ExcelVm>;
    searchProjeto(query: SearchProjetoQuery): Observable<PaginatedListOfSearchProjetoDto>;
    relatorio(query: DeclaracaoTrabalhoRelatorioQuery): Observable<RelatorioDTDto>;
}

@Injectable({
    providedIn: 'root'
})
export class DeclaracoesTrabalhoClient implements IDeclaracoesTrabalhoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(query: DeclaracaoTrabalhoObterQuery): Observable<PaginatedListOfDeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfDeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfDeclaracaoTrabalhoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfDeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfDeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfDeclaracaoTrabalhoVm>(null as any);
    }

    obterPorId(id: number): Observable<DeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<DeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoVm>(null as any);
    }

    criar(command: DeclaracaoTrabalhoCriarCommand): Observable<DeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<DeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoVm>(null as any);
    }

    alterar(command: DeclaracaoTrabalhoAlterarCommand): Observable<DeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<DeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoVm>(null as any);
    }

    excluir(declaracaoTrabalhoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{declaracaoTrabalhoId}";
        if (declaracaoTrabalhoId === undefined || declaracaoTrabalhoId === null)
            throw new Error("The parameter 'declaracaoTrabalhoId' must be defined.");
        url_ = url_.replace("{declaracaoTrabalhoId}", encodeURIComponent("" + declaracaoTrabalhoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirCorresponsaveis(id: string, command: DeclaracaoTrabalhoCorresponsavelCriarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/corresponsavel";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirCorresponsaveis(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirCorresponsaveis(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processIncluirCorresponsaveis(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    excluirCorresponsaveis(id: number, corresponsavelId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/corresponsavel/{corresponsavelId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (corresponsavelId === undefined || corresponsavelId === null)
            throw new Error("The parameter 'corresponsavelId' must be defined.");
        url_ = url_.replace("{corresponsavelId}", encodeURIComponent("" + corresponsavelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirCorresponsaveis(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirCorresponsaveis(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirCorresponsaveis(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirOrcamento(id: string, command: DeclaracaoTrabalhoOrcamentoCriarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/orcamento";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processIncluirOrcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterarOcamento(id: string, declaracaoTrabalhoOrcamentoId: string, command: DeclaracaoTrabalhoOrcamentoAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/orcamento/{declaracaoTrabalhoOrcamentoId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (declaracaoTrabalhoOrcamentoId === undefined || declaracaoTrabalhoOrcamentoId === null)
            throw new Error("The parameter 'declaracaoTrabalhoOrcamentoId' must be defined.");
        url_ = url_.replace("{declaracaoTrabalhoOrcamentoId}", encodeURIComponent("" + declaracaoTrabalhoOrcamentoId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarOcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarOcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterarOcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    excluirOrcamento(id: number, declaracaoTrabalhoOrcamentoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/orcamento/{declaracaoTrabalhoOrcamentoId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (declaracaoTrabalhoOrcamentoId === undefined || declaracaoTrabalhoOrcamentoId === null)
            throw new Error("The parameter 'declaracaoTrabalhoOrcamentoId' must be defined.");
        url_ = url_.replace("{declaracaoTrabalhoOrcamentoId}", encodeURIComponent("" + declaracaoTrabalhoOrcamentoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirOrcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterAnexoComBase64(id: number, declaracaoTrabalhoAnexoId: number): Observable<DeclaracaoTrabalhoAnexoComArquivoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/anexo/{declaracaoTrabalhoAnexoId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (declaracaoTrabalhoAnexoId === undefined || declaracaoTrabalhoAnexoId === null)
            throw new Error("The parameter 'declaracaoTrabalhoAnexoId' must be defined.");
        url_ = url_.replace("{declaracaoTrabalhoAnexoId}", encodeURIComponent("" + declaracaoTrabalhoAnexoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterAnexoComBase64(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterAnexoComBase64(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoAnexoComArquivoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoAnexoComArquivoVm>;
        }));
    }

    protected processObterAnexoComBase64(response: HttpResponseBase): Observable<DeclaracaoTrabalhoAnexoComArquivoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoAnexoComArquivoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoAnexoComArquivoVm>(null as any);
    }

    excluirAnexo(id: number, declaracaoTrabalhoAnexoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/anexo/{declaracaoTrabalhoAnexoId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (declaracaoTrabalhoAnexoId === undefined || declaracaoTrabalhoAnexoId === null)
            throw new Error("The parameter 'declaracaoTrabalhoAnexoId' must be defined.");
        url_ = url_.replace("{declaracaoTrabalhoAnexoId}", encodeURIComponent("" + declaracaoTrabalhoAnexoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirAnexo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirAnexo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirAnexo(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    /**
     * Obtém um anexo da DT por ID do Anexo
     */
    incluirAnexo(id: string, command: DeclaracaoTrabalhoAnexoCriarCommand): Observable<DeclaracaoTrabalhoAnexoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{id}/anexo";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirAnexo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirAnexo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoAnexoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoAnexoVm>;
        }));
    }

    protected processIncluirAnexo(response: HttpResponseBase): Observable<DeclaracaoTrabalhoAnexoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoAnexoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoAnexoVm>(null as any);
    }

    alterarSituacao(command: DeclaracaoTrabalhoAlterarSituacaoCommand): Observable<DeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/alterar-situacao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoVm>;
        }));
    }

    protected processAlterarSituacao(response: HttpResponseBase): Observable<DeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoVm>(null as any);
    }

    obterPermissoesAcesso(query: DeclaracaoTrabalhoObterPermissoesAcessoQuery): Observable<PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/permissao-acesso/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPermissoesAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPermissoesAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm>;
        }));
    }

    protected processObterPermissoesAcesso(response: HttpResponseBase): Observable<PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm>(null as any);
    }

    adicionarPermissaoAcesso(command: DeclaracaoTrabalhoAdicionarPermissaoAcessoCommand): Observable<PermissaoAcessoDeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/permissao-acesso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdicionarPermissaoAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdicionarPermissaoAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PermissaoAcessoDeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PermissaoAcessoDeclaracaoTrabalhoVm>;
        }));
    }

    protected processAdicionarPermissaoAcesso(response: HttpResponseBase): Observable<PermissaoAcessoDeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissaoAcessoDeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissaoAcessoDeclaracaoTrabalhoVm>(null as any);
    }

    alterarPermissaoAcesso(command: DeclaracaoTrabalhoAlterarPermissaoAcessoCommand): Observable<PermissaoAcessoDeclaracaoTrabalhoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/permissao-acesso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarPermissaoAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarPermissaoAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PermissaoAcessoDeclaracaoTrabalhoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PermissaoAcessoDeclaracaoTrabalhoVm>;
        }));
    }

    protected processAlterarPermissaoAcesso(response: HttpResponseBase): Observable<PermissaoAcessoDeclaracaoTrabalhoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissaoAcessoDeclaracaoTrabalhoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissaoAcessoDeclaracaoTrabalhoVm>(null as any);
    }

    removerPermissaoAcesso(permissaoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/permissao-acesso/{permissaoId}";
        if (permissaoId === undefined || permissaoId === null)
            throw new Error("The parameter 'permissaoId' must be defined.");
        url_ = url_.replace("{permissaoId}", encodeURIComponent("" + permissaoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoverPermissaoAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoverPermissaoAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processRemoverPermissaoAcesso(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterOrcamento(orcamentoId: number): Observable<DeclaracaoTrabalhoOrcamentoVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/orcamento/{orcamentoId}";
        if (orcamentoId === undefined || orcamentoId === null)
            throw new Error("The parameter 'orcamentoId' must be defined.");
        url_ = url_.replace("{orcamentoId}", encodeURIComponent("" + orcamentoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoOrcamentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoOrcamentoVm>;
        }));
    }

    protected processObterOrcamento(response: HttpResponseBase): Observable<DeclaracaoTrabalhoOrcamentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoOrcamentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoOrcamentoVm>(null as any);
    }

    exportar(query: DeclaracaoTrabalhoObterQuery): Observable<DeclaracaoTrabalhoExcelVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/exportar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeclaracaoTrabalhoExcelVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeclaracaoTrabalhoExcelVm>;
        }));
    }

    protected processExportar(response: HttpResponseBase): Observable<DeclaracaoTrabalhoExcelVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeclaracaoTrabalhoExcelVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeclaracaoTrabalhoExcelVm>(null as any);
    }

    exportarOrcamentos(declaracaoTrabalhoId: number): Observable<ExcelVm> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/{declaracaoTrabalhoId}/orcamento/exportar";
        if (declaracaoTrabalhoId === undefined || declaracaoTrabalhoId === null)
            throw new Error("The parameter 'declaracaoTrabalhoId' must be defined.");
        url_ = url_.replace("{declaracaoTrabalhoId}", encodeURIComponent("" + declaracaoTrabalhoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportarOrcamentos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportarOrcamentos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExcelVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExcelVm>;
        }));
    }

    protected processExportarOrcamentos(response: HttpResponseBase): Observable<ExcelVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExcelVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExcelVm>(null as any);
    }

    searchProjeto(query: SearchProjetoQuery): Observable<PaginatedListOfSearchProjetoDto> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/searchProjeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchProjeto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchProjeto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfSearchProjetoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfSearchProjetoDto>;
        }));
    }

    protected processSearchProjeto(response: HttpResponseBase): Observable<PaginatedListOfSearchProjetoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfSearchProjetoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfSearchProjetoDto>(null as any);
    }

    relatorio(query: DeclaracaoTrabalhoRelatorioQuery): Observable<RelatorioDTDto> {
        let url_ = this.baseUrl + "/api/DeclaracoesTrabalho/relatorio";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRelatorio(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRelatorio(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RelatorioDTDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RelatorioDTDto>;
        }));
    }

    protected processRelatorio(response: HttpResponseBase): Observable<RelatorioDTDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RelatorioDTDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RelatorioDTDto>(null as any);
    }
}

export interface IDepartamentosClient {
    obter(): Observable<DepartamentoVm[]>;
    criar(request: DepartamentoCriarCommand): Observable<Unit>;
    alterar(request: DepartamentoAlterarCommand): Observable<Unit>;
    obterPorId(id: number): Observable<DepartamentoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class DepartamentosClient implements IDepartamentosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(): Observable<DepartamentoVm[]> {
        let url_ = this.baseUrl + "/api/Departamentos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartamentoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartamentoVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<DepartamentoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepartamentoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DepartamentoVm[]>(null as any);
    }

    criar(request: DepartamentoCriarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Departamentos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterar(request: DepartamentoAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Departamentos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPorId(id: number): Observable<DepartamentoVm> {
        let url_ = this.baseUrl + "/api/Departamentos/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartamentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartamentoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<DepartamentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartamentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DepartamentoVm>(null as any);
    }
}

export interface IDiariosBordoClient {
    obterPorProjetoId(query: DiarioBordoObterPorProjetoQuery): Observable<PaginatedListOfDiarioBordoVm>;
    criar(request: DiarioBordoCriarCommand): Observable<DiarioBordoVm>;
    alterar(request: DiarioBordoAlterarCommand): Observable<DiarioBordoVm>;
    excluir(id: number): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class DiariosBordoClient implements IDiariosBordoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorProjetoId(query: DiarioBordoObterPorProjetoQuery): Observable<PaginatedListOfDiarioBordoVm> {
        let url_ = this.baseUrl + "/api/DiariosBordo/obter-por-projeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorProjetoId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorProjetoId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfDiarioBordoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfDiarioBordoVm>;
        }));
    }

    protected processObterPorProjetoId(response: HttpResponseBase): Observable<PaginatedListOfDiarioBordoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfDiarioBordoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfDiarioBordoVm>(null as any);
    }

    criar(request: DiarioBordoCriarCommand): Observable<DiarioBordoVm> {
        let url_ = this.baseUrl + "/api/DiariosBordo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DiarioBordoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DiarioBordoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<DiarioBordoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiarioBordoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DiarioBordoVm>(null as any);
    }

    alterar(request: DiarioBordoAlterarCommand): Observable<DiarioBordoVm> {
        let url_ = this.baseUrl + "/api/DiariosBordo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DiarioBordoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DiarioBordoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<DiarioBordoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiarioBordoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DiarioBordoVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/DiariosBordo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IEquipeProjetoClient {
    criar(request: EquipeProjetoCriarCommand): Observable<EquipeProjetoVm>;
    alterar(request: EquipeProjetoAlterarCommand): Observable<EquipeProjetoVm>;
    obterPorId(id: number): Observable<EquipeProjetoVm>;
    obter(query: EquipeProjetoObterTodosQuery): Observable<PaginatedListOfEquipeProjetoVm>;
    excluir(id: number): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class EquipeProjetoClient implements IEquipeProjetoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: EquipeProjetoCriarCommand): Observable<EquipeProjetoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<EquipeProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoVm>(null as any);
    }

    alterar(request: EquipeProjetoAlterarCommand): Observable<EquipeProjetoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<EquipeProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoVm>(null as any);
    }

    obterPorId(id: number): Observable<EquipeProjetoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjeto/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<EquipeProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoVm>(null as any);
    }

    obter(query: EquipeProjetoObterTodosQuery): Observable<PaginatedListOfEquipeProjetoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjeto/obter-todos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfEquipeProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfEquipeProjetoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfEquipeProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfEquipeProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfEquipeProjetoVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/EquipeProjeto/excluir/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IEquipeProjetoFuncaoClient {
    criar(request: EquipeProjetoFuncaoCriarCommand): Observable<EquipeProjetoFuncaoVm>;
    alterar(request: EquipeProjetoFuncaoAlterarCommand): Observable<EquipeProjetoFuncaoVm>;
    obterPorId(id: number): Observable<EquipeProjetoFuncaoVm>;
    obter(query: EquipeProjetoFuncaoObterTodosQuery): Observable<PaginatedListOfEquipeProjetoFuncaoVm>;
    excluir(id: number): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class EquipeProjetoFuncaoClient implements IEquipeProjetoFuncaoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: EquipeProjetoFuncaoCriarCommand): Observable<EquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjetoFuncao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoFuncaoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<EquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoFuncaoVm>(null as any);
    }

    alterar(request: EquipeProjetoFuncaoAlterarCommand): Observable<EquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjetoFuncao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoFuncaoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<EquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoFuncaoVm>(null as any);
    }

    obterPorId(id: number): Observable<EquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjetoFuncao/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoFuncaoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<EquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoFuncaoVm>(null as any);
    }

    obter(query: EquipeProjetoFuncaoObterTodosQuery): Observable<PaginatedListOfEquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/EquipeProjetoFuncao/obter-todos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfEquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfEquipeProjetoFuncaoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfEquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfEquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfEquipeProjetoFuncaoVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/EquipeProjetoFuncao/excluir/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IGruposAcessoClient {
    obterPorId(id: number): Observable<GrupoAcessoVm>;
    obter(): Observable<GrupoAcessoVm[]>;
    criar(command: GrupoAcessoCriarCommand): Observable<GrupoAcessoVm>;
    alterar(command: GrupoAcessoAlterarCommand): Observable<GrupoAcessoVm>;
    /**
     * Vincular/desvincular permissões ao grupo
     */
    vincularDesvincularPermissao(command: GrupoAcessoVincularDesvincularPermissaoCommand): Observable<Unit>;
    obterTodosUsuariosGrupo(query: GrupoAcessoObterTodosUsuariosQuery): Observable<PaginatedListOfUsuarioVm>;
}

@Injectable({
    providedIn: 'root'
})
export class GruposAcessoClient implements IGruposAcessoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorId(id: number): Observable<GrupoAcessoVm> {
        let url_ = this.baseUrl + "/api/GruposAcesso/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GrupoAcessoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GrupoAcessoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<GrupoAcessoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GrupoAcessoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GrupoAcessoVm>(null as any);
    }

    obter(): Observable<GrupoAcessoVm[]> {
        let url_ = this.baseUrl + "/api/GruposAcesso/obter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GrupoAcessoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GrupoAcessoVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<GrupoAcessoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GrupoAcessoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GrupoAcessoVm[]>(null as any);
    }

    criar(command: GrupoAcessoCriarCommand): Observable<GrupoAcessoVm> {
        let url_ = this.baseUrl + "/api/GruposAcesso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GrupoAcessoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GrupoAcessoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<GrupoAcessoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GrupoAcessoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GrupoAcessoVm>(null as any);
    }

    alterar(command: GrupoAcessoAlterarCommand): Observable<GrupoAcessoVm> {
        let url_ = this.baseUrl + "/api/GruposAcesso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GrupoAcessoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GrupoAcessoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<GrupoAcessoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GrupoAcessoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GrupoAcessoVm>(null as any);
    }

    /**
     * Vincular/desvincular permissões ao grupo
     */
    vincularDesvincularPermissao(command: GrupoAcessoVincularDesvincularPermissaoCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/GruposAcesso/grupo-permissao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVincularDesvincularPermissao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVincularDesvincularPermissao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processVincularDesvincularPermissao(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterTodosUsuariosGrupo(query: GrupoAcessoObterTodosUsuariosQuery): Observable<PaginatedListOfUsuarioVm> {
        let url_ = this.baseUrl + "/api/GruposAcesso/grupo-usuarios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterTodosUsuariosGrupo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterTodosUsuariosGrupo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfUsuarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfUsuarioVm>;
        }));
    }

    protected processObterTodosUsuariosGrupo(response: HttpResponseBase): Observable<PaginatedListOfUsuarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfUsuarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfUsuarioVm>(null as any);
    }
}

export interface IIndicadoresAvaliacaoClient {
    obterTodasPerguntas(query: PerguntaIndicadorObterTodosQuery): Observable<PaginatedListOfPerguntaIndicadorVm>;
    criarPergunta(request: PerguntaIndicadoresCriarCommand): Observable<PerguntaIndicadorVm>;
    alterarPergunta(request: PerguntaIndicadoresAlterarCommand): Observable<PerguntaIndicadorVm>;
    excluirPergunta(id: number): Observable<PerguntaIndicadorVm>;
    incluirPesoResposta(request: PesosRespostasIndicadoresCriarCommand): Observable<PesoRespostaIndicadorVm>;
    alterarPesoResposta(request: PesosRespostasIndicadoresAlterarCommand): Observable<PesoRespostaIndicadorVm>;
    excluirPesoPergunta(id: number): Observable<PesoRespostaIndicadorVm>;
}

@Injectable({
    providedIn: 'root'
})
export class IndicadoresAvaliacaoClient implements IIndicadoresAvaliacaoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterTodasPerguntas(query: PerguntaIndicadorObterTodosQuery): Observable<PaginatedListOfPerguntaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/pergunta-indicador/obter-todos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterTodasPerguntas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterTodasPerguntas(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPerguntaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPerguntaIndicadorVm>;
        }));
    }

    protected processObterTodasPerguntas(response: HttpResponseBase): Observable<PaginatedListOfPerguntaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPerguntaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPerguntaIndicadorVm>(null as any);
    }

    criarPergunta(request: PerguntaIndicadoresCriarCommand): Observable<PerguntaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/pergunta-indicador";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriarPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriarPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PerguntaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PerguntaIndicadorVm>;
        }));
    }

    protected processCriarPergunta(response: HttpResponseBase): Observable<PerguntaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PerguntaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PerguntaIndicadorVm>(null as any);
    }

    alterarPergunta(request: PerguntaIndicadoresAlterarCommand): Observable<PerguntaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/pergunta-indicador";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PerguntaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PerguntaIndicadorVm>;
        }));
    }

    protected processAlterarPergunta(response: HttpResponseBase): Observable<PerguntaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PerguntaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PerguntaIndicadorVm>(null as any);
    }

    excluirPergunta(id: number): Observable<PerguntaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/pergunta-indicador/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PerguntaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PerguntaIndicadorVm>;
        }));
    }

    protected processExcluirPergunta(response: HttpResponseBase): Observable<PerguntaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PerguntaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PerguntaIndicadorVm>(null as any);
    }

    incluirPesoResposta(request: PesosRespostasIndicadoresCriarCommand): Observable<PesoRespostaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/peso-pergunta-indicador";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirPesoResposta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirPesoResposta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PesoRespostaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PesoRespostaIndicadorVm>;
        }));
    }

    protected processIncluirPesoResposta(response: HttpResponseBase): Observable<PesoRespostaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PesoRespostaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PesoRespostaIndicadorVm>(null as any);
    }

    alterarPesoResposta(request: PesosRespostasIndicadoresAlterarCommand): Observable<PesoRespostaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/peso-pergunta-indicador";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarPesoResposta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarPesoResposta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PesoRespostaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PesoRespostaIndicadorVm>;
        }));
    }

    protected processAlterarPesoResposta(response: HttpResponseBase): Observable<PesoRespostaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PesoRespostaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PesoRespostaIndicadorVm>(null as any);
    }

    excluirPesoPergunta(id: number): Observable<PesoRespostaIndicadorVm> {
        let url_ = this.baseUrl + "/api/IndicadoresAvaliacao/peso-pergunta-indicador/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirPesoPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirPesoPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PesoRespostaIndicadorVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PesoRespostaIndicadorVm>;
        }));
    }

    protected processExcluirPesoPergunta(response: HttpResponseBase): Observable<PesoRespostaIndicadorVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PesoRespostaIndicadorVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PesoRespostaIndicadorVm>(null as any);
    }
}

export interface ILicaoAprendidaClient {
    criar(request: LicaoAprendidaCriarCommand): Observable<LicaoAprendidaVm>;
    alterar(request: LicaoAprendidaAlterarCommand): Observable<LicaoAprendidaVm>;
    excluir(id: number): Observable<Unit>;
    obterPorProjetoId(query: LicaoAprendidaObterPorProjetoQuery): Observable<PaginatedListOfLicaoAprendidaVm>;
}

@Injectable({
    providedIn: 'root'
})
export class LicaoAprendidaClient implements ILicaoAprendidaClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: LicaoAprendidaCriarCommand): Observable<LicaoAprendidaVm> {
        let url_ = this.baseUrl + "/api/LicaoAprendida";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LicaoAprendidaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LicaoAprendidaVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<LicaoAprendidaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LicaoAprendidaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LicaoAprendidaVm>(null as any);
    }

    alterar(request: LicaoAprendidaAlterarCommand): Observable<LicaoAprendidaVm> {
        let url_ = this.baseUrl + "/api/LicaoAprendida";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LicaoAprendidaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LicaoAprendidaVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<LicaoAprendidaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LicaoAprendidaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LicaoAprendidaVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/LicaoAprendida/excluir/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPorProjetoId(query: LicaoAprendidaObterPorProjetoQuery): Observable<PaginatedListOfLicaoAprendidaVm> {
        let url_ = this.baseUrl + "/api/LicaoAprendida/obter-por-projeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorProjetoId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorProjetoId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfLicaoAprendidaVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfLicaoAprendidaVm>;
        }));
    }

    protected processObterPorProjetoId(response: HttpResponseBase): Observable<PaginatedListOfLicaoAprendidaVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfLicaoAprendidaVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfLicaoAprendidaVm>(null as any);
    }
}

export interface ILogsAlteracoesClient {
    obterPorIdETipoEntidade(query: LogAlteracaoObterPorIdETipoEntidadeQuery): Observable<{ [key: string]: LogAlteracaoVm[]; }>;
    obterPorEntidadeECampo(query: LogAlteracaoObterPorEntidadeECampoQuery): Observable<LogAlteracaoVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class LogsAlteracoesClient implements ILogsAlteracoesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorIdETipoEntidade(query: LogAlteracaoObterPorIdETipoEntidadeQuery): Observable<{ [key: string]: LogAlteracaoVm[]; }> {
        let url_ = this.baseUrl + "/api/LogsAlteracoes/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorIdETipoEntidade(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorIdETipoEntidade(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: LogAlteracaoVm[]; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: LogAlteracaoVm[]; }>;
        }));
    }

    protected processObterPorIdETipoEntidade(response: HttpResponseBase): Observable<{ [key: string]: LogAlteracaoVm[]; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] ? resultData200[key].map((i: any) => LogAlteracaoVm.fromJS(i)) : [];
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: LogAlteracaoVm[]; }>(null as any);
    }

    obterPorEntidadeECampo(query: LogAlteracaoObterPorEntidadeECampoQuery): Observable<LogAlteracaoVm[]> {
        let url_ = this.baseUrl + "/api/LogsAlteracoes/obter-entidade-campo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorEntidadeECampo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorEntidadeECampo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LogAlteracaoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LogAlteracaoVm[]>;
        }));
    }

    protected processObterPorEntidadeECampo(response: HttpResponseBase): Observable<LogAlteracaoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogAlteracaoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LogAlteracaoVm[]>(null as any);
    }
}

export interface INotificacoesClient {
    obter(pageIndex: number | undefined, pageSize: number | undefined): Observable<NotificacaoResponse>;
    marcarComoLida(notificacaoId: number): Observable<Unit>;
    excluirPorId(notificacaoId: number): Observable<Unit>;
    excluirTodas(): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class NotificacoesClient implements INotificacoesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(pageIndex: number | undefined, pageSize: number | undefined): Observable<NotificacaoResponse> {
        let url_ = this.baseUrl + "/api/Notificacoes?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NotificacaoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NotificacaoResponse>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<NotificacaoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NotificacaoResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NotificacaoResponse>(null as any);
    }

    marcarComoLida(notificacaoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Notificacoes/marcar-como-lida/{notificacaoId}";
        if (notificacaoId === undefined || notificacaoId === null)
            throw new Error("The parameter 'notificacaoId' must be defined.");
        url_ = url_.replace("{notificacaoId}", encodeURIComponent("" + notificacaoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMarcarComoLida(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMarcarComoLida(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processMarcarComoLida(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    excluirPorId(notificacaoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Notificacoes/excluir-por-id/{notificacaoId}";
        if (notificacaoId === undefined || notificacaoId === null)
            throw new Error("The parameter 'notificacaoId' must be defined.");
        url_ = url_.replace("{notificacaoId}", encodeURIComponent("" + notificacaoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirPorId(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    excluirTodas(): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Notificacoes/excluir-todas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirTodas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirTodas(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirTodas(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IObjetivosEstrategicosClient {
    obterPorId(id: number): Observable<ObjetivoEstrategicoVm>;
    excluir(id: number): Observable<Unit>;
    obter(): Observable<ObjetivoEstrategicoVm[]>;
    criar(command: ObjetivoEstrategicoCriarCommand): Observable<ObjetivoEstrategicoVm>;
    alterar(command: ObjetivoEstrategicoAlterarCommand): Observable<ObjetivoEstrategicoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class ObjetivosEstrategicosClient implements IObjetivosEstrategicosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorId(id: number): Observable<ObjetivoEstrategicoVm> {
        let url_ = this.baseUrl + "/api/ObjetivosEstrategicos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ObjetivoEstrategicoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ObjetivoEstrategicoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<ObjetivoEstrategicoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjetivoEstrategicoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjetivoEstrategicoVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ObjetivosEstrategicos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obter(): Observable<ObjetivoEstrategicoVm[]> {
        let url_ = this.baseUrl + "/api/ObjetivosEstrategicos/obter-todos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ObjetivoEstrategicoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ObjetivoEstrategicoVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<ObjetivoEstrategicoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ObjetivoEstrategicoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjetivoEstrategicoVm[]>(null as any);
    }

    criar(command: ObjetivoEstrategicoCriarCommand): Observable<ObjetivoEstrategicoVm> {
        let url_ = this.baseUrl + "/api/ObjetivosEstrategicos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ObjetivoEstrategicoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ObjetivoEstrategicoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<ObjetivoEstrategicoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjetivoEstrategicoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjetivoEstrategicoVm>(null as any);
    }

    alterar(command: ObjetivoEstrategicoAlterarCommand): Observable<ObjetivoEstrategicoVm> {
        let url_ = this.baseUrl + "/api/ObjetivosEstrategicos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ObjetivoEstrategicoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ObjetivoEstrategicoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<ObjetivoEstrategicoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjetivoEstrategicoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjetivoEstrategicoVm>(null as any);
    }
}

export interface IPeriodicidadesClient {
    obter(): Observable<PeriodicidadeVm[]>;
    criar(request: PeriodicidadeCriarCommand): Observable<PeriodicidadeVm>;
    alterar(request: PeriodicidadeAlterarCommand): Observable<PeriodicidadeVm>;
    obterPorId(id: number): Observable<PeriodicidadeVm>;
    excluir(id: number): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class PeriodicidadesClient implements IPeriodicidadesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(): Observable<PeriodicidadeVm[]> {
        let url_ = this.baseUrl + "/api/Periodicidades";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PeriodicidadeVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PeriodicidadeVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PeriodicidadeVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PeriodicidadeVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeriodicidadeVm[]>(null as any);
    }

    criar(request: PeriodicidadeCriarCommand): Observable<PeriodicidadeVm> {
        let url_ = this.baseUrl + "/api/Periodicidades";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PeriodicidadeVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PeriodicidadeVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<PeriodicidadeVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeriodicidadeVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeriodicidadeVm>(null as any);
    }

    alterar(request: PeriodicidadeAlterarCommand): Observable<PeriodicidadeVm> {
        let url_ = this.baseUrl + "/api/Periodicidades";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PeriodicidadeVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PeriodicidadeVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<PeriodicidadeVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeriodicidadeVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeriodicidadeVm>(null as any);
    }

    obterPorId(id: number): Observable<PeriodicidadeVm> {
        let url_ = this.baseUrl + "/api/Periodicidades/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PeriodicidadeVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PeriodicidadeVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<PeriodicidadeVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeriodicidadeVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeriodicidadeVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Periodicidades/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IPermissoesAcessoClient {
    obter(): Observable<PermissaoAcessoVm[]>;
    obterPermissoesUsuarioLogado(): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class PermissoesAcessoClient implements IPermissoesAcessoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(): Observable<PermissaoAcessoVm[]> {
        let url_ = this.baseUrl + "/api/PermissoesAcesso/obter-todas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PermissaoAcessoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PermissaoAcessoVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PermissaoAcessoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PermissaoAcessoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissaoAcessoVm[]>(null as any);
    }

    obterPermissoesUsuarioLogado(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/PermissoesAcesso/obter-permissoes-usuario-logado";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPermissoesUsuarioLogado(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPermissoesUsuarioLogado(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processObterPermissoesUsuarioLogado(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(null as any);
    }
}

export interface IPlanosAcaoClient {
    criar(request: PlanoAcaoCriarCommand): Observable<PlanoAcaoVm>;
    alterar(request: PlanoAcaoAlterarCommand): Observable<PlanoAcaoVm>;
    excluir(id: number): Observable<Unit>;
    obterPorProjetoId(query: PlanoAcaoObterPorProjetoQuery): Observable<PaginatedListOfPlanoAcaoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class PlanosAcaoClient implements IPlanosAcaoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: PlanoAcaoCriarCommand): Observable<PlanoAcaoVm> {
        let url_ = this.baseUrl + "/api/PlanosAcao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PlanoAcaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PlanoAcaoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<PlanoAcaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlanoAcaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PlanoAcaoVm>(null as any);
    }

    alterar(request: PlanoAcaoAlterarCommand): Observable<PlanoAcaoVm> {
        let url_ = this.baseUrl + "/api/PlanosAcao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PlanoAcaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PlanoAcaoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<PlanoAcaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlanoAcaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PlanoAcaoVm>(null as any);
    }

    excluir(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PlanosAcao/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPorProjetoId(query: PlanoAcaoObterPorProjetoQuery): Observable<PaginatedListOfPlanoAcaoVm> {
        let url_ = this.baseUrl + "/api/PlanosAcao/obter-por-projeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorProjetoId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorProjetoId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPlanoAcaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPlanoAcaoVm>;
        }));
    }

    protected processObterPorProjetoId(response: HttpResponseBase): Observable<PaginatedListOfPlanoAcaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPlanoAcaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPlanoAcaoVm>(null as any);
    }
}

export interface IPortifoliosClient {
    criar(request: PortifolioCriarCommand): Observable<Portifolio>;
    alterar(request: PortifolioAlterarCommand): Observable<Unit>;
    obter(pageSize: number | undefined, pageIndex: number | undefined): Observable<PaginatedListOfPortifolioRasoVm>;
    obterPorId(id: number): Observable<PortifolioVm>;
    incluirProjeto(request: PortifolioIncluirProjetoCommand): Observable<Unit>;
    incluirPreProjetosPlurianuais(request: PortifolioIncluirPreProjetoProjetoOuPlurianualCommand): Observable<Unit>;
    obterPreProjetosParaVincular(): Observable<ProjetoSelecaoPortifolioVm[]>;
    obterRelatorioOrcamento(query: PortifolioObterRelatorioOrcamentoQuery): Observable<RelatorioOrcamentoDto>;
}

@Injectable({
    providedIn: 'root'
})
export class PortifoliosClient implements IPortifoliosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: PortifolioCriarCommand): Observable<Portifolio> {
        let url_ = this.baseUrl + "/api/Portifolios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Portifolio>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Portifolio>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<Portifolio> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Portifolio.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Portifolio>(null as any);
    }

    alterar(request: PortifolioAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Portifolios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obter(pageSize: number | undefined, pageIndex: number | undefined): Observable<PaginatedListOfPortifolioRasoVm> {
        let url_ = this.baseUrl + "/api/Portifolios?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPortifolioRasoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPortifolioRasoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfPortifolioRasoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPortifolioRasoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPortifolioRasoVm>(null as any);
    }

    obterPorId(id: number): Observable<PortifolioVm> {
        let url_ = this.baseUrl + "/api/Portifolios/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PortifolioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PortifolioVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<PortifolioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PortifolioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PortifolioVm>(null as any);
    }

    incluirProjeto(request: PortifolioIncluirProjetoCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Portifolios/incluir-projeto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirProjeto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirProjeto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processIncluirProjeto(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirPreProjetosPlurianuais(request: PortifolioIncluirPreProjetoProjetoOuPlurianualCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Portifolios/incluir-preprojetos-plurianuais";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirPreProjetosPlurianuais(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirPreProjetosPlurianuais(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processIncluirPreProjetosPlurianuais(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPreProjetosParaVincular(): Observable<ProjetoSelecaoPortifolioVm[]> {
        let url_ = this.baseUrl + "/api/Portifolios/obter-preprojetos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPreProjetosParaVincular(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPreProjetosParaVincular(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoSelecaoPortifolioVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoSelecaoPortifolioVm[]>;
        }));
    }

    protected processObterPreProjetosParaVincular(response: HttpResponseBase): Observable<ProjetoSelecaoPortifolioVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjetoSelecaoPortifolioVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoSelecaoPortifolioVm[]>(null as any);
    }

    obterRelatorioOrcamento(query: PortifolioObterRelatorioOrcamentoQuery): Observable<RelatorioOrcamentoDto> {
        let url_ = this.baseUrl + "/api/Portifolios/relatorio";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterRelatorioOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterRelatorioOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RelatorioOrcamentoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RelatorioOrcamentoDto>;
        }));
    }

    protected processObterRelatorioOrcamento(response: HttpResponseBase): Observable<RelatorioOrcamentoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RelatorioOrcamentoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RelatorioOrcamentoDto>(null as any);
    }
}

export interface IPreProjetosClient {
    obterPorId(id: number): Observable<PreProjetoVm>;
    obter(command: PreProjetosObterQuery): Observable<PaginatedListOfPreProjetoVm>;
    obterArquivados(command: PreProjetosObterArquivadosQuery): Observable<PaginatedListOfPreProjetoVm>;
    criar(command: PreProjetoCriarCommand): Observable<PreProjetoVm>;
    alterar(command: PreProjetoAlterarCommand): Observable<PreProjetoVm>;
    excluir(projetoId: number): Observable<Unit>;
    alterarParecer(projetoId: number, command: PreProjetoAlterarParecerCommand): Observable<PreProjetoVm>;
    alterarSituacao(projetoId: number, command: PreProjetoAlterarSituacaoCommand): Observable<PreProjetoVm>;
    arquivarProjeto(projetoId: number, mensagem: string | null | undefined): Observable<PreProjetoVm>;
    incluirOrcamento(command: PreProjetoOrcamentoCriarCommand): Observable<PreProjetoOrcamentoVm>;
    alterarOcamento(command: PreProjetoOrcamentoAlterarCommand): Observable<Unit>;
    excluirOrcamento(projetoOrcamentoId: number): Observable<Unit>;
    obterOrcamentos(projetoId: number): Observable<PreProjetoOrcamentoVm[]>;
    alterarSituacaoOcamento(command: PreProjetoOrcamentoAlterarSituacaoCommand): Observable<PreProjetoOrcamentoVm>;
    obterPermissoesAcesso(query: PreProjetoObterPermissoesAcessoQuery): Observable<PaginatedListOfPermissaoAcessoPreProjetoVm>;
    adicionarPermissaoAcesso(command: PreProjetoAdicionarPermissaoAcessoCommand): Observable<PermissaoAcessoPreProjetoVm>;
    alterarPermissaoAcesso(command: PreProjetoAlterarPermissaoAcessoCommand): Observable<PermissaoAcessoPreProjetoVm>;
    removerPermissaoAcesso(permissaoId: number): Observable<Unit>;
    obterPontuacao(projetoId: number): Observable<PontuacaoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class PreProjetosClient implements IPreProjetosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorId(id: number): Observable<PreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<PreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoVm>(null as any);
    }

    obter(command: PreProjetosObterQuery): Observable<PaginatedListOfPreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPreProjetoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfPreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPreProjetoVm>(null as any);
    }

    obterArquivados(command: PreProjetosObterArquivadosQuery): Observable<PaginatedListOfPreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/obter-arquivados";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterArquivados(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterArquivados(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPreProjetoVm>;
        }));
    }

    protected processObterArquivados(response: HttpResponseBase): Observable<PaginatedListOfPreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPreProjetoVm>(null as any);
    }

    criar(command: PreProjetoCriarCommand): Observable<PreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<PreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoVm>(null as any);
    }

    alterar(command: PreProjetoAlterarCommand): Observable<PreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<PreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoVm>(null as any);
    }

    excluir(projetoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PreProjetos/{projetoId}";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterarParecer(projetoId: number, command: PreProjetoAlterarParecerCommand): Observable<PreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/{projetoId}/alterar-parecer";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarParecer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarParecer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoVm>;
        }));
    }

    protected processAlterarParecer(response: HttpResponseBase): Observable<PreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoVm>(null as any);
    }

    alterarSituacao(projetoId: number, command: PreProjetoAlterarSituacaoCommand): Observable<PreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/{projetoId}/alterar-situacao";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoVm>;
        }));
    }

    protected processAlterarSituacao(response: HttpResponseBase): Observable<PreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoVm>(null as any);
    }

    arquivarProjeto(projetoId: number, mensagem: string | null | undefined): Observable<PreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/{projetoId}/arquivar-projeto?";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        if (mensagem !== undefined && mensagem !== null)
            url_ += "mensagem=" + encodeURIComponent("" + mensagem) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processArquivarProjeto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processArquivarProjeto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoVm>;
        }));
    }

    protected processArquivarProjeto(response: HttpResponseBase): Observable<PreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoVm>(null as any);
    }

    incluirOrcamento(command: PreProjetoOrcamentoCriarCommand): Observable<PreProjetoOrcamentoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/orcamento";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoOrcamentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoOrcamentoVm>;
        }));
    }

    protected processIncluirOrcamento(response: HttpResponseBase): Observable<PreProjetoOrcamentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoOrcamentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoOrcamentoVm>(null as any);
    }

    alterarOcamento(command: PreProjetoOrcamentoAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PreProjetos/orcamento";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarOcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarOcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterarOcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    excluirOrcamento(projetoOrcamentoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PreProjetos/orcamento/{projetoOrcamentoId}";
        if (projetoOrcamentoId === undefined || projetoOrcamentoId === null)
            throw new Error("The parameter 'projetoOrcamentoId' must be defined.");
        url_ = url_.replace("{projetoOrcamentoId}", encodeURIComponent("" + projetoOrcamentoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirOrcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterOrcamentos(projetoId: number): Observable<PreProjetoOrcamentoVm[]> {
        let url_ = this.baseUrl + "/api/PreProjetos/orcamento/obter-por-projeto/{projetoId}";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterOrcamentos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterOrcamentos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoOrcamentoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoOrcamentoVm[]>;
        }));
    }

    protected processObterOrcamentos(response: HttpResponseBase): Observable<PreProjetoOrcamentoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PreProjetoOrcamentoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoOrcamentoVm[]>(null as any);
    }

    alterarSituacaoOcamento(command: PreProjetoOrcamentoAlterarSituacaoCommand): Observable<PreProjetoOrcamentoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/orcamento/alterar-situacao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacaoOcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacaoOcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PreProjetoOrcamentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PreProjetoOrcamentoVm>;
        }));
    }

    protected processAlterarSituacaoOcamento(response: HttpResponseBase): Observable<PreProjetoOrcamentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PreProjetoOrcamentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PreProjetoOrcamentoVm>(null as any);
    }

    obterPermissoesAcesso(query: PreProjetoObterPermissoesAcessoQuery): Observable<PaginatedListOfPermissaoAcessoPreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/permissao-acesso/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPermissoesAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPermissoesAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfPermissaoAcessoPreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfPermissaoAcessoPreProjetoVm>;
        }));
    }

    protected processObterPermissoesAcesso(response: HttpResponseBase): Observable<PaginatedListOfPermissaoAcessoPreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfPermissaoAcessoPreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfPermissaoAcessoPreProjetoVm>(null as any);
    }

    adicionarPermissaoAcesso(command: PreProjetoAdicionarPermissaoAcessoCommand): Observable<PermissaoAcessoPreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/permissao-acesso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdicionarPermissaoAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdicionarPermissaoAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PermissaoAcessoPreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PermissaoAcessoPreProjetoVm>;
        }));
    }

    protected processAdicionarPermissaoAcesso(response: HttpResponseBase): Observable<PermissaoAcessoPreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissaoAcessoPreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissaoAcessoPreProjetoVm>(null as any);
    }

    alterarPermissaoAcesso(command: PreProjetoAlterarPermissaoAcessoCommand): Observable<PermissaoAcessoPreProjetoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/permissao-acesso";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarPermissaoAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarPermissaoAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PermissaoAcessoPreProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PermissaoAcessoPreProjetoVm>;
        }));
    }

    protected processAlterarPermissaoAcesso(response: HttpResponseBase): Observable<PermissaoAcessoPreProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissaoAcessoPreProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissaoAcessoPreProjetoVm>(null as any);
    }

    removerPermissaoAcesso(permissaoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PreProjetos/permissao-acesso/{permissaoId}";
        if (permissaoId === undefined || permissaoId === null)
            throw new Error("The parameter 'permissaoId' must be defined.");
        url_ = url_.replace("{permissaoId}", encodeURIComponent("" + permissaoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoverPermissaoAcesso(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoverPermissaoAcesso(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processRemoverPermissaoAcesso(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPontuacao(projetoId: number): Observable<PontuacaoVm> {
        let url_ = this.baseUrl + "/api/PreProjetos/{projetoId}/pontuacao";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPontuacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPontuacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PontuacaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PontuacaoVm>;
        }));
    }

    protected processObterPontuacao(response: HttpResponseBase): Observable<PontuacaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PontuacaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PontuacaoVm>(null as any);
    }
}

export interface IProdutosClient {
    obter(): Observable<ProdutoVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ProdutosClient implements IProdutosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(): Observable<ProdutoVm[]> {
        let url_ = this.baseUrl + "/api/Produtos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProdutoVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProdutoVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<ProdutoVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProdutoVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProdutoVm[]>(null as any);
    }
}

export interface IProjetosClient {
    criar(request: ProjetoCriarCommand): Observable<Unit>;
    alterar(request: ProjetoAlterarCommand): Observable<Unit>;
    obter(nome: string | null | undefined, situacao: SituacaoProjeto | null | undefined, loginGerenteProjeto: string | null | undefined, loginGerenteNegocio: string | null | undefined, loginSponsor: string | null | undefined, dataInicio: Date | null | undefined, dataFim: Date | null | undefined, pageSize: number | undefined, pageIndex: number | undefined): Observable<PaginatedListOfProjetoVm>;
    excluir(request: ProjetoExcluirCommand): Observable<Unit>;
    obterPorId(id: number, ano: number | null | undefined): Observable<ProjetoVm>;
    incluirPlano(request: ProjetoIncluirPlanoComunicacaoCommand): Observable<PlanoDeComunicacaoVm>;
    excluirPlano(request: ProjetoExcluirPlanoComunicacaoCommand): Observable<Unit>;
    incluirRisco(request: ProjetoIncluirRiscoCommand): Observable<RiscoVm>;
    excluirRisco(request: ProjetoExcluirRiscoCommand): Observable<Unit>;
    alterarSituacao(command: ProjetoAlterarSituacaoCommand): Observable<ProjetoVm>;
    tornarPlurianual(projetoId: number): Observable<number>;
    obterSituacoes(request: ProjetoSituacaoObterPorProjetoQuery): Observable<PaginatedListOfProjetoSituacaoVm>;
    alterarStatus(request: ProjetoAlterarStatusCommand): Observable<ProjetoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class ProjetosClient implements IProjetosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: ProjetoCriarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Projetos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterar(request: ProjetoAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Projetos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obter(nome: string | null | undefined, situacao: SituacaoProjeto | null | undefined, loginGerenteProjeto: string | null | undefined, loginGerenteNegocio: string | null | undefined, loginSponsor: string | null | undefined, dataInicio: Date | null | undefined, dataFim: Date | null | undefined, pageSize: number | undefined, pageIndex: number | undefined): Observable<PaginatedListOfProjetoVm> {
        let url_ = this.baseUrl + "/api/Projetos/obter?";
        if (nome !== undefined && nome !== null)
            url_ += "Nome=" + encodeURIComponent("" + nome) + "&";
        if (situacao !== undefined && situacao !== null)
            url_ += "Situacao=" + encodeURIComponent("" + situacao) + "&";
        if (loginGerenteProjeto !== undefined && loginGerenteProjeto !== null)
            url_ += "LoginGerenteProjeto=" + encodeURIComponent("" + loginGerenteProjeto) + "&";
        if (loginGerenteNegocio !== undefined && loginGerenteNegocio !== null)
            url_ += "LoginGerenteNegocio=" + encodeURIComponent("" + loginGerenteNegocio) + "&";
        if (loginSponsor !== undefined && loginSponsor !== null)
            url_ += "LoginSponsor=" + encodeURIComponent("" + loginSponsor) + "&";
        if (dataInicio !== undefined && dataInicio !== null)
            url_ += "DataInicio=" + encodeURIComponent(dataInicio ? "" + dataInicio.toISOString() : "") + "&";
        if (dataFim !== undefined && dataFim !== null)
            url_ += "DataFim=" + encodeURIComponent(dataFim ? "" + dataFim.toISOString() : "") + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfProjetoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfProjetoVm>(null as any);
    }

    excluir(request: ProjetoExcluirCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Projetos/excluir";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obterPorId(id: number, ano: number | null | undefined): Observable<ProjetoVm> {
        let url_ = this.baseUrl + "/api/Projetos/{Id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        if (ano !== undefined && ano !== null)
            url_ += "Ano=" + encodeURIComponent("" + ano) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<ProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoVm>(null as any);
    }

    incluirPlano(request: ProjetoIncluirPlanoComunicacaoCommand): Observable<PlanoDeComunicacaoVm> {
        let url_ = this.baseUrl + "/api/Projetos/incluir-plano";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirPlano(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirPlano(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PlanoDeComunicacaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PlanoDeComunicacaoVm>;
        }));
    }

    protected processIncluirPlano(response: HttpResponseBase): Observable<PlanoDeComunicacaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlanoDeComunicacaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PlanoDeComunicacaoVm>(null as any);
    }

    excluirPlano(request: ProjetoExcluirPlanoComunicacaoCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Projetos/excluir-plano";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirPlano(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirPlano(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirPlano(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirRisco(request: ProjetoIncluirRiscoCommand): Observable<RiscoVm> {
        let url_ = this.baseUrl + "/api/Projetos/incluir-risco";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirRisco(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirRisco(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RiscoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RiscoVm>;
        }));
    }

    protected processIncluirRisco(response: HttpResponseBase): Observable<RiscoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RiscoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RiscoVm>(null as any);
    }

    excluirRisco(request: ProjetoExcluirRiscoCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Projetos/excluir-risco";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirRisco(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirRisco(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirRisco(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterarSituacao(command: ProjetoAlterarSituacaoCommand): Observable<ProjetoVm> {
        let url_ = this.baseUrl + "/api/Projetos/alterar-situacao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoVm>;
        }));
    }

    protected processAlterarSituacao(response: HttpResponseBase): Observable<ProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoVm>(null as any);
    }

    tornarPlurianual(projetoId: number): Observable<number> {
        let url_ = this.baseUrl + "/api/Projetos/tornar-plurianual/{projetoId}";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTornarPlurianual(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTornarPlurianual(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processTornarPlurianual(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    obterSituacoes(request: ProjetoSituacaoObterPorProjetoQuery): Observable<PaginatedListOfProjetoSituacaoVm> {
        let url_ = this.baseUrl + "/api/Projetos/obter-situacoes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterSituacoes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterSituacoes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfProjetoSituacaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfProjetoSituacaoVm>;
        }));
    }

    protected processObterSituacoes(response: HttpResponseBase): Observable<PaginatedListOfProjetoSituacaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfProjetoSituacaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfProjetoSituacaoVm>(null as any);
    }

    alterarStatus(request: ProjetoAlterarStatusCommand): Observable<ProjetoVm> {
        let url_ = this.baseUrl + "/api/Projetos/alterar-status";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoVm>;
        }));
    }

    protected processAlterarStatus(response: HttpResponseBase): Observable<ProjetoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoVm>(null as any);
    }
}

export interface IProjetosPlurianuaisClient {
    obterPorId(id: number): Observable<ProjetoPlurianualVm>;
    obter(command: ProjetoPlurianualObterQuery): Observable<PaginatedListOfProjetoPlurianualVm>;
    criar(command: ProjetoPlurianualCriarCommand): Observable<ProjetoPlurianualVm>;
    alterar(command: ProjetoPlurianualAlterarCommand): Observable<ProjetoPlurianualVm>;
    excluir(projetoId: number): Observable<Unit>;
    alterarSituacao(id: string, command: ProjetoPlurianualAlterarSituacaoCommand): Observable<ProjetoPlurianualVm>;
    incluirOrcamento(command: ProjetoPlurianualOrcamentoCriarCommand): Observable<ProjetoPlurianualOrcamentoVm>;
    alterarOcamento(command: ProjetoPlurianualOrcamentoAlterarCommand): Observable<Unit>;
    excluirOrcamento(projetoPlurianualOrcamentoId: number): Observable<Unit>;
    alterarSituacaoOcamento(command: ProjetoPlurianualOrcamentoAlterarSituacaoCommand): Observable<ProjetoPlurianualOrcamentoVm>;
    obterAnexoComBase64(anexoId: number): Observable<ProjetoPlurianualAnexoVm>;
    excluirAnexo(anexoId: number): Observable<Unit>;
    incluirAnexo(command: ProjetoPlurianualAnexoCriarCommand): Observable<ProjetoPlurianualAnexoVm>;
}

@Injectable({
    providedIn: 'root'
})
export class ProjetosPlurianuaisClient implements IProjetosPlurianuaisClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorId(id: number): Observable<ProjetoPlurianualVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<ProjetoPlurianualVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualVm>(null as any);
    }

    obter(command: ProjetoPlurianualObterQuery): Observable<PaginatedListOfProjetoPlurianualVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfProjetoPlurianualVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfProjetoPlurianualVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfProjetoPlurianualVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfProjetoPlurianualVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfProjetoPlurianualVm>(null as any);
    }

    criar(command: ProjetoPlurianualCriarCommand): Observable<ProjetoPlurianualVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<ProjetoPlurianualVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualVm>(null as any);
    }

    alterar(command: ProjetoPlurianualAlterarCommand): Observable<ProjetoPlurianualVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<ProjetoPlurianualVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualVm>(null as any);
    }

    excluir(projetoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/{projetoId}";
        if (projetoId === undefined || projetoId === null)
            throw new Error("The parameter 'projetoId' must be defined.");
        url_ = url_.replace("{projetoId}", encodeURIComponent("" + projetoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterarSituacao(id: string, command: ProjetoPlurianualAlterarSituacaoCommand): Observable<ProjetoPlurianualVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/{id}/alterar-situacao";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualVm>;
        }));
    }

    protected processAlterarSituacao(response: HttpResponseBase): Observable<ProjetoPlurianualVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualVm>(null as any);
    }

    incluirOrcamento(command: ProjetoPlurianualOrcamentoCriarCommand): Observable<ProjetoPlurianualOrcamentoVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/orcamento";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualOrcamentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualOrcamentoVm>;
        }));
    }

    protected processIncluirOrcamento(response: HttpResponseBase): Observable<ProjetoPlurianualOrcamentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualOrcamentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualOrcamentoVm>(null as any);
    }

    alterarOcamento(command: ProjetoPlurianualOrcamentoAlterarCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/orcamento";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarOcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarOcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processAlterarOcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    excluirOrcamento(projetoPlurianualOrcamentoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/orcamento/{projetoPlurianualOrcamentoId}";
        if (projetoPlurianualOrcamentoId === undefined || projetoPlurianualOrcamentoId === null)
            throw new Error("The parameter 'projetoPlurianualOrcamentoId' must be defined.");
        url_ = url_.replace("{projetoPlurianualOrcamentoId}", encodeURIComponent("" + projetoPlurianualOrcamentoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirOrcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirOrcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirOrcamento(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    alterarSituacaoOcamento(command: ProjetoPlurianualOrcamentoAlterarSituacaoCommand): Observable<ProjetoPlurianualOrcamentoVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/orcamento/alterar-situacao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterarSituacaoOcamento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterarSituacaoOcamento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualOrcamentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualOrcamentoVm>;
        }));
    }

    protected processAlterarSituacaoOcamento(response: HttpResponseBase): Observable<ProjetoPlurianualOrcamentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualOrcamentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualOrcamentoVm>(null as any);
    }

    obterAnexoComBase64(anexoId: number): Observable<ProjetoPlurianualAnexoVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/anexo/{anexoId}";
        if (anexoId === undefined || anexoId === null)
            throw new Error("The parameter 'anexoId' must be defined.");
        url_ = url_.replace("{anexoId}", encodeURIComponent("" + anexoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterAnexoComBase64(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterAnexoComBase64(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualAnexoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualAnexoVm>;
        }));
    }

    protected processObterAnexoComBase64(response: HttpResponseBase): Observable<ProjetoPlurianualAnexoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualAnexoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualAnexoVm>(null as any);
    }

    excluirAnexo(anexoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/anexo/{anexoId}";
        if (anexoId === undefined || anexoId === null)
            throw new Error("The parameter 'anexoId' must be defined.");
        url_ = url_.replace("{anexoId}", encodeURIComponent("" + anexoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirAnexo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirAnexo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirAnexo(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    incluirAnexo(command: ProjetoPlurianualAnexoCriarCommand): Observable<ProjetoPlurianualAnexoVm> {
        let url_ = this.baseUrl + "/api/ProjetosPlurianuais/anexo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIncluirAnexo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIncluirAnexo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjetoPlurianualAnexoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjetoPlurianualAnexoVm>;
        }));
    }

    protected processIncluirAnexo(response: HttpResponseBase): Observable<ProjetoPlurianualAnexoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjetoPlurianualAnexoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjetoPlurianualAnexoVm>(null as any);
    }
}

export interface IProjetoStakholderFuncaoClient {
    criar(request: EquipeProjetoFuncaoCriarCommand): Observable<EquipeProjetoFuncaoVm>;
    alterar(request: EquipeProjetoFuncaoAlterarCommand): Observable<EquipeProjetoFuncaoVm>;
    obter(query: EquipeProjetoFuncaoObterTodosQuery): Observable<PaginatedListOfEquipeProjetoFuncaoVm>;
    obterPorId(id: number): Observable<EquipeProjetoFuncaoVm>;
    excluir(request: EquipeProjetoFuncaoExcluirCommand): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class ProjetoStakholderFuncaoClient implements IProjetoStakholderFuncaoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    criar(request: EquipeProjetoFuncaoCriarCommand): Observable<EquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/ProjetoStakholderFuncao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoFuncaoVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<EquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoFuncaoVm>(null as any);
    }

    alterar(request: EquipeProjetoFuncaoAlterarCommand): Observable<EquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/ProjetoStakholderFuncao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoFuncaoVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<EquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoFuncaoVm>(null as any);
    }

    obter(query: EquipeProjetoFuncaoObterTodosQuery): Observable<PaginatedListOfEquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/ProjetoStakholderFuncao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfEquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfEquipeProjetoFuncaoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfEquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfEquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfEquipeProjetoFuncaoVm>(null as any);
    }

    obterPorId(id: number): Observable<EquipeProjetoFuncaoVm> {
        let url_ = this.baseUrl + "/api/ProjetoStakholderFuncao/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EquipeProjetoFuncaoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EquipeProjetoFuncaoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<EquipeProjetoFuncaoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EquipeProjetoFuncaoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EquipeProjetoFuncaoVm>(null as any);
    }

    excluir(request: EquipeProjetoFuncaoExcluirCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ProjetoStakholderFuncao/excluir";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IQuestionarioPreenchimentosClient {
    obterPorId(preenchimentoId: number): Observable<QuestionarioPreenchimentoVm>;
    obter(query: QuestionarioPreenchimentoObterQuery): Observable<PaginatedListOfQuestionarioPreenchimentoVm>;
    salvarCabecalhoPreenchimento(command: QuestionarioPreenchimentoSalvarCommand): Observable<number>;
    responderOpcao(command: QuestionarioPreenchimentoRespostaSalvarCommand): Observable<number>;
    finalizar(preenchimentoId: number): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class QuestionarioPreenchimentosClient implements IQuestionarioPreenchimentosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorId(preenchimentoId: number): Observable<QuestionarioPreenchimentoVm> {
        let url_ = this.baseUrl + "/api/QuestionarioPreenchimentos/{preenchimentoId}";
        if (preenchimentoId === undefined || preenchimentoId === null)
            throw new Error("The parameter 'preenchimentoId' must be defined.");
        url_ = url_.replace("{preenchimentoId}", encodeURIComponent("" + preenchimentoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuestionarioPreenchimentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuestionarioPreenchimentoVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<QuestionarioPreenchimentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuestionarioPreenchimentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<QuestionarioPreenchimentoVm>(null as any);
    }

    obter(query: QuestionarioPreenchimentoObterQuery): Observable<PaginatedListOfQuestionarioPreenchimentoVm> {
        let url_ = this.baseUrl + "/api/QuestionarioPreenchimentos/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfQuestionarioPreenchimentoVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfQuestionarioPreenchimentoVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfQuestionarioPreenchimentoVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfQuestionarioPreenchimentoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfQuestionarioPreenchimentoVm>(null as any);
    }

    salvarCabecalhoPreenchimento(command: QuestionarioPreenchimentoSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/QuestionarioPreenchimentos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarCabecalhoPreenchimento(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarCabecalhoPreenchimento(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvarCabecalhoPreenchimento(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    responderOpcao(command: QuestionarioPreenchimentoRespostaSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/QuestionarioPreenchimentos/resposta";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResponderOpcao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResponderOpcao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processResponderOpcao(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    finalizar(preenchimentoId: number): Observable<number> {
        let url_ = this.baseUrl + "/api/QuestionarioPreenchimentos/{preenchimentoId}/finalizar";
        if (preenchimentoId === undefined || preenchimentoId === null)
            throw new Error("The parameter 'preenchimentoId' must be defined.");
        url_ = url_.replace("{preenchimentoId}", encodeURIComponent("" + preenchimentoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFinalizar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFinalizar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processFinalizar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }
}

export interface IQuestionariosClient {
    salvarQuestionarioModelo(command: QuestionarioModeloSalvarCommand): Observable<number>;
    obterModelo(request: QuestionariosModeloObterQuery): Observable<PaginatedListOfQuestionarioModeloVm>;
    obterModeloPorId(id: number): Observable<QuestionarioModeloVm>;
    excluirQuestionarioModelo(id: number): Observable<Unit>;
    obter(request: QuestionariosObterQuery): Observable<PaginatedListOfQuestionarioVm>;
    obterPorId(id: number): Observable<QuestionarioVm>;
    excluirQuestionario(id: number): Observable<Unit>;
    salvarQuestionario(command: QuestionarioSalvarCommand): Observable<number>;
    obterTiposRespostas(): Observable<SelectItemEnum[]>;
    salvarGrupoPergunta(id: number, command: QuestionarioGrupoPerguntaSalvarCommand): Observable<number>;
    salvarPergunta(id: number, command: QuestionarioPerguntaSalvarCommand): Observable<number>;
    excluirPergunta(id: number, perguntaId: number): Observable<Unit>;
    salvarOrdemPerguntas(id: number, command: QuestionarioPerguntaSalvarOrdemCommand): Observable<Unit>;
    salvarOpcao(id: number, command: QuestionarioPerguntaOpcaoSalvarCommand): Observable<number>;
    excluirOpcao(id: number, opcaoId: number): Observable<Unit>;
    salvarOrdemOpcoes(id: number, command: QuestionarioPerguntaOpcaoSalvarOrdemCommand): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class QuestionariosClient implements IQuestionariosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    salvarQuestionarioModelo(command: QuestionarioModeloSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Questionarios/salvar-questionario-modelo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarQuestionarioModelo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarQuestionarioModelo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvarQuestionarioModelo(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    obterModelo(request: QuestionariosModeloObterQuery): Observable<PaginatedListOfQuestionarioModeloVm> {
        let url_ = this.baseUrl + "/api/Questionarios/obter-modelo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterModelo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterModelo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfQuestionarioModeloVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfQuestionarioModeloVm>;
        }));
    }

    protected processObterModelo(response: HttpResponseBase): Observable<PaginatedListOfQuestionarioModeloVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfQuestionarioModeloVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfQuestionarioModeloVm>(null as any);
    }

    obterModeloPorId(id: number): Observable<QuestionarioModeloVm> {
        let url_ = this.baseUrl + "/api/Questionarios/modelo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterModeloPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterModeloPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuestionarioModeloVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuestionarioModeloVm>;
        }));
    }

    protected processObterModeloPorId(response: HttpResponseBase): Observable<QuestionarioModeloVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuestionarioModeloVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<QuestionarioModeloVm>(null as any);
    }

    excluirQuestionarioModelo(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Questionarios/modelo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirQuestionarioModelo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirQuestionarioModelo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirQuestionarioModelo(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    obter(request: QuestionariosObterQuery): Observable<PaginatedListOfQuestionarioVm> {
        let url_ = this.baseUrl + "/api/Questionarios/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfQuestionarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfQuestionarioVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfQuestionarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfQuestionarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfQuestionarioVm>(null as any);
    }

    obterPorId(id: number): Observable<QuestionarioVm> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuestionarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuestionarioVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<QuestionarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuestionarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<QuestionarioVm>(null as any);
    }

    excluirQuestionario(id: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirQuestionario(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirQuestionario(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirQuestionario(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    salvarQuestionario(command: QuestionarioSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Questionarios/salvar-questionario";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarQuestionario(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarQuestionario(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvarQuestionario(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    obterTiposRespostas(): Observable<SelectItemEnum[]> {
        let url_ = this.baseUrl + "/api/Questionarios/tipos-resposta";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterTiposRespostas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterTiposRespostas(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectItemEnum[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectItemEnum[]>;
        }));
    }

    protected processObterTiposRespostas(response: HttpResponseBase): Observable<SelectItemEnum[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectItemEnum.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectItemEnum[]>(null as any);
    }

    salvarGrupoPergunta(id: number, command: QuestionarioGrupoPerguntaSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/grupo-pergunta";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarGrupoPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarGrupoPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvarGrupoPergunta(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    salvarPergunta(id: number, command: QuestionarioPerguntaSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/pergunta";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvarPergunta(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    excluirPergunta(id: number, perguntaId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/pergunta/{perguntaId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (perguntaId === undefined || perguntaId === null)
            throw new Error("The parameter 'perguntaId' must be defined.");
        url_ = url_.replace("{perguntaId}", encodeURIComponent("" + perguntaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirPergunta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirPergunta(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirPergunta(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    salvarOrdemPerguntas(id: number, command: QuestionarioPerguntaSalvarOrdemCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/perguntas-ordem";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarOrdemPerguntas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarOrdemPerguntas(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processSalvarOrdemPerguntas(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    salvarOpcao(id: number, command: QuestionarioPerguntaOpcaoSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/opcao";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarOpcao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarOpcao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvarOpcao(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    excluirOpcao(id: number, opcaoId: number): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/opcao/{opcaoId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (opcaoId === undefined || opcaoId === null)
            throw new Error("The parameter 'opcaoId' must be defined.");
        url_ = url_.replace("{opcaoId}", encodeURIComponent("" + opcaoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluirOpcao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluirOpcao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processExcluirOpcao(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }

    salvarOrdemOpcoes(id: number, command: QuestionarioPerguntaOpcaoSalvarOrdemCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Questionarios/{id}/opcoes-ordem";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvarOrdemOpcoes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvarOrdemOpcoes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processSalvarOrdemOpcoes(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export interface IStakeholdersClient {
    obter(): Observable<StakeholderVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class StakeholdersClient implements IStakeholdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obter(): Observable<StakeholderVm[]> {
        let url_ = this.baseUrl + "/api/Stakeholders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StakeholderVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StakeholderVm[]>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<StakeholderVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StakeholderVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StakeholderVm[]>(null as any);
    }
}

export interface IUsuariosClient {
    obterPorId(id: number): Observable<UsuarioVm>;
    obter(query: UsuarioObterQuery): Observable<PaginatedListOfUsuarioVm>;
    criar(command: UsuarioCriarCommand): Observable<UsuarioVm>;
    alterar(command: UsuarioAlterarCommand): Observable<UsuarioVm>;
    /**
     * Vincular/Desvincular grupos a um usuário
     */
    vincularDesvincularGrupo(command: UsuarioVincularDesvincularGrupoCommand): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class UsuariosClient implements IUsuariosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    obterPorId(id: number): Observable<UsuarioVm> {
        let url_ = this.baseUrl + "/api/Usuarios/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioVm>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<UsuarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsuarioVm>(null as any);
    }

    obter(query: UsuarioObterQuery): Observable<PaginatedListOfUsuarioVm> {
        let url_ = this.baseUrl + "/api/Usuarios/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfUsuarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfUsuarioVm>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfUsuarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfUsuarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfUsuarioVm>(null as any);
    }

    criar(command: UsuarioCriarCommand): Observable<UsuarioVm> {
        let url_ = this.baseUrl + "/api/Usuarios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioVm>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<UsuarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsuarioVm>(null as any);
    }

    alterar(command: UsuarioAlterarCommand): Observable<UsuarioVm> {
        let url_ = this.baseUrl + "/api/Usuarios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioVm>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<UsuarioVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsuarioVm>(null as any);
    }

    /**
     * Vincular/Desvincular grupos a um usuário
     */
    vincularDesvincularGrupo(command: UsuarioVincularDesvincularGrupoCommand): Observable<Unit> {
        let url_ = this.baseUrl + "/api/Usuarios/grupo-usuario";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVincularDesvincularGrupo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVincularDesvincularGrupo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unit>;
        }));
    }

    protected processVincularDesvincularGrupo(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(null as any);
    }
}

export class UsuarioAd implements IUsuarioAd {
    login?: string | undefined;
    nome?: string | undefined;
    cargo?: string | undefined;
    email?: string | undefined;
    departamento?: string | undefined;

    constructor(data?: IUsuarioAd) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.cargo = _data["cargo"];
            this.email = _data["email"];
            this.departamento = _data["departamento"];
        }
    }

    static fromJS(data: any): UsuarioAd {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioAd();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["cargo"] = this.cargo;
        data["email"] = this.email;
        data["departamento"] = this.departamento;
        return data;
    }
}

export interface IUsuarioAd {
    login?: string | undefined;
    nome?: string | undefined;
    cargo?: string | undefined;
    email?: string | undefined;
    departamento?: string | undefined;
}

export class AnaliseEconomicoFinanceiraVm implements IAnaliseEconomicoFinanceiraVm {
    id?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
    departamento?: DepartamentoVm | undefined;
    anexos?: AnaliseEconomicoFinanceiraAnexoVm[] | undefined;

    constructor(data?: IAnaliseEconomicoFinanceiraVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.analiseEconomicoFinanceiraAplicavel = _data["analiseEconomicoFinanceiraAplicavel"];
            this.retornoFinanceiroPositivo = _data["retornoFinanceiroPositivo"];
            this.parecer = _data["parecer"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.loginRepresentanteControladoria = _data["loginRepresentanteControladoria"];
            this.nomeRepresentanteControladoria = _data["nomeRepresentanteControladoria"];
            this.departamentoId = _data["departamentoId"];
            this.departamento = _data["departamento"] ? DepartamentoVm.fromJS(_data["departamento"]) : <any>undefined;
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(AnaliseEconomicoFinanceiraAnexoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraVm {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["analiseEconomicoFinanceiraAplicavel"] = this.analiseEconomicoFinanceiraAplicavel;
        data["retornoFinanceiroPositivo"] = this.retornoFinanceiroPositivo;
        data["parecer"] = this.parecer;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["loginRepresentanteControladoria"] = this.loginRepresentanteControladoria;
        data["nomeRepresentanteControladoria"] = this.nomeRepresentanteControladoria;
        data["departamentoId"] = this.departamentoId;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraVm {
    id?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
    departamento?: DepartamentoVm | undefined;
    anexos?: AnaliseEconomicoFinanceiraAnexoVm[] | undefined;
}

export class DepartamentoVm implements IDepartamentoVm {
    id?: number;
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    situacaoDescricao?: string | undefined;
    departamentoSuperiorVm?: DepartamentoVm | undefined;
    tipo?: TipoDepartamento | undefined;

    constructor(data?: IDepartamentoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.sigla = _data["sigla"];
            this.loginGestor = _data["loginGestor"];
            this.nomeGestor = _data["nomeGestor"];
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.departamentoSuperiorVm = _data["departamentoSuperiorVm"] ? DepartamentoVm.fromJS(_data["departamentoSuperiorVm"]) : <any>undefined;
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): DepartamentoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["sigla"] = this.sigla;
        data["loginGestor"] = this.loginGestor;
        data["nomeGestor"] = this.nomeGestor;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["departamentoSuperiorVm"] = this.departamentoSuperiorVm ? this.departamentoSuperiorVm.toJSON() : <any>undefined;
        data["tipo"] = this.tipo;
        return data;
    }
}

export interface IDepartamentoVm {
    id?: number;
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    situacaoDescricao?: string | undefined;
    departamentoSuperiorVm?: DepartamentoVm | undefined;
    tipo?: TipoDepartamento | undefined;
}

export enum SituacaoDepartamento {
    Ativo = 0,
    Inativo = 1,
}

export enum TipoDepartamento {
    Coordenacao = 0,
    Gerencia = 1,
    Diretoria = 2,
    Superintendencia = 3,
}

export class AnaliseEconomicoFinanceiraAnexoVm implements IAnaliseEconomicoFinanceiraAnexoVm {
    id?: number;
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;

    constructor(data?: IAnaliseEconomicoFinanceiraAnexoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nomeArquivo = _data["nomeArquivo"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraAnexoVm {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraAnexoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nomeArquivo"] = this.nomeArquivo;
        data["tipoArquivo"] = this.tipoArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraAnexoVm {
    id?: number;
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
}

export class AnaliseEconomicoFinanceiraCriarCommand implements IAnaliseEconomicoFinanceiraCriarCommand {
    projetoId?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
    anexos?: AnaliseEconomicoFinanceiraAnexoDto[] | undefined;

    constructor(data?: IAnaliseEconomicoFinanceiraCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.analiseEconomicoFinanceiraAplicavel = _data["analiseEconomicoFinanceiraAplicavel"];
            this.retornoFinanceiroPositivo = _data["retornoFinanceiroPositivo"];
            this.parecer = _data["parecer"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.loginRepresentanteControladoria = _data["loginRepresentanteControladoria"];
            this.nomeRepresentanteControladoria = _data["nomeRepresentanteControladoria"];
            this.departamentoId = _data["departamentoId"];
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(AnaliseEconomicoFinanceiraAnexoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["analiseEconomicoFinanceiraAplicavel"] = this.analiseEconomicoFinanceiraAplicavel;
        data["retornoFinanceiroPositivo"] = this.retornoFinanceiroPositivo;
        data["parecer"] = this.parecer;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["loginRepresentanteControladoria"] = this.loginRepresentanteControladoria;
        data["nomeRepresentanteControladoria"] = this.nomeRepresentanteControladoria;
        data["departamentoId"] = this.departamentoId;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraCriarCommand {
    projetoId?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
    anexos?: AnaliseEconomicoFinanceiraAnexoDto[] | undefined;
}

export class AnaliseEconomicoFinanceiraAnexoDto implements IAnaliseEconomicoFinanceiraAnexoDto {
    nomeArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
    analiseEconomicoFinanceiraId?: number | undefined;

    constructor(data?: IAnaliseEconomicoFinanceiraAnexoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomeArquivo = _data["nomeArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
            this.analiseEconomicoFinanceiraId = _data["analiseEconomicoFinanceiraId"];
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraAnexoDto {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraAnexoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeArquivo"] = this.nomeArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        data["analiseEconomicoFinanceiraId"] = this.analiseEconomicoFinanceiraId;
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraAnexoDto {
    nomeArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
    analiseEconomicoFinanceiraId?: number | undefined;
}

export class AnaliseEconomicoFinanceiraAlterarCommand implements IAnaliseEconomicoFinanceiraAlterarCommand {
    id?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;

    constructor(data?: IAnaliseEconomicoFinanceiraAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.analiseEconomicoFinanceiraAplicavel = _data["analiseEconomicoFinanceiraAplicavel"];
            this.retornoFinanceiroPositivo = _data["retornoFinanceiroPositivo"];
            this.parecer = _data["parecer"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.loginRepresentanteControladoria = _data["loginRepresentanteControladoria"];
            this.nomeRepresentanteControladoria = _data["nomeRepresentanteControladoria"];
            this.departamentoId = _data["departamentoId"];
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["analiseEconomicoFinanceiraAplicavel"] = this.analiseEconomicoFinanceiraAplicavel;
        data["retornoFinanceiroPositivo"] = this.retornoFinanceiroPositivo;
        data["parecer"] = this.parecer;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["loginRepresentanteControladoria"] = this.loginRepresentanteControladoria;
        data["nomeRepresentanteControladoria"] = this.nomeRepresentanteControladoria;
        data["departamentoId"] = this.departamentoId;
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraAlterarCommand {
    id?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
}

export class AnaliseEconomicoFinanceiraAnexoCriarCommand implements IAnaliseEconomicoFinanceiraAnexoCriarCommand {
    anexos?: AnaliseEconomicoFinanceiraAnexoDto[] | undefined;

    constructor(data?: IAnaliseEconomicoFinanceiraAnexoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(AnaliseEconomicoFinanceiraAnexoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraAnexoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraAnexoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraAnexoCriarCommand {
    anexos?: AnaliseEconomicoFinanceiraAnexoDto[] | undefined;
}

/** Represents a void type, since Void is not a valid return type in C#. */
export class Unit implements IUnit {

    constructor(data?: IUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Unit {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Represents a void type, since Void is not a valid return type in C#. */
export interface IUnit {
}

export class LoginModelOutput implements ILoginModelOutput {
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    prazoMaximoAssumirAtendimento?: number;

    constructor(data?: ILoginModelOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
            this.prazoMaximoAssumirAtendimento = _data["prazoMaximoAssumirAtendimento"];
        }
    }

    static fromJS(data: any): LoginModelOutput {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModelOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        data["prazoMaximoAssumirAtendimento"] = this.prazoMaximoAssumirAtendimento;
        return data;
    }
}

export interface ILoginModelOutput {
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    prazoMaximoAssumirAtendimento?: number;
}

export class LoginModel implements ILoginModel {
    login?: string | undefined;
    senha?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.senha = _data["senha"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["senha"] = this.senha;
        return data;
    }
}

export interface ILoginModel {
    login?: string | undefined;
    senha?: string | undefined;
}

export class ValidateTokenModel implements IValidateTokenModel {
    token?: string | undefined;

    constructor(data?: IValidateTokenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ValidateTokenModel {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateTokenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IValidateTokenModel {
    token?: string | undefined;
}

export class CentroCustoVm implements ICentroCustoVm {
    id?: number;
    departamentoSolicianteId?: number;
    departamentoSolicitanteNome?: string | undefined;
    origemRecursos?: OrigemRecursos;
    origemRecursosDescricao?: string | undefined;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number;
    mudancaOrganizacionalCoordenacaoId?: number;
    mudancaOrganizacionalSuperintendenciaId?: number;
    mudancaOrganizacionalDiretoriaId?: number;
    situacaoCopec?: SituacaoSolicitacaoCentroCusto;
    situacaoCopecDescricao?: string | undefined;
    loginGestorCopec?: string | undefined;
    dataRespostaCopec?: Date | undefined;
    situacaoCocup?: SituacaoSolicitacaoCentroCusto | undefined;
    situacaoCocupDescricao?: string | undefined;
    loginGestorCocup?: string | undefined;
    dataRespostaCocup?: Date | undefined;
    centroCustoRespostas?: CentroCustoRespostaVm[] | undefined;
    situacao?: SituacaoCentroCusto;
    situacaoDescricao?: string | undefined;

    constructor(data?: ICentroCustoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departamentoSolicianteId = _data["departamentoSolicianteId"];
            this.departamentoSolicitanteNome = _data["departamentoSolicitanteNome"];
            this.origemRecursos = _data["origemRecursos"];
            this.origemRecursosDescricao = _data["origemRecursosDescricao"];
            this.loginGestorSolicitante = _data["loginGestorSolicitante"];
            this.nomeGestorSolicitante = _data["nomeGestorSolicitante"];
            this.nomeSolicitacaoCentroCusto = _data["nomeSolicitacaoCentroCusto"];
            this.siglaSolicitacaoCentroCusto = _data["siglaSolicitacaoCentroCusto"];
            this.motivoSolicitacao = _data["motivoSolicitacao"];
            this.mudancaOrganizacional = _data["mudancaOrganizacional"];
            this.mudancaOrganizacionalGerenciaId = _data["mudancaOrganizacionalGerenciaId"];
            this.mudancaOrganizacionalCoordenacaoId = _data["mudancaOrganizacionalCoordenacaoId"];
            this.mudancaOrganizacionalSuperintendenciaId = _data["mudancaOrganizacionalSuperintendenciaId"];
            this.mudancaOrganizacionalDiretoriaId = _data["mudancaOrganizacionalDiretoriaId"];
            this.situacaoCopec = _data["situacaoCopec"];
            this.situacaoCopecDescricao = _data["situacaoCopecDescricao"];
            this.loginGestorCopec = _data["loginGestorCopec"];
            this.dataRespostaCopec = _data["dataRespostaCopec"] ? new Date(_data["dataRespostaCopec"].toString()) : <any>undefined;
            this.situacaoCocup = _data["situacaoCocup"];
            this.situacaoCocupDescricao = _data["situacaoCocupDescricao"];
            this.loginGestorCocup = _data["loginGestorCocup"];
            this.dataRespostaCocup = _data["dataRespostaCocup"] ? new Date(_data["dataRespostaCocup"].toString()) : <any>undefined;
            if (Array.isArray(_data["centroCustoRespostas"])) {
                this.centroCustoRespostas = [] as any;
                for (let item of _data["centroCustoRespostas"])
                    this.centroCustoRespostas!.push(CentroCustoRespostaVm.fromJS(item));
            }
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
        }
    }

    static fromJS(data: any): CentroCustoVm {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoSolicianteId"] = this.departamentoSolicianteId;
        data["departamentoSolicitanteNome"] = this.departamentoSolicitanteNome;
        data["origemRecursos"] = this.origemRecursos;
        data["origemRecursosDescricao"] = this.origemRecursosDescricao;
        data["loginGestorSolicitante"] = this.loginGestorSolicitante;
        data["nomeGestorSolicitante"] = this.nomeGestorSolicitante;
        data["nomeSolicitacaoCentroCusto"] = this.nomeSolicitacaoCentroCusto;
        data["siglaSolicitacaoCentroCusto"] = this.siglaSolicitacaoCentroCusto;
        data["motivoSolicitacao"] = this.motivoSolicitacao;
        data["mudancaOrganizacional"] = this.mudancaOrganizacional;
        data["mudancaOrganizacionalGerenciaId"] = this.mudancaOrganizacionalGerenciaId;
        data["mudancaOrganizacionalCoordenacaoId"] = this.mudancaOrganizacionalCoordenacaoId;
        data["mudancaOrganizacionalSuperintendenciaId"] = this.mudancaOrganizacionalSuperintendenciaId;
        data["mudancaOrganizacionalDiretoriaId"] = this.mudancaOrganizacionalDiretoriaId;
        data["situacaoCopec"] = this.situacaoCopec;
        data["situacaoCopecDescricao"] = this.situacaoCopecDescricao;
        data["loginGestorCopec"] = this.loginGestorCopec;
        data["dataRespostaCopec"] = this.dataRespostaCopec ? this.dataRespostaCopec.toISOString() : <any>undefined;
        data["situacaoCocup"] = this.situacaoCocup;
        data["situacaoCocupDescricao"] = this.situacaoCocupDescricao;
        data["loginGestorCocup"] = this.loginGestorCocup;
        data["dataRespostaCocup"] = this.dataRespostaCocup ? this.dataRespostaCocup.toISOString() : <any>undefined;
        if (Array.isArray(this.centroCustoRespostas)) {
            data["centroCustoRespostas"] = [];
            for (let item of this.centroCustoRespostas)
                data["centroCustoRespostas"].push(item.toJSON());
        }
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        return data;
    }
}

export interface ICentroCustoVm {
    id?: number;
    departamentoSolicianteId?: number;
    departamentoSolicitanteNome?: string | undefined;
    origemRecursos?: OrigemRecursos;
    origemRecursosDescricao?: string | undefined;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number;
    mudancaOrganizacionalCoordenacaoId?: number;
    mudancaOrganizacionalSuperintendenciaId?: number;
    mudancaOrganizacionalDiretoriaId?: number;
    situacaoCopec?: SituacaoSolicitacaoCentroCusto;
    situacaoCopecDescricao?: string | undefined;
    loginGestorCopec?: string | undefined;
    dataRespostaCopec?: Date | undefined;
    situacaoCocup?: SituacaoSolicitacaoCentroCusto | undefined;
    situacaoCocupDescricao?: string | undefined;
    loginGestorCocup?: string | undefined;
    dataRespostaCocup?: Date | undefined;
    centroCustoRespostas?: CentroCustoRespostaVm[] | undefined;
    situacao?: SituacaoCentroCusto;
    situacaoDescricao?: string | undefined;
}

export enum OrigemRecursos {
    Sede = 0,
    RecursoProprio = 1,
}

export enum SituacaoSolicitacaoCentroCusto {
    AguardandoAprovacao = 0,
    Aprovado = 1,
    Reprovado = 2,
}

export class CentroCustoRespostaVm implements ICentroCustoRespostaVm {
    id?: number;
    nome?: string | undefined;
    nomeReduzido?: string | undefined;
    descricao?: string | undefined;
    centroCustoId?: number;

    constructor(data?: ICentroCustoRespostaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.nomeReduzido = _data["nomeReduzido"];
            this.descricao = _data["descricao"];
            this.centroCustoId = _data["centroCustoId"];
        }
    }

    static fromJS(data: any): CentroCustoRespostaVm {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoRespostaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["nomeReduzido"] = this.nomeReduzido;
        data["descricao"] = this.descricao;
        data["centroCustoId"] = this.centroCustoId;
        return data;
    }
}

export interface ICentroCustoRespostaVm {
    id?: number;
    nome?: string | undefined;
    nomeReduzido?: string | undefined;
    descricao?: string | undefined;
    centroCustoId?: number;
}

export enum SituacaoCentroCusto {
    EmElaboracao = 0,
    AguardandoCriacao = 1,
    CentroCustoCriado = 2,
}

export class CentroCustoCriarCommand implements ICentroCustoCriarCommand {
    departamentoSolicianteId?: number;
    origemRecursos?: OrigemRecursos;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number | undefined;
    mudancaOrganizacionalCoordenacaoId?: number | undefined;
    mudancaOrganizacionalSuperintendenciaId?: number | undefined;
    mudancaOrganizacionalDiretoriaId?: number | undefined;
    projetoId?: number;
    enviarSolicitacao?: boolean | undefined;

    constructor(data?: ICentroCustoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.departamentoSolicianteId = _data["departamentoSolicianteId"];
            this.origemRecursos = _data["origemRecursos"];
            this.loginGestorSolicitante = _data["loginGestorSolicitante"];
            this.nomeGestorSolicitante = _data["nomeGestorSolicitante"];
            this.nomeSolicitacaoCentroCusto = _data["nomeSolicitacaoCentroCusto"];
            this.siglaSolicitacaoCentroCusto = _data["siglaSolicitacaoCentroCusto"];
            this.motivoSolicitacao = _data["motivoSolicitacao"];
            this.mudancaOrganizacional = _data["mudancaOrganizacional"];
            this.mudancaOrganizacionalGerenciaId = _data["mudancaOrganizacionalGerenciaId"];
            this.mudancaOrganizacionalCoordenacaoId = _data["mudancaOrganizacionalCoordenacaoId"];
            this.mudancaOrganizacionalSuperintendenciaId = _data["mudancaOrganizacionalSuperintendenciaId"];
            this.mudancaOrganizacionalDiretoriaId = _data["mudancaOrganizacionalDiretoriaId"];
            this.projetoId = _data["projetoId"];
            this.enviarSolicitacao = _data["enviarSolicitacao"];
        }
    }

    static fromJS(data: any): CentroCustoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departamentoSolicianteId"] = this.departamentoSolicianteId;
        data["origemRecursos"] = this.origemRecursos;
        data["loginGestorSolicitante"] = this.loginGestorSolicitante;
        data["nomeGestorSolicitante"] = this.nomeGestorSolicitante;
        data["nomeSolicitacaoCentroCusto"] = this.nomeSolicitacaoCentroCusto;
        data["siglaSolicitacaoCentroCusto"] = this.siglaSolicitacaoCentroCusto;
        data["motivoSolicitacao"] = this.motivoSolicitacao;
        data["mudancaOrganizacional"] = this.mudancaOrganizacional;
        data["mudancaOrganizacionalGerenciaId"] = this.mudancaOrganizacionalGerenciaId;
        data["mudancaOrganizacionalCoordenacaoId"] = this.mudancaOrganizacionalCoordenacaoId;
        data["mudancaOrganizacionalSuperintendenciaId"] = this.mudancaOrganizacionalSuperintendenciaId;
        data["mudancaOrganizacionalDiretoriaId"] = this.mudancaOrganizacionalDiretoriaId;
        data["projetoId"] = this.projetoId;
        data["enviarSolicitacao"] = this.enviarSolicitacao;
        return data;
    }
}

export interface ICentroCustoCriarCommand {
    departamentoSolicianteId?: number;
    origemRecursos?: OrigemRecursos;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number | undefined;
    mudancaOrganizacionalCoordenacaoId?: number | undefined;
    mudancaOrganizacionalSuperintendenciaId?: number | undefined;
    mudancaOrganizacionalDiretoriaId?: number | undefined;
    projetoId?: number;
    enviarSolicitacao?: boolean | undefined;
}

export class CentroCustoAlterarCommand implements ICentroCustoAlterarCommand {
    id?: number;
    departamentoSolicianteId?: number;
    origemRecursos?: OrigemRecursos;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number | undefined;
    mudancaOrganizacionalCoordenacaoId?: number | undefined;
    mudancaOrganizacionalSuperintendenciaId?: number | undefined;
    mudancaOrganizacionalDiretoriaId?: number | undefined;
    enviarSolicitacao?: boolean | undefined;

    constructor(data?: ICentroCustoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departamentoSolicianteId = _data["departamentoSolicianteId"];
            this.origemRecursos = _data["origemRecursos"];
            this.loginGestorSolicitante = _data["loginGestorSolicitante"];
            this.nomeGestorSolicitante = _data["nomeGestorSolicitante"];
            this.nomeSolicitacaoCentroCusto = _data["nomeSolicitacaoCentroCusto"];
            this.siglaSolicitacaoCentroCusto = _data["siglaSolicitacaoCentroCusto"];
            this.motivoSolicitacao = _data["motivoSolicitacao"];
            this.mudancaOrganizacional = _data["mudancaOrganizacional"];
            this.mudancaOrganizacionalGerenciaId = _data["mudancaOrganizacionalGerenciaId"];
            this.mudancaOrganizacionalCoordenacaoId = _data["mudancaOrganizacionalCoordenacaoId"];
            this.mudancaOrganizacionalSuperintendenciaId = _data["mudancaOrganizacionalSuperintendenciaId"];
            this.mudancaOrganizacionalDiretoriaId = _data["mudancaOrganizacionalDiretoriaId"];
            this.enviarSolicitacao = _data["enviarSolicitacao"];
        }
    }

    static fromJS(data: any): CentroCustoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoSolicianteId"] = this.departamentoSolicianteId;
        data["origemRecursos"] = this.origemRecursos;
        data["loginGestorSolicitante"] = this.loginGestorSolicitante;
        data["nomeGestorSolicitante"] = this.nomeGestorSolicitante;
        data["nomeSolicitacaoCentroCusto"] = this.nomeSolicitacaoCentroCusto;
        data["siglaSolicitacaoCentroCusto"] = this.siglaSolicitacaoCentroCusto;
        data["motivoSolicitacao"] = this.motivoSolicitacao;
        data["mudancaOrganizacional"] = this.mudancaOrganizacional;
        data["mudancaOrganizacionalGerenciaId"] = this.mudancaOrganizacionalGerenciaId;
        data["mudancaOrganizacionalCoordenacaoId"] = this.mudancaOrganizacionalCoordenacaoId;
        data["mudancaOrganizacionalSuperintendenciaId"] = this.mudancaOrganizacionalSuperintendenciaId;
        data["mudancaOrganizacionalDiretoriaId"] = this.mudancaOrganizacionalDiretoriaId;
        data["enviarSolicitacao"] = this.enviarSolicitacao;
        return data;
    }
}

export interface ICentroCustoAlterarCommand {
    id?: number;
    departamentoSolicianteId?: number;
    origemRecursos?: OrigemRecursos;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number | undefined;
    mudancaOrganizacionalCoordenacaoId?: number | undefined;
    mudancaOrganizacionalSuperintendenciaId?: number | undefined;
    mudancaOrganizacionalDiretoriaId?: number | undefined;
    enviarSolicitacao?: boolean | undefined;
}

export class CentroCustoAlterarSituacaoCommand implements ICentroCustoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoCentroCusto;

    constructor(data?: ICentroCustoAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): CentroCustoAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface ICentroCustoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoCentroCusto;
}

export class CentroCustoResponderCommand implements ICentroCustoResponderCommand {
    id?: number;
    situacaoCopec?: SituacaoSolicitacaoCentroCusto | undefined;
    situacaoCocup?: SituacaoSolicitacaoCentroCusto | undefined;
    responderSolicitacao?: boolean | undefined;

    constructor(data?: ICentroCustoResponderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.situacaoCopec = _data["situacaoCopec"];
            this.situacaoCocup = _data["situacaoCocup"];
            this.responderSolicitacao = _data["responderSolicitacao"];
        }
    }

    static fromJS(data: any): CentroCustoResponderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoResponderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["situacaoCopec"] = this.situacaoCopec;
        data["situacaoCocup"] = this.situacaoCocup;
        data["responderSolicitacao"] = this.responderSolicitacao;
        return data;
    }
}

export interface ICentroCustoResponderCommand {
    id?: number;
    situacaoCopec?: SituacaoSolicitacaoCentroCusto | undefined;
    situacaoCocup?: SituacaoSolicitacaoCentroCusto | undefined;
    responderSolicitacao?: boolean | undefined;
}

export class PaginatedListOfCentroCustoVm implements IPaginatedListOfCentroCustoVm {
    items?: CentroCustoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfCentroCustoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CentroCustoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfCentroCustoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfCentroCustoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfCentroCustoVm {
    items?: CentroCustoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class QueryRequestBase implements IQueryRequestBase {
    pageSize?: number;
    pageIndex?: number;

    constructor(data?: IQueryRequestBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["pageSize"];
            this.pageIndex = _data["pageIndex"];
        }
    }

    static fromJS(data: any): QueryRequestBase {
        data = typeof data === 'object' ? data : {};
        let result = new QueryRequestBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize;
        data["pageIndex"] = this.pageIndex;
        return data;
    }
}

export interface IQueryRequestBase {
    pageSize?: number;
    pageIndex?: number;
}

export class CentroCustoObterTodosQuery extends QueryRequestBase implements ICentroCustoObterTodosQuery {

    constructor(data?: ICentroCustoObterTodosQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CentroCustoObterTodosQuery {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoObterTodosQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface ICentroCustoObterTodosQuery extends IQueryRequestBase {
}

export class CentroCustoExcluirCommand implements ICentroCustoExcluirCommand {
    id?: number;

    constructor(data?: ICentroCustoExcluirCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CentroCustoExcluirCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoExcluirCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICentroCustoExcluirCommand {
    id?: number;
}

export class CentroCustoIncluirRespostaCommand implements ICentroCustoIncluirRespostaCommand {
    nome?: string | undefined;
    nomeReduzido?: string | undefined;
    descricao?: string | undefined;
    centroCustoId?: number;

    constructor(data?: ICentroCustoIncluirRespostaCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.nomeReduzido = _data["nomeReduzido"];
            this.descricao = _data["descricao"];
            this.centroCustoId = _data["centroCustoId"];
        }
    }

    static fromJS(data: any): CentroCustoIncluirRespostaCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoIncluirRespostaCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["nomeReduzido"] = this.nomeReduzido;
        data["descricao"] = this.descricao;
        data["centroCustoId"] = this.centroCustoId;
        return data;
    }
}

export interface ICentroCustoIncluirRespostaCommand {
    nome?: string | undefined;
    nomeReduzido?: string | undefined;
    descricao?: string | undefined;
    centroCustoId?: number;
}

export abstract class AuditableEntity implements IAuditableEntity {
    dataCriacao?: Date;
    usuarioCriacaoId?: string | undefined;
    dataAlteracao?: Date | undefined;
    usuarioAlteracaoId?: string | undefined;
    dataExclusao?: Date | undefined;

    constructor(data?: IAuditableEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
            this.usuarioCriacaoId = _data["usuarioCriacaoId"];
            this.dataAlteracao = _data["dataAlteracao"] ? new Date(_data["dataAlteracao"].toString()) : <any>undefined;
            this.usuarioAlteracaoId = _data["usuarioAlteracaoId"];
            this.dataExclusao = _data["dataExclusao"] ? new Date(_data["dataExclusao"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditableEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        data["usuarioCriacaoId"] = this.usuarioCriacaoId;
        data["dataAlteracao"] = this.dataAlteracao ? this.dataAlteracao.toISOString() : <any>undefined;
        data["usuarioAlteracaoId"] = this.usuarioAlteracaoId;
        data["dataExclusao"] = this.dataExclusao ? this.dataExclusao.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAuditableEntity {
    dataCriacao?: Date;
    usuarioCriacaoId?: string | undefined;
    dataAlteracao?: Date | undefined;
    usuarioAlteracaoId?: string | undefined;
    dataExclusao?: Date | undefined;
}

export class Cesta extends AuditableEntity implements ICesta {
    id?: number;
    descricao?: string | undefined;
    preProjetos?: PreProjeto[] | undefined;
    projetosPlurianuais?: ProjetoPlurianual[] | undefined;

    constructor(data?: ICesta) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            if (Array.isArray(_data["preProjetos"])) {
                this.preProjetos = [] as any;
                for (let item of _data["preProjetos"])
                    this.preProjetos!.push(PreProjeto.fromJS(item));
            }
            if (Array.isArray(_data["projetosPlurianuais"])) {
                this.projetosPlurianuais = [] as any;
                for (let item of _data["projetosPlurianuais"])
                    this.projetosPlurianuais!.push(ProjetoPlurianual.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Cesta {
        data = typeof data === 'object' ? data : {};
        let result = new Cesta();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        if (Array.isArray(this.preProjetos)) {
            data["preProjetos"] = [];
            for (let item of this.preProjetos)
                data["preProjetos"].push(item.toJSON());
        }
        if (Array.isArray(this.projetosPlurianuais)) {
            data["projetosPlurianuais"] = [];
            for (let item of this.projetosPlurianuais)
                data["projetosPlurianuais"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICesta extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    preProjetos?: PreProjeto[] | undefined;
    projetosPlurianuais?: ProjetoPlurianual[] | undefined;
}

export class PreProjeto extends AuditableEntity implements IPreProjeto {
    id?: number;
    nome?: string | undefined;
    tipo?: TipoPreProjeto;
    situacao?: SituacaoPreProjeto;
    origem?: OrigemPreProjeto;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    codigoCentroCusto?: string | undefined;
    ideia?: string | undefined;
    atendeRequisitoLegal?: boolean;
    descricaoAtendeRequisitoLegal?: string | undefined;
    parecerDepartamentoJuridico?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoJuridico?: string | undefined;
    parecerDepartamentoRiscos?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoRiscos?: string | undefined;
    possuiAlinhamentoObjetivosEstrategicos?: boolean | undefined;
    descricaoPossuiAlinhamentoObjetivosEstrategicos?: string | undefined;
    possuiVinculoEstrategiaOperacao?: boolean | undefined;
    descricaoPossuiVinculoEstrategiaOperacao?: string | undefined;
    acrescentaProdutoServico?: boolean | undefined;
    descricaoAcrescentaProdutoServico?: string | undefined;
    zonaRisco?: ZonaRisco | undefined;
    descricaoZonaRisco?: string | undefined;
    abrangenciaResultadoRestrigeApenasPropriaArea?: boolean;
    descricaoAbrangenciaResultadoRestrigeApenasPropriaArea?: string | undefined;
    stakeholders?: Stakeholder[] | undefined;
    possuiNovasAquisicoes?: boolean;
    descricaoPossuiNovasAquisicoes?: string | undefined;
    necessarioNovosConhecimentos?: boolean;
    descricaoNecessarioNovosConhecimentos?: string | undefined;
    pontuacaoWorkshop?: number | undefined;
    departamentoId?: number | undefined;
    departamento?: Departamento | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalho[] | undefined;
    areasEnvolvidas?: PreProjetoAreasEnvolvida[] | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    orcamentos?: PreProjetoOrcamento[] | undefined;
    analiseEconomicoFinanceiraId?: number | undefined;
    analiseEconomicoFinanceira?: AnaliseEconomicoFinanceira | undefined;
    projetoSituacoes?: PreProjetoSituacao[] | undefined;
    obervacoesDeliberacao?: string | undefined;
    portifolioId?: number | undefined;
    porfifolio?: Portifolio | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number | undefined;
    cestaId?: number | undefined;
    cesta?: Cesta | undefined;
    observacao?: string | undefined;
    objetivosEstrategicos?: PreProjetoObjetivosEstrategicos[] | undefined;
    observacaoOrcamentos?: string | undefined;

    constructor(data?: IPreProjeto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.tipo = _data["tipo"];
            this.situacao = _data["situacao"];
            this.origem = _data["origem"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.loginGerenteNegocio = _data["loginGerenteNegocio"];
            this.nomeGerenteNegocio = _data["nomeGerenteNegocio"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.codigoCentroCusto = _data["codigoCentroCusto"];
            this.ideia = _data["ideia"];
            this.atendeRequisitoLegal = _data["atendeRequisitoLegal"];
            this.descricaoAtendeRequisitoLegal = _data["descricaoAtendeRequisitoLegal"];
            this.parecerDepartamentoJuridico = _data["parecerDepartamentoJuridico"];
            this.descricaoParecerDepartamentoJuridico = _data["descricaoParecerDepartamentoJuridico"];
            this.parecerDepartamentoRiscos = _data["parecerDepartamentoRiscos"];
            this.descricaoParecerDepartamentoRiscos = _data["descricaoParecerDepartamentoRiscos"];
            this.possuiAlinhamentoObjetivosEstrategicos = _data["possuiAlinhamentoObjetivosEstrategicos"];
            this.descricaoPossuiAlinhamentoObjetivosEstrategicos = _data["descricaoPossuiAlinhamentoObjetivosEstrategicos"];
            this.possuiVinculoEstrategiaOperacao = _data["possuiVinculoEstrategiaOperacao"];
            this.descricaoPossuiVinculoEstrategiaOperacao = _data["descricaoPossuiVinculoEstrategiaOperacao"];
            this.acrescentaProdutoServico = _data["acrescentaProdutoServico"];
            this.descricaoAcrescentaProdutoServico = _data["descricaoAcrescentaProdutoServico"];
            this.zonaRisco = _data["zonaRisco"];
            this.descricaoZonaRisco = _data["descricaoZonaRisco"];
            this.abrangenciaResultadoRestrigeApenasPropriaArea = _data["abrangenciaResultadoRestrigeApenasPropriaArea"];
            this.descricaoAbrangenciaResultadoRestrigeApenasPropriaArea = _data["descricaoAbrangenciaResultadoRestrigeApenasPropriaArea"];
            if (Array.isArray(_data["stakeholders"])) {
                this.stakeholders = [] as any;
                for (let item of _data["stakeholders"])
                    this.stakeholders!.push(Stakeholder.fromJS(item));
            }
            this.possuiNovasAquisicoes = _data["possuiNovasAquisicoes"];
            this.descricaoPossuiNovasAquisicoes = _data["descricaoPossuiNovasAquisicoes"];
            this.necessarioNovosConhecimentos = _data["necessarioNovosConhecimentos"];
            this.descricaoNecessarioNovosConhecimentos = _data["descricaoNecessarioNovosConhecimentos"];
            this.pontuacaoWorkshop = _data["pontuacaoWorkshop"];
            this.departamentoId = _data["departamentoId"];
            this.departamento = _data["departamento"] ? Departamento.fromJS(_data["departamento"]) : <any>undefined;
            if (Array.isArray(_data["declaracoesTrabalho"])) {
                this.declaracoesTrabalho = [] as any;
                for (let item of _data["declaracoesTrabalho"])
                    this.declaracoesTrabalho!.push(DeclaracaoTrabalho.fromJS(item));
            }
            if (Array.isArray(_data["areasEnvolvidas"])) {
                this.areasEnvolvidas = [] as any;
                for (let item of _data["areasEnvolvidas"])
                    this.areasEnvolvidas!.push(PreProjetoAreasEnvolvida.fromJS(item));
            }
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(PreProjetoOrcamento.fromJS(item));
            }
            this.analiseEconomicoFinanceiraId = _data["analiseEconomicoFinanceiraId"];
            this.analiseEconomicoFinanceira = _data["analiseEconomicoFinanceira"] ? AnaliseEconomicoFinanceira.fromJS(_data["analiseEconomicoFinanceira"]) : <any>undefined;
            if (Array.isArray(_data["projetoSituacoes"])) {
                this.projetoSituacoes = [] as any;
                for (let item of _data["projetoSituacoes"])
                    this.projetoSituacoes!.push(PreProjetoSituacao.fromJS(item));
            }
            this.obervacoesDeliberacao = _data["obervacoesDeliberacao"];
            this.portifolioId = _data["portifolioId"];
            this.porfifolio = _data["porfifolio"] ? Portifolio.fromJS(_data["porfifolio"]) : <any>undefined;
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
            this.cestaId = _data["cestaId"];
            this.cesta = _data["cesta"] ? Cesta.fromJS(_data["cesta"]) : <any>undefined;
            this.observacao = _data["observacao"];
            if (Array.isArray(_data["objetivosEstrategicos"])) {
                this.objetivosEstrategicos = [] as any;
                for (let item of _data["objetivosEstrategicos"])
                    this.objetivosEstrategicos!.push(PreProjetoObjetivosEstrategicos.fromJS(item));
            }
            this.observacaoOrcamentos = _data["observacaoOrcamentos"];
        }
    }

    static fromJS(data: any): PreProjeto {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjeto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["tipo"] = this.tipo;
        data["situacao"] = this.situacao;
        data["origem"] = this.origem;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["loginGerenteNegocio"] = this.loginGerenteNegocio;
        data["nomeGerenteNegocio"] = this.nomeGerenteNegocio;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["codigoCentroCusto"] = this.codigoCentroCusto;
        data["ideia"] = this.ideia;
        data["atendeRequisitoLegal"] = this.atendeRequisitoLegal;
        data["descricaoAtendeRequisitoLegal"] = this.descricaoAtendeRequisitoLegal;
        data["parecerDepartamentoJuridico"] = this.parecerDepartamentoJuridico;
        data["descricaoParecerDepartamentoJuridico"] = this.descricaoParecerDepartamentoJuridico;
        data["parecerDepartamentoRiscos"] = this.parecerDepartamentoRiscos;
        data["descricaoParecerDepartamentoRiscos"] = this.descricaoParecerDepartamentoRiscos;
        data["possuiAlinhamentoObjetivosEstrategicos"] = this.possuiAlinhamentoObjetivosEstrategicos;
        data["descricaoPossuiAlinhamentoObjetivosEstrategicos"] = this.descricaoPossuiAlinhamentoObjetivosEstrategicos;
        data["possuiVinculoEstrategiaOperacao"] = this.possuiVinculoEstrategiaOperacao;
        data["descricaoPossuiVinculoEstrategiaOperacao"] = this.descricaoPossuiVinculoEstrategiaOperacao;
        data["acrescentaProdutoServico"] = this.acrescentaProdutoServico;
        data["descricaoAcrescentaProdutoServico"] = this.descricaoAcrescentaProdutoServico;
        data["zonaRisco"] = this.zonaRisco;
        data["descricaoZonaRisco"] = this.descricaoZonaRisco;
        data["abrangenciaResultadoRestrigeApenasPropriaArea"] = this.abrangenciaResultadoRestrigeApenasPropriaArea;
        data["descricaoAbrangenciaResultadoRestrigeApenasPropriaArea"] = this.descricaoAbrangenciaResultadoRestrigeApenasPropriaArea;
        if (Array.isArray(this.stakeholders)) {
            data["stakeholders"] = [];
            for (let item of this.stakeholders)
                data["stakeholders"].push(item.toJSON());
        }
        data["possuiNovasAquisicoes"] = this.possuiNovasAquisicoes;
        data["descricaoPossuiNovasAquisicoes"] = this.descricaoPossuiNovasAquisicoes;
        data["necessarioNovosConhecimentos"] = this.necessarioNovosConhecimentos;
        data["descricaoNecessarioNovosConhecimentos"] = this.descricaoNecessarioNovosConhecimentos;
        data["pontuacaoWorkshop"] = this.pontuacaoWorkshop;
        data["departamentoId"] = this.departamentoId;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        if (Array.isArray(this.declaracoesTrabalho)) {
            data["declaracoesTrabalho"] = [];
            for (let item of this.declaracoesTrabalho)
                data["declaracoesTrabalho"].push(item.toJSON());
        }
        if (Array.isArray(this.areasEnvolvidas)) {
            data["areasEnvolvidas"] = [];
            for (let item of this.areasEnvolvidas)
                data["areasEnvolvidas"].push(item.toJSON());
        }
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["analiseEconomicoFinanceiraId"] = this.analiseEconomicoFinanceiraId;
        data["analiseEconomicoFinanceira"] = this.analiseEconomicoFinanceira ? this.analiseEconomicoFinanceira.toJSON() : <any>undefined;
        if (Array.isArray(this.projetoSituacoes)) {
            data["projetoSituacoes"] = [];
            for (let item of this.projetoSituacoes)
                data["projetoSituacoes"].push(item.toJSON());
        }
        data["obervacoesDeliberacao"] = this.obervacoesDeliberacao;
        data["portifolioId"] = this.portifolioId;
        data["porfifolio"] = this.porfifolio ? this.porfifolio.toJSON() : <any>undefined;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        data["cestaId"] = this.cestaId;
        data["cesta"] = this.cesta ? this.cesta.toJSON() : <any>undefined;
        data["observacao"] = this.observacao;
        if (Array.isArray(this.objetivosEstrategicos)) {
            data["objetivosEstrategicos"] = [];
            for (let item of this.objetivosEstrategicos)
                data["objetivosEstrategicos"].push(item.toJSON());
        }
        data["observacaoOrcamentos"] = this.observacaoOrcamentos;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjeto extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    tipo?: TipoPreProjeto;
    situacao?: SituacaoPreProjeto;
    origem?: OrigemPreProjeto;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    codigoCentroCusto?: string | undefined;
    ideia?: string | undefined;
    atendeRequisitoLegal?: boolean;
    descricaoAtendeRequisitoLegal?: string | undefined;
    parecerDepartamentoJuridico?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoJuridico?: string | undefined;
    parecerDepartamentoRiscos?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoRiscos?: string | undefined;
    possuiAlinhamentoObjetivosEstrategicos?: boolean | undefined;
    descricaoPossuiAlinhamentoObjetivosEstrategicos?: string | undefined;
    possuiVinculoEstrategiaOperacao?: boolean | undefined;
    descricaoPossuiVinculoEstrategiaOperacao?: string | undefined;
    acrescentaProdutoServico?: boolean | undefined;
    descricaoAcrescentaProdutoServico?: string | undefined;
    zonaRisco?: ZonaRisco | undefined;
    descricaoZonaRisco?: string | undefined;
    abrangenciaResultadoRestrigeApenasPropriaArea?: boolean;
    descricaoAbrangenciaResultadoRestrigeApenasPropriaArea?: string | undefined;
    stakeholders?: Stakeholder[] | undefined;
    possuiNovasAquisicoes?: boolean;
    descricaoPossuiNovasAquisicoes?: string | undefined;
    necessarioNovosConhecimentos?: boolean;
    descricaoNecessarioNovosConhecimentos?: string | undefined;
    pontuacaoWorkshop?: number | undefined;
    departamentoId?: number | undefined;
    departamento?: Departamento | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalho[] | undefined;
    areasEnvolvidas?: PreProjetoAreasEnvolvida[] | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    orcamentos?: PreProjetoOrcamento[] | undefined;
    analiseEconomicoFinanceiraId?: number | undefined;
    analiseEconomicoFinanceira?: AnaliseEconomicoFinanceira | undefined;
    projetoSituacoes?: PreProjetoSituacao[] | undefined;
    obervacoesDeliberacao?: string | undefined;
    portifolioId?: number | undefined;
    porfifolio?: Portifolio | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number | undefined;
    cestaId?: number | undefined;
    cesta?: Cesta | undefined;
    observacao?: string | undefined;
    objetivosEstrategicos?: PreProjetoObjetivosEstrategicos[] | undefined;
    observacaoOrcamentos?: string | undefined;
}

export enum TipoPreProjeto {
    Estrategico = 0,
    Tatico = 1,
    Operacional = 2,
}

export enum SituacaoPreProjeto {
    EmElaboracao = 0,
    ProjetoClassificado = 1,
    AguardandoLevantamentoDeCustoEPrazo = 2,
    AguardandoAnaliseViabilidadeFinanceira = 3,
    ProjetoValidado = 4,
    ProjetoReprovado = 5,
    AguardandoAprovacao = 6,
    ProjetoValidadoRessalvas = 7,
    ProjetoArquivado = 8,
}

export enum OrigemPreProjeto {
    Workshop = 1,
    DemandaEspontanea = 2,
}

export enum SituacaoParecer {
    Aprovado = 0,
    Reprovado = 1,
}

export enum ZonaRisco {
    Verde = 0,
    Amarelo = 1,
    Vermelho = 2,
    NaoEstaAssociado = 3,
}

export class Stakeholder extends AuditableEntity implements IStakeholder {
    id?: number;
    descricao?: string | undefined;
    projetos?: PreProjeto[] | undefined;

    constructor(data?: IStakeholder) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            if (Array.isArray(_data["projetos"])) {
                this.projetos = [] as any;
                for (let item of _data["projetos"])
                    this.projetos!.push(PreProjeto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Stakeholder {
        data = typeof data === 'object' ? data : {};
        let result = new Stakeholder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        if (Array.isArray(this.projetos)) {
            data["projetos"] = [];
            for (let item of this.projetos)
                data["projetos"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IStakeholder extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    projetos?: PreProjeto[] | undefined;
}

export class Departamento extends AuditableEntity implements IDepartamento {
    id?: number;
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    departamentoSuperiorId?: number | undefined;
    departamentoSuperior?: Departamento | undefined;
    tipo?: TipoDepartamento | undefined;

    constructor(data?: IDepartamento) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.sigla = _data["sigla"];
            this.loginGestor = _data["loginGestor"];
            this.nomeGestor = _data["nomeGestor"];
            this.situacao = _data["situacao"];
            this.departamentoSuperiorId = _data["departamentoSuperiorId"];
            this.departamentoSuperior = _data["departamentoSuperior"] ? Departamento.fromJS(_data["departamentoSuperior"]) : <any>undefined;
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): Departamento {
        data = typeof data === 'object' ? data : {};
        let result = new Departamento();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["sigla"] = this.sigla;
        data["loginGestor"] = this.loginGestor;
        data["nomeGestor"] = this.nomeGestor;
        data["situacao"] = this.situacao;
        data["departamentoSuperiorId"] = this.departamentoSuperiorId;
        data["departamentoSuperior"] = this.departamentoSuperior ? this.departamentoSuperior.toJSON() : <any>undefined;
        data["tipo"] = this.tipo;
        super.toJSON(data);
        return data;
    }
}

export interface IDepartamento extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    departamentoSuperiorId?: number | undefined;
    departamentoSuperior?: Departamento | undefined;
    tipo?: TipoDepartamento | undefined;
}

export class DeclaracaoTrabalho extends AuditableEntity implements IDeclaracaoTrabalho {
    id?: number;
    departamentoId?: number;
    departamento?: Departamento | undefined;
    preProjetoId?: number | undefined;
    preProjeto?: PreProjeto | undefined;
    projetoPlurianualId?: number | undefined;
    projetoPlurianual?: ProjetoPlurianual | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoCorresponsavel[] | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    anexos?: DeclaracaoTrabalhoAnexo[] | undefined;
    viavelTecnicamente?: boolean | undefined;
    parecerTecnico?: string | undefined;
    periodoExecucaoSolucao?: string | undefined;
    orcamentos?: DeclaracaoTrabalhoOrcamento[] | undefined;
    situacao?: DeclaracaoTrabalhoSituacao;
    consideracoes?: string | undefined;
    totalOrcamento?: number;
    totalDespesaAdministrativa?: number;
    totalCustoAssistencial?: number;
    totalInvestimento?: number;
    dataEntregaFornecedor?: Date | undefined;
    dataEntregaClassificacaoContabil?: Date | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    declaracaoTrabalhoSituacoes?: DTSituacao[] | undefined;

    constructor(data?: IDeclaracaoTrabalho) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.departamentoId = _data["departamentoId"];
            this.departamento = _data["departamento"] ? Departamento.fromJS(_data["departamento"]) : <any>undefined;
            this.preProjetoId = _data["preProjetoId"];
            this.preProjeto = _data["preProjeto"] ? PreProjeto.fromJS(_data["preProjeto"]) : <any>undefined;
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.projetoPlurianual = _data["projetoPlurianual"] ? ProjetoPlurianual.fromJS(_data["projetoPlurianual"]) : <any>undefined;
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            if (Array.isArray(_data["corresponsaveis"])) {
                this.corresponsaveis = [] as any;
                for (let item of _data["corresponsaveis"])
                    this.corresponsaveis!.push(DeclaracaoTrabalhoCorresponsavel.fromJS(item));
            }
            this.problemaIdentificado = _data["problemaIdentificado"];
            this.solucaoProposta = _data["solucaoProposta"];
            this.requisitosEspecificacoesDesejadas = _data["requisitosEspecificacoesDesejadas"];
            this.requisitosEspecificacoesFundamentais = _data["requisitosEspecificacoesFundamentais"];
            this.prazoEsperadoExecucaoSolucao = _data["prazoEsperadoExecucaoSolucao"] ? new Date(_data["prazoEsperadoExecucaoSolucao"].toString()) : <any>undefined;
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(DeclaracaoTrabalhoAnexo.fromJS(item));
            }
            this.viavelTecnicamente = _data["viavelTecnicamente"];
            this.parecerTecnico = _data["parecerTecnico"];
            this.periodoExecucaoSolucao = _data["periodoExecucaoSolucao"];
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(DeclaracaoTrabalhoOrcamento.fromJS(item));
            }
            this.situacao = _data["situacao"];
            this.consideracoes = _data["consideracoes"];
            this.totalOrcamento = _data["totalOrcamento"];
            this.totalDespesaAdministrativa = _data["totalDespesaAdministrativa"];
            this.totalCustoAssistencial = _data["totalCustoAssistencial"];
            this.totalInvestimento = _data["totalInvestimento"];
            this.dataEntregaFornecedor = _data["dataEntregaFornecedor"] ? new Date(_data["dataEntregaFornecedor"].toString()) : <any>undefined;
            this.dataEntregaClassificacaoContabil = _data["dataEntregaClassificacaoContabil"] ? new Date(_data["dataEntregaClassificacaoContabil"].toString()) : <any>undefined;
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            if (Array.isArray(_data["declaracaoTrabalhoSituacoes"])) {
                this.declaracaoTrabalhoSituacoes = [] as any;
                for (let item of _data["declaracaoTrabalhoSituacoes"])
                    this.declaracaoTrabalhoSituacoes!.push(DTSituacao.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeclaracaoTrabalho {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalho();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoId"] = this.departamentoId;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["projetoPlurianual"] = this.projetoPlurianual ? this.projetoPlurianual.toJSON() : <any>undefined;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        if (Array.isArray(this.corresponsaveis)) {
            data["corresponsaveis"] = [];
            for (let item of this.corresponsaveis)
                data["corresponsaveis"].push(item.toJSON());
        }
        data["problemaIdentificado"] = this.problemaIdentificado;
        data["solucaoProposta"] = this.solucaoProposta;
        data["requisitosEspecificacoesDesejadas"] = this.requisitosEspecificacoesDesejadas;
        data["requisitosEspecificacoesFundamentais"] = this.requisitosEspecificacoesFundamentais;
        data["prazoEsperadoExecucaoSolucao"] = this.prazoEsperadoExecucaoSolucao ? this.prazoEsperadoExecucaoSolucao.toISOString() : <any>undefined;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        data["viavelTecnicamente"] = this.viavelTecnicamente;
        data["parecerTecnico"] = this.parecerTecnico;
        data["periodoExecucaoSolucao"] = this.periodoExecucaoSolucao;
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["situacao"] = this.situacao;
        data["consideracoes"] = this.consideracoes;
        data["totalOrcamento"] = this.totalOrcamento;
        data["totalDespesaAdministrativa"] = this.totalDespesaAdministrativa;
        data["totalCustoAssistencial"] = this.totalCustoAssistencial;
        data["totalInvestimento"] = this.totalInvestimento;
        data["dataEntregaFornecedor"] = this.dataEntregaFornecedor ? this.dataEntregaFornecedor.toISOString() : <any>undefined;
        data["dataEntregaClassificacaoContabil"] = this.dataEntregaClassificacaoContabil ? this.dataEntregaClassificacaoContabil.toISOString() : <any>undefined;
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        if (Array.isArray(this.declaracaoTrabalhoSituacoes)) {
            data["declaracaoTrabalhoSituacoes"] = [];
            for (let item of this.declaracaoTrabalhoSituacoes)
                data["declaracaoTrabalhoSituacoes"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalho extends IAuditableEntity {
    id?: number;
    departamentoId?: number;
    departamento?: Departamento | undefined;
    preProjetoId?: number | undefined;
    preProjeto?: PreProjeto | undefined;
    projetoPlurianualId?: number | undefined;
    projetoPlurianual?: ProjetoPlurianual | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoCorresponsavel[] | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    anexos?: DeclaracaoTrabalhoAnexo[] | undefined;
    viavelTecnicamente?: boolean | undefined;
    parecerTecnico?: string | undefined;
    periodoExecucaoSolucao?: string | undefined;
    orcamentos?: DeclaracaoTrabalhoOrcamento[] | undefined;
    situacao?: DeclaracaoTrabalhoSituacao;
    consideracoes?: string | undefined;
    totalOrcamento?: number;
    totalDespesaAdministrativa?: number;
    totalCustoAssistencial?: number;
    totalInvestimento?: number;
    dataEntregaFornecedor?: Date | undefined;
    dataEntregaClassificacaoContabil?: Date | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    declaracaoTrabalhoSituacoes?: DTSituacao[] | undefined;
}

export class ProjetoPlurianual extends AuditableEntity implements IProjetoPlurianual {
    id?: number;
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoId?: number | undefined;
    departamento?: Departamento | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    situacao?: SituacaoProjetoPlurianual;
    declaracoesTrabalho?: DeclaracaoTrabalho[] | undefined;
    orcamentos?: ProjetoPlurianualOrcamento[] | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    anexos?: ProjetoPlurianualAnexo[] | undefined;
    projetoSituacoes?: ProjetoPlurianualSituacao[] | undefined;
    portifolioId?: number | undefined;
    portifolio?: Portifolio | undefined;
    cestaId?: number | undefined;
    cesta?: Cesta | undefined;
    observacao?: string | undefined;
    projetoId?: number | undefined;
    projeto?: Projeto | undefined;
    anoReferencia?: number;

    constructor(data?: IProjetoPlurianual) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.departamentoId = _data["departamentoId"];
            this.departamento = _data["departamento"] ? Departamento.fromJS(_data["departamento"]) : <any>undefined;
            this.escopoAnoSeguinte = _data["escopoAnoSeguinte"];
            this.prazoExecucaoInicial = _data["prazoExecucaoInicial"] ? new Date(_data["prazoExecucaoInicial"].toString()) : <any>undefined;
            this.prazoExecucaoFinal = _data["prazoExecucaoFinal"] ? new Date(_data["prazoExecucaoFinal"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            if (Array.isArray(_data["declaracoesTrabalho"])) {
                this.declaracoesTrabalho = [] as any;
                for (let item of _data["declaracoesTrabalho"])
                    this.declaracoesTrabalho!.push(DeclaracaoTrabalho.fromJS(item));
            }
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(ProjetoPlurianualOrcamento.fromJS(item));
            }
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(ProjetoPlurianualAnexo.fromJS(item));
            }
            if (Array.isArray(_data["projetoSituacoes"])) {
                this.projetoSituacoes = [] as any;
                for (let item of _data["projetoSituacoes"])
                    this.projetoSituacoes!.push(ProjetoPlurianualSituacao.fromJS(item));
            }
            this.portifolioId = _data["portifolioId"];
            this.portifolio = _data["portifolio"] ? Portifolio.fromJS(_data["portifolio"]) : <any>undefined;
            this.cestaId = _data["cestaId"];
            this.cesta = _data["cesta"] ? Cesta.fromJS(_data["cesta"]) : <any>undefined;
            this.observacao = _data["observacao"];
            this.projetoId = _data["projetoId"];
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): ProjetoPlurianual {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianual();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["departamentoId"] = this.departamentoId;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        data["escopoAnoSeguinte"] = this.escopoAnoSeguinte;
        data["prazoExecucaoInicial"] = this.prazoExecucaoInicial ? this.prazoExecucaoInicial.toISOString() : <any>undefined;
        data["prazoExecucaoFinal"] = this.prazoExecucaoFinal ? this.prazoExecucaoFinal.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        if (Array.isArray(this.declaracoesTrabalho)) {
            data["declaracoesTrabalho"] = [];
            for (let item of this.declaracoesTrabalho)
                data["declaracoesTrabalho"].push(item.toJSON());
        }
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        if (Array.isArray(this.projetoSituacoes)) {
            data["projetoSituacoes"] = [];
            for (let item of this.projetoSituacoes)
                data["projetoSituacoes"].push(item.toJSON());
        }
        data["portifolioId"] = this.portifolioId;
        data["portifolio"] = this.portifolio ? this.portifolio.toJSON() : <any>undefined;
        data["cestaId"] = this.cestaId;
        data["cesta"] = this.cesta ? this.cesta.toJSON() : <any>undefined;
        data["observacao"] = this.observacao;
        data["projetoId"] = this.projetoId;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["anoReferencia"] = this.anoReferencia;
        super.toJSON(data);
        return data;
    }
}

export interface IProjetoPlurianual extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoId?: number | undefined;
    departamento?: Departamento | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    situacao?: SituacaoProjetoPlurianual;
    declaracoesTrabalho?: DeclaracaoTrabalho[] | undefined;
    orcamentos?: ProjetoPlurianualOrcamento[] | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    anexos?: ProjetoPlurianualAnexo[] | undefined;
    projetoSituacoes?: ProjetoPlurianualSituacao[] | undefined;
    portifolioId?: number | undefined;
    portifolio?: Portifolio | undefined;
    cestaId?: number | undefined;
    cesta?: Cesta | undefined;
    observacao?: string | undefined;
    projetoId?: number | undefined;
    projeto?: Projeto | undefined;
    anoReferencia?: number;
}

export enum SituacaoProjetoPlurianual {
    EmElaboracao = 0,
    AguardandoLevantamentoDeCustoEPrazo = 1,
    AguardandoAprovacao = 2,
    ProjetoPlurianualValidado = 3,
    ProjetoPlurianualValidadoRessalvas = 4,
    ProjetoPlurianualReprovado = 5,
}

export class ProjetoPlurianualOrcamento extends AuditableEntity implements IProjetoPlurianualOrcamento {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    projeto?: ProjetoPlurianual | undefined;
    projetoPlurianualId?: number;
    situacao?: SituacaoProjetoPlurianualOrcamento;

    constructor(data?: IProjetoPlurianualOrcamento) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.projeto = _data["projeto"] ? ProjetoPlurianual.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualOrcamento {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualOrcamento();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["situacao"] = this.situacao;
        super.toJSON(data);
        return data;
    }
}

export interface IProjetoPlurianualOrcamento extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    projeto?: ProjetoPlurianual | undefined;
    projetoPlurianualId?: number;
    situacao?: SituacaoProjetoPlurianualOrcamento;
}

export enum SituacaoProjetoPlurianualOrcamento {
    EmElaboracao = 0,
    AguardandoClassificacao = 1,
    ClassificacaoRealizada = 2,
}

export class ProjetoPlurianualAnexo extends AuditableEntity implements IProjetoPlurianualAnexo {
    id?: number;
    tipoArquivo?: string | undefined;
    nomeArquivo?: string | undefined;
    nomeArquivoStorage?: string | undefined;
    projetoPlurianual?: ProjetoPlurianual | undefined;
    projetoPlurianualId?: number;

    constructor(data?: IProjetoPlurianualAnexo) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.nomeArquivo = _data["nomeArquivo"];
            this.nomeArquivoStorage = _data["nomeArquivoStorage"];
            this.projetoPlurianual = _data["projetoPlurianual"] ? ProjetoPlurianual.fromJS(_data["projetoPlurianual"]) : <any>undefined;
            this.projetoPlurianualId = _data["projetoPlurianualId"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualAnexo {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualAnexo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tipoArquivo"] = this.tipoArquivo;
        data["nomeArquivo"] = this.nomeArquivo;
        data["nomeArquivoStorage"] = this.nomeArquivoStorage;
        data["projetoPlurianual"] = this.projetoPlurianual ? this.projetoPlurianual.toJSON() : <any>undefined;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        super.toJSON(data);
        return data;
    }
}

export interface IProjetoPlurianualAnexo extends IAuditableEntity {
    id?: number;
    tipoArquivo?: string | undefined;
    nomeArquivo?: string | undefined;
    nomeArquivoStorage?: string | undefined;
    projetoPlurianual?: ProjetoPlurianual | undefined;
    projetoPlurianualId?: number;
}

export class ProjetoPlurianualSituacao implements IProjetoPlurianualSituacao {
    id?: number;
    projetoId?: number;
    projeto?: ProjetoPlurianual | undefined;
    data?: Date;
    situacao?: SituacaoProjetoPlurianual;
    situacaoAnterior?: SituacaoProjetoPlurianual | undefined;
    mensagem?: string | undefined;

    constructor(data?: IProjetoPlurianualSituacao) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projetoId = _data["projetoId"];
            this.projeto = _data["projeto"] ? ProjetoPlurianual.fromJS(_data["projeto"]) : <any>undefined;
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoAnterior = _data["situacaoAnterior"];
            this.mensagem = _data["mensagem"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualSituacao {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualSituacao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projetoId"] = this.projetoId;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoAnterior"] = this.situacaoAnterior;
        data["mensagem"] = this.mensagem;
        return data;
    }
}

export interface IProjetoPlurianualSituacao {
    id?: number;
    projetoId?: number;
    projeto?: ProjetoPlurianual | undefined;
    data?: Date;
    situacao?: SituacaoProjetoPlurianual;
    situacaoAnterior?: SituacaoProjetoPlurianual | undefined;
    mensagem?: string | undefined;
}

export class Portifolio extends AuditableEntity implements IPortifolio {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
    preProjetos?: PreProjeto[] | undefined;
    projetosPlurianuais?: ProjetoPlurianual[] | undefined;

    constructor(data?: IPortifolio) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataTermino = _data["dataTermino"] ? new Date(_data["dataTermino"].toString()) : <any>undefined;
            if (Array.isArray(_data["preProjetos"])) {
                this.preProjetos = [] as any;
                for (let item of _data["preProjetos"])
                    this.preProjetos!.push(PreProjeto.fromJS(item));
            }
            if (Array.isArray(_data["projetosPlurianuais"])) {
                this.projetosPlurianuais = [] as any;
                for (let item of _data["projetosPlurianuais"])
                    this.projetosPlurianuais!.push(ProjetoPlurianual.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Portifolio {
        data = typeof data === 'object' ? data : {};
        let result = new Portifolio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataTermino"] = this.dataTermino ? this.dataTermino.toISOString() : <any>undefined;
        if (Array.isArray(this.preProjetos)) {
            data["preProjetos"] = [];
            for (let item of this.preProjetos)
                data["preProjetos"].push(item.toJSON());
        }
        if (Array.isArray(this.projetosPlurianuais)) {
            data["projetosPlurianuais"] = [];
            for (let item of this.projetosPlurianuais)
                data["projetosPlurianuais"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPortifolio extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
    preProjetos?: PreProjeto[] | undefined;
    projetosPlurianuais?: ProjetoPlurianual[] | undefined;
}

export class Projeto extends AuditableEntity implements IProjeto {
    id?: number;
    nome?: string | undefined;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
    codigoCentroCustoReduzido?: string | undefined;
    status?: StatusProjeto;
    motivoPausaCancelamento?: string | undefined;
    preProjeto?: PreProjeto | undefined;
    objetivosEstrategicos?: ObjetivoEstrategico[] | undefined;
    risco?: Risco[] | undefined;
    planoDeComunicacao?: PlanoDeComunicacao[] | undefined;
    usuario?: Usuario[] | undefined;
    centroCusto?: CentroCusto | undefined;
    situacao?: SituacaoProjeto;
    equipesProjeto?: EquipeProjeto[] | undefined;
    diariosBordo?: DiarioBordo[] | undefined;
    licoesAprendidas?: LicaoAprendida[] | undefined;
    cronogramas?: Cronograma[] | undefined;
    projetosPlurianuais?: ProjetoPlurianual[] | undefined;
    dataProjeto?: Date | undefined;

    constructor(data?: IProjeto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.objetivoDoProjeto = _data["objetivoDoProjeto"];
            this.escopoDoProjeto = _data["escopoDoProjeto"];
            this.premissasDoProjeto = _data["premissasDoProjeto"];
            this.restricoesDoProjeto = _data["restricoesDoProjeto"];
            this.riscosDoProjeto = _data["riscosDoProjeto"];
            this.comentarios = _data["comentarios"];
            this.codigoCentroCustoReduzido = _data["codigoCentroCustoReduzido"];
            this.status = _data["status"];
            this.motivoPausaCancelamento = _data["motivoPausaCancelamento"];
            this.preProjeto = _data["preProjeto"] ? PreProjeto.fromJS(_data["preProjeto"]) : <any>undefined;
            if (Array.isArray(_data["objetivosEstrategicos"])) {
                this.objetivosEstrategicos = [] as any;
                for (let item of _data["objetivosEstrategicos"])
                    this.objetivosEstrategicos!.push(ObjetivoEstrategico.fromJS(item));
            }
            if (Array.isArray(_data["risco"])) {
                this.risco = [] as any;
                for (let item of _data["risco"])
                    this.risco!.push(Risco.fromJS(item));
            }
            if (Array.isArray(_data["planoDeComunicacao"])) {
                this.planoDeComunicacao = [] as any;
                for (let item of _data["planoDeComunicacao"])
                    this.planoDeComunicacao!.push(PlanoDeComunicacao.fromJS(item));
            }
            if (Array.isArray(_data["usuario"])) {
                this.usuario = [] as any;
                for (let item of _data["usuario"])
                    this.usuario!.push(Usuario.fromJS(item));
            }
            this.centroCusto = _data["centroCusto"] ? CentroCusto.fromJS(_data["centroCusto"]) : <any>undefined;
            this.situacao = _data["situacao"];
            if (Array.isArray(_data["equipesProjeto"])) {
                this.equipesProjeto = [] as any;
                for (let item of _data["equipesProjeto"])
                    this.equipesProjeto!.push(EquipeProjeto.fromJS(item));
            }
            if (Array.isArray(_data["diariosBordo"])) {
                this.diariosBordo = [] as any;
                for (let item of _data["diariosBordo"])
                    this.diariosBordo!.push(DiarioBordo.fromJS(item));
            }
            if (Array.isArray(_data["licoesAprendidas"])) {
                this.licoesAprendidas = [] as any;
                for (let item of _data["licoesAprendidas"])
                    this.licoesAprendidas!.push(LicaoAprendida.fromJS(item));
            }
            if (Array.isArray(_data["cronogramas"])) {
                this.cronogramas = [] as any;
                for (let item of _data["cronogramas"])
                    this.cronogramas!.push(Cronograma.fromJS(item));
            }
            if (Array.isArray(_data["projetosPlurianuais"])) {
                this.projetosPlurianuais = [] as any;
                for (let item of _data["projetosPlurianuais"])
                    this.projetosPlurianuais!.push(ProjetoPlurianual.fromJS(item));
            }
            this.dataProjeto = _data["dataProjeto"] ? new Date(_data["dataProjeto"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Projeto {
        data = typeof data === 'object' ? data : {};
        let result = new Projeto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["objetivoDoProjeto"] = this.objetivoDoProjeto;
        data["escopoDoProjeto"] = this.escopoDoProjeto;
        data["premissasDoProjeto"] = this.premissasDoProjeto;
        data["restricoesDoProjeto"] = this.restricoesDoProjeto;
        data["riscosDoProjeto"] = this.riscosDoProjeto;
        data["comentarios"] = this.comentarios;
        data["codigoCentroCustoReduzido"] = this.codigoCentroCustoReduzido;
        data["status"] = this.status;
        data["motivoPausaCancelamento"] = this.motivoPausaCancelamento;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        if (Array.isArray(this.objetivosEstrategicos)) {
            data["objetivosEstrategicos"] = [];
            for (let item of this.objetivosEstrategicos)
                data["objetivosEstrategicos"].push(item.toJSON());
        }
        if (Array.isArray(this.risco)) {
            data["risco"] = [];
            for (let item of this.risco)
                data["risco"].push(item.toJSON());
        }
        if (Array.isArray(this.planoDeComunicacao)) {
            data["planoDeComunicacao"] = [];
            for (let item of this.planoDeComunicacao)
                data["planoDeComunicacao"].push(item.toJSON());
        }
        if (Array.isArray(this.usuario)) {
            data["usuario"] = [];
            for (let item of this.usuario)
                data["usuario"].push(item.toJSON());
        }
        data["centroCusto"] = this.centroCusto ? this.centroCusto.toJSON() : <any>undefined;
        data["situacao"] = this.situacao;
        if (Array.isArray(this.equipesProjeto)) {
            data["equipesProjeto"] = [];
            for (let item of this.equipesProjeto)
                data["equipesProjeto"].push(item.toJSON());
        }
        if (Array.isArray(this.diariosBordo)) {
            data["diariosBordo"] = [];
            for (let item of this.diariosBordo)
                data["diariosBordo"].push(item.toJSON());
        }
        if (Array.isArray(this.licoesAprendidas)) {
            data["licoesAprendidas"] = [];
            for (let item of this.licoesAprendidas)
                data["licoesAprendidas"].push(item.toJSON());
        }
        if (Array.isArray(this.cronogramas)) {
            data["cronogramas"] = [];
            for (let item of this.cronogramas)
                data["cronogramas"].push(item.toJSON());
        }
        if (Array.isArray(this.projetosPlurianuais)) {
            data["projetosPlurianuais"] = [];
            for (let item of this.projetosPlurianuais)
                data["projetosPlurianuais"].push(item.toJSON());
        }
        data["dataProjeto"] = this.dataProjeto ? this.dataProjeto.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IProjeto extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
    codigoCentroCustoReduzido?: string | undefined;
    status?: StatusProjeto;
    motivoPausaCancelamento?: string | undefined;
    preProjeto?: PreProjeto | undefined;
    objetivosEstrategicos?: ObjetivoEstrategico[] | undefined;
    risco?: Risco[] | undefined;
    planoDeComunicacao?: PlanoDeComunicacao[] | undefined;
    usuario?: Usuario[] | undefined;
    centroCusto?: CentroCusto | undefined;
    situacao?: SituacaoProjeto;
    equipesProjeto?: EquipeProjeto[] | undefined;
    diariosBordo?: DiarioBordo[] | undefined;
    licoesAprendidas?: LicaoAprendida[] | undefined;
    cronogramas?: Cronograma[] | undefined;
    projetosPlurianuais?: ProjetoPlurianual[] | undefined;
    dataProjeto?: Date | undefined;
}

export enum StatusProjeto {
    Ativo = 0,
    Pausado = 1,
    Cancelado = 2,
    Concluido = 3,
}

export class ObjetivoEstrategico extends AuditableEntity implements IObjetivoEstrategico {
    id?: number;
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    objetivoEstrategicoPaiId?: number | undefined;
    objetivoEstrategicoPai?: ObjetivoEstrategico | undefined;
    porcentagem?: number;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva | undefined;

    constructor(data?: IObjetivoEstrategico) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.corFundo = _data["corFundo"];
            this.corTexto = _data["corTexto"];
            this.objetivoEstrategicoPaiId = _data["objetivoEstrategicoPaiId"];
            this.objetivoEstrategicoPai = _data["objetivoEstrategicoPai"] ? ObjetivoEstrategico.fromJS(_data["objetivoEstrategicoPai"]) : <any>undefined;
            this.porcentagem = _data["porcentagem"];
            this.objetivoEstrategicoClassificacao = _data["objetivoEstrategicoClassificacao"];
            this.objetivoEstrategicoPerspectiva = _data["objetivoEstrategicoPerspectiva"];
        }
    }

    static fromJS(data: any): ObjetivoEstrategico {
        data = typeof data === 'object' ? data : {};
        let result = new ObjetivoEstrategico();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["corFundo"] = this.corFundo;
        data["corTexto"] = this.corTexto;
        data["objetivoEstrategicoPaiId"] = this.objetivoEstrategicoPaiId;
        data["objetivoEstrategicoPai"] = this.objetivoEstrategicoPai ? this.objetivoEstrategicoPai.toJSON() : <any>undefined;
        data["porcentagem"] = this.porcentagem;
        data["objetivoEstrategicoClassificacao"] = this.objetivoEstrategicoClassificacao;
        data["objetivoEstrategicoPerspectiva"] = this.objetivoEstrategicoPerspectiva;
        super.toJSON(data);
        return data;
    }
}

export interface IObjetivoEstrategico extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    objetivoEstrategicoPaiId?: number | undefined;
    objetivoEstrategicoPai?: ObjetivoEstrategico | undefined;
    porcentagem?: number;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva | undefined;
}

export enum ObjetivoEstrategicoClassificacao {
    Crescimento = 0,
    Sustentabilidade = 1,
    Base = 2,
}

export enum ObjetivoEstrategicoPerspectiva {
    FinanceiraEResultado = 0,
    MercadoEClientes = 1,
    ProcessosInternos = 2,
    AprendizadoECrescimento = 3,
}

export class Risco extends AuditableEntity implements IRisco {
    id?: number;
    descricao?: string | undefined;
    impacto?: string | undefined;
    probabilidade?: string | undefined;
    planoDeAcao?: string | undefined;
    projetoId?: number | undefined;
    projeto?: Projeto | undefined;

    constructor(data?: IRisco) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.impacto = _data["impacto"];
            this.probabilidade = _data["probabilidade"];
            this.planoDeAcao = _data["planoDeAcao"];
            this.projetoId = _data["projetoId"];
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Risco {
        data = typeof data === 'object' ? data : {};
        let result = new Risco();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["impacto"] = this.impacto;
        data["probabilidade"] = this.probabilidade;
        data["planoDeAcao"] = this.planoDeAcao;
        data["projetoId"] = this.projetoId;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IRisco extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    impacto?: string | undefined;
    probabilidade?: string | undefined;
    planoDeAcao?: string | undefined;
    projetoId?: number | undefined;
    projeto?: Projeto | undefined;
}

export class PlanoDeComunicacao extends AuditableEntity implements IPlanoDeComunicacao {
    id?: number;
    conteudo?: string | undefined;
    publico?: string | undefined;
    periodicidade?: Periodicidade | undefined;
    periodicidadeId?: number | undefined;
    produto?: Produto | undefined;
    produtoId?: number | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number | undefined;

    constructor(data?: IPlanoDeComunicacao) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.conteudo = _data["conteudo"];
            this.publico = _data["publico"];
            this.periodicidade = _data["periodicidade"] ? Periodicidade.fromJS(_data["periodicidade"]) : <any>undefined;
            this.periodicidadeId = _data["periodicidadeId"];
            this.produto = _data["produto"] ? Produto.fromJS(_data["produto"]) : <any>undefined;
            this.produtoId = _data["produtoId"];
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): PlanoDeComunicacao {
        data = typeof data === 'object' ? data : {};
        let result = new PlanoDeComunicacao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["conteudo"] = this.conteudo;
        data["publico"] = this.publico;
        data["periodicidade"] = this.periodicidade ? this.periodicidade.toJSON() : <any>undefined;
        data["periodicidadeId"] = this.periodicidadeId;
        data["produto"] = this.produto ? this.produto.toJSON() : <any>undefined;
        data["produtoId"] = this.produtoId;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        super.toJSON(data);
        return data;
    }
}

export interface IPlanoDeComunicacao extends IAuditableEntity {
    id?: number;
    conteudo?: string | undefined;
    publico?: string | undefined;
    periodicidade?: Periodicidade | undefined;
    periodicidadeId?: number | undefined;
    produto?: Produto | undefined;
    produtoId?: number | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number | undefined;
}

export class Periodicidade extends AuditableEntity implements IPeriodicidade {
    id?: number;
    nome?: string | undefined;
    planosDeComunicacao?: PlanoDeComunicacao[] | undefined;

    constructor(data?: IPeriodicidade) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            if (Array.isArray(_data["planosDeComunicacao"])) {
                this.planosDeComunicacao = [] as any;
                for (let item of _data["planosDeComunicacao"])
                    this.planosDeComunicacao!.push(PlanoDeComunicacao.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Periodicidade {
        data = typeof data === 'object' ? data : {};
        let result = new Periodicidade();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        if (Array.isArray(this.planosDeComunicacao)) {
            data["planosDeComunicacao"] = [];
            for (let item of this.planosDeComunicacao)
                data["planosDeComunicacao"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPeriodicidade extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    planosDeComunicacao?: PlanoDeComunicacao[] | undefined;
}

export class Produto extends AuditableEntity implements IProduto {
    id?: number;
    nome?: string | undefined;
    planosDeComunicacao?: PlanoDeComunicacao[] | undefined;

    constructor(data?: IProduto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            if (Array.isArray(_data["planosDeComunicacao"])) {
                this.planosDeComunicacao = [] as any;
                for (let item of _data["planosDeComunicacao"])
                    this.planosDeComunicacao!.push(PlanoDeComunicacao.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Produto {
        data = typeof data === 'object' ? data : {};
        let result = new Produto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        if (Array.isArray(this.planosDeComunicacao)) {
            data["planosDeComunicacao"] = [];
            for (let item of this.planosDeComunicacao)
                data["planosDeComunicacao"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IProduto extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    planosDeComunicacao?: PlanoDeComunicacao[] | undefined;
}

export class Usuario implements IUsuario {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    situacao?: SituacaoUsuario;
    gruposUsuario?: UsuarioGrupoAcesso[] | undefined;
    projeto?: Projeto[] | undefined;

    constructor(data?: IUsuario) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.situacao = _data["situacao"];
            if (Array.isArray(_data["gruposUsuario"])) {
                this.gruposUsuario = [] as any;
                for (let item of _data["gruposUsuario"])
                    this.gruposUsuario!.push(UsuarioGrupoAcesso.fromJS(item));
            }
            if (Array.isArray(_data["projeto"])) {
                this.projeto = [] as any;
                for (let item of _data["projeto"])
                    this.projeto!.push(Projeto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Usuario {
        data = typeof data === 'object' ? data : {};
        let result = new Usuario();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["situacao"] = this.situacao;
        if (Array.isArray(this.gruposUsuario)) {
            data["gruposUsuario"] = [];
            for (let item of this.gruposUsuario)
                data["gruposUsuario"].push(item.toJSON());
        }
        if (Array.isArray(this.projeto)) {
            data["projeto"] = [];
            for (let item of this.projeto)
                data["projeto"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUsuario {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    situacao?: SituacaoUsuario;
    gruposUsuario?: UsuarioGrupoAcesso[] | undefined;
    projeto?: Projeto[] | undefined;
}

export enum SituacaoUsuario {
    Ativo = 0,
    Inativo = 1,
}

export class UsuarioGrupoAcesso extends AuditableEntity implements IUsuarioGrupoAcesso {
    id?: number;
    usuarioId?: number;
    usuario?: Usuario | undefined;
    grupoAcessoId?: number;
    grupoAcesso?: GrupoAcesso | undefined;

    constructor(data?: IUsuarioGrupoAcesso) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.usuarioId = _data["usuarioId"];
            this.usuario = _data["usuario"] ? Usuario.fromJS(_data["usuario"]) : <any>undefined;
            this.grupoAcessoId = _data["grupoAcessoId"];
            this.grupoAcesso = _data["grupoAcesso"] ? GrupoAcesso.fromJS(_data["grupoAcesso"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UsuarioGrupoAcesso {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioGrupoAcesso();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["usuarioId"] = this.usuarioId;
        data["usuario"] = this.usuario ? this.usuario.toJSON() : <any>undefined;
        data["grupoAcessoId"] = this.grupoAcessoId;
        data["grupoAcesso"] = this.grupoAcesso ? this.grupoAcesso.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUsuarioGrupoAcesso extends IAuditableEntity {
    id?: number;
    usuarioId?: number;
    usuario?: Usuario | undefined;
    grupoAcessoId?: number;
    grupoAcesso?: GrupoAcesso | undefined;
}

export class GrupoAcesso extends AuditableEntity implements IGrupoAcesso {
    id?: number;
    nome?: string | undefined;
    administrador?: boolean;
    usuariosGrupo?: UsuarioGrupoAcesso[] | undefined;
    permissoes?: PermissaoGrupoAcesso[] | undefined;

    constructor(data?: IGrupoAcesso) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.administrador = _data["administrador"];
            if (Array.isArray(_data["usuariosGrupo"])) {
                this.usuariosGrupo = [] as any;
                for (let item of _data["usuariosGrupo"])
                    this.usuariosGrupo!.push(UsuarioGrupoAcesso.fromJS(item));
            }
            if (Array.isArray(_data["permissoes"])) {
                this.permissoes = [] as any;
                for (let item of _data["permissoes"])
                    this.permissoes!.push(PermissaoGrupoAcesso.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GrupoAcesso {
        data = typeof data === 'object' ? data : {};
        let result = new GrupoAcesso();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["administrador"] = this.administrador;
        if (Array.isArray(this.usuariosGrupo)) {
            data["usuariosGrupo"] = [];
            for (let item of this.usuariosGrupo)
                data["usuariosGrupo"].push(item.toJSON());
        }
        if (Array.isArray(this.permissoes)) {
            data["permissoes"] = [];
            for (let item of this.permissoes)
                data["permissoes"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGrupoAcesso extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    administrador?: boolean;
    usuariosGrupo?: UsuarioGrupoAcesso[] | undefined;
    permissoes?: PermissaoGrupoAcesso[] | undefined;
}

export class PermissaoGrupoAcesso extends AuditableEntity implements IPermissaoGrupoAcesso {
    id?: number;
    permissaoAcessoId?: string | undefined;
    grupoAcessoId?: number;
    grupoAcesso?: GrupoAcesso | undefined;

    constructor(data?: IPermissaoGrupoAcesso) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.permissaoAcessoId = _data["permissaoAcessoId"];
            this.grupoAcessoId = _data["grupoAcessoId"];
            this.grupoAcesso = _data["grupoAcesso"] ? GrupoAcesso.fromJS(_data["grupoAcesso"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PermissaoGrupoAcesso {
        data = typeof data === 'object' ? data : {};
        let result = new PermissaoGrupoAcesso();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["permissaoAcessoId"] = this.permissaoAcessoId;
        data["grupoAcessoId"] = this.grupoAcessoId;
        data["grupoAcesso"] = this.grupoAcesso ? this.grupoAcesso.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPermissaoGrupoAcesso extends IAuditableEntity {
    id?: number;
    permissaoAcessoId?: string | undefined;
    grupoAcessoId?: number;
    grupoAcesso?: GrupoAcesso | undefined;
}

export class CentroCusto extends AuditableEntity implements ICentroCusto {
    id?: number;
    departamentoSolicianteId?: number;
    departamentoSolicitante?: Departamento | undefined;
    origemRecursos?: OrigemRecursos;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number | undefined;
    mudancaOrganizacionalGerencia?: Departamento | undefined;
    mudancaOrganizacionalCoordenacaoId?: number | undefined;
    mudancaOrganizacionalCoordenacao?: Departamento | undefined;
    mudancaOrganizacionalSuperintendenciaId?: number | undefined;
    mudancaOrganizacionalSuperintendencia?: Departamento | undefined;
    mudancaOrganizacionalDiretoriaId?: number | undefined;
    mudancaOrganizacionalDiretoria?: Departamento | undefined;
    situacaoCopec?: SituacaoSolicitacaoCentroCusto;
    loginGestorCopec?: string | undefined;
    dataRespostaCopec?: Date | undefined;
    situacaoCocup?: SituacaoSolicitacaoCentroCusto | undefined;
    loginGestorCocup?: string | undefined;
    dataRespostaCocup?: Date | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number;
    centroCustoRespostas?: CentroCustoResposta[] | undefined;
    situacao?: SituacaoCentroCusto;

    constructor(data?: ICentroCusto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.departamentoSolicianteId = _data["departamentoSolicianteId"];
            this.departamentoSolicitante = _data["departamentoSolicitante"] ? Departamento.fromJS(_data["departamentoSolicitante"]) : <any>undefined;
            this.origemRecursos = _data["origemRecursos"];
            this.loginGestorSolicitante = _data["loginGestorSolicitante"];
            this.nomeGestorSolicitante = _data["nomeGestorSolicitante"];
            this.nomeSolicitacaoCentroCusto = _data["nomeSolicitacaoCentroCusto"];
            this.siglaSolicitacaoCentroCusto = _data["siglaSolicitacaoCentroCusto"];
            this.motivoSolicitacao = _data["motivoSolicitacao"];
            this.mudancaOrganizacional = _data["mudancaOrganizacional"];
            this.mudancaOrganizacionalGerenciaId = _data["mudancaOrganizacionalGerenciaId"];
            this.mudancaOrganizacionalGerencia = _data["mudancaOrganizacionalGerencia"] ? Departamento.fromJS(_data["mudancaOrganizacionalGerencia"]) : <any>undefined;
            this.mudancaOrganizacionalCoordenacaoId = _data["mudancaOrganizacionalCoordenacaoId"];
            this.mudancaOrganizacionalCoordenacao = _data["mudancaOrganizacionalCoordenacao"] ? Departamento.fromJS(_data["mudancaOrganizacionalCoordenacao"]) : <any>undefined;
            this.mudancaOrganizacionalSuperintendenciaId = _data["mudancaOrganizacionalSuperintendenciaId"];
            this.mudancaOrganizacionalSuperintendencia = _data["mudancaOrganizacionalSuperintendencia"] ? Departamento.fromJS(_data["mudancaOrganizacionalSuperintendencia"]) : <any>undefined;
            this.mudancaOrganizacionalDiretoriaId = _data["mudancaOrganizacionalDiretoriaId"];
            this.mudancaOrganizacionalDiretoria = _data["mudancaOrganizacionalDiretoria"] ? Departamento.fromJS(_data["mudancaOrganizacionalDiretoria"]) : <any>undefined;
            this.situacaoCopec = _data["situacaoCopec"];
            this.loginGestorCopec = _data["loginGestorCopec"];
            this.dataRespostaCopec = _data["dataRespostaCopec"] ? new Date(_data["dataRespostaCopec"].toString()) : <any>undefined;
            this.situacaoCocup = _data["situacaoCocup"];
            this.loginGestorCocup = _data["loginGestorCocup"];
            this.dataRespostaCocup = _data["dataRespostaCocup"] ? new Date(_data["dataRespostaCocup"].toString()) : <any>undefined;
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
            if (Array.isArray(_data["centroCustoRespostas"])) {
                this.centroCustoRespostas = [] as any;
                for (let item of _data["centroCustoRespostas"])
                    this.centroCustoRespostas!.push(CentroCustoResposta.fromJS(item));
            }
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): CentroCusto {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCusto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoSolicianteId"] = this.departamentoSolicianteId;
        data["departamentoSolicitante"] = this.departamentoSolicitante ? this.departamentoSolicitante.toJSON() : <any>undefined;
        data["origemRecursos"] = this.origemRecursos;
        data["loginGestorSolicitante"] = this.loginGestorSolicitante;
        data["nomeGestorSolicitante"] = this.nomeGestorSolicitante;
        data["nomeSolicitacaoCentroCusto"] = this.nomeSolicitacaoCentroCusto;
        data["siglaSolicitacaoCentroCusto"] = this.siglaSolicitacaoCentroCusto;
        data["motivoSolicitacao"] = this.motivoSolicitacao;
        data["mudancaOrganizacional"] = this.mudancaOrganizacional;
        data["mudancaOrganizacionalGerenciaId"] = this.mudancaOrganizacionalGerenciaId;
        data["mudancaOrganizacionalGerencia"] = this.mudancaOrganizacionalGerencia ? this.mudancaOrganizacionalGerencia.toJSON() : <any>undefined;
        data["mudancaOrganizacionalCoordenacaoId"] = this.mudancaOrganizacionalCoordenacaoId;
        data["mudancaOrganizacionalCoordenacao"] = this.mudancaOrganizacionalCoordenacao ? this.mudancaOrganizacionalCoordenacao.toJSON() : <any>undefined;
        data["mudancaOrganizacionalSuperintendenciaId"] = this.mudancaOrganizacionalSuperintendenciaId;
        data["mudancaOrganizacionalSuperintendencia"] = this.mudancaOrganizacionalSuperintendencia ? this.mudancaOrganizacionalSuperintendencia.toJSON() : <any>undefined;
        data["mudancaOrganizacionalDiretoriaId"] = this.mudancaOrganizacionalDiretoriaId;
        data["mudancaOrganizacionalDiretoria"] = this.mudancaOrganizacionalDiretoria ? this.mudancaOrganizacionalDiretoria.toJSON() : <any>undefined;
        data["situacaoCopec"] = this.situacaoCopec;
        data["loginGestorCopec"] = this.loginGestorCopec;
        data["dataRespostaCopec"] = this.dataRespostaCopec ? this.dataRespostaCopec.toISOString() : <any>undefined;
        data["situacaoCocup"] = this.situacaoCocup;
        data["loginGestorCocup"] = this.loginGestorCocup;
        data["dataRespostaCocup"] = this.dataRespostaCocup ? this.dataRespostaCocup.toISOString() : <any>undefined;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        if (Array.isArray(this.centroCustoRespostas)) {
            data["centroCustoRespostas"] = [];
            for (let item of this.centroCustoRespostas)
                data["centroCustoRespostas"].push(item.toJSON());
        }
        data["situacao"] = this.situacao;
        super.toJSON(data);
        return data;
    }
}

export interface ICentroCusto extends IAuditableEntity {
    id?: number;
    departamentoSolicianteId?: number;
    departamentoSolicitante?: Departamento | undefined;
    origemRecursos?: OrigemRecursos;
    loginGestorSolicitante?: string | undefined;
    nomeGestorSolicitante?: string | undefined;
    nomeSolicitacaoCentroCusto?: string | undefined;
    siglaSolicitacaoCentroCusto?: string | undefined;
    motivoSolicitacao?: string | undefined;
    mudancaOrganizacional?: string | undefined;
    mudancaOrganizacionalGerenciaId?: number | undefined;
    mudancaOrganizacionalGerencia?: Departamento | undefined;
    mudancaOrganizacionalCoordenacaoId?: number | undefined;
    mudancaOrganizacionalCoordenacao?: Departamento | undefined;
    mudancaOrganizacionalSuperintendenciaId?: number | undefined;
    mudancaOrganizacionalSuperintendencia?: Departamento | undefined;
    mudancaOrganizacionalDiretoriaId?: number | undefined;
    mudancaOrganizacionalDiretoria?: Departamento | undefined;
    situacaoCopec?: SituacaoSolicitacaoCentroCusto;
    loginGestorCopec?: string | undefined;
    dataRespostaCopec?: Date | undefined;
    situacaoCocup?: SituacaoSolicitacaoCentroCusto | undefined;
    loginGestorCocup?: string | undefined;
    dataRespostaCocup?: Date | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number;
    centroCustoRespostas?: CentroCustoResposta[] | undefined;
    situacao?: SituacaoCentroCusto;
}

export class CentroCustoResposta extends AuditableEntity implements ICentroCustoResposta {
    id?: number;
    nome?: string | undefined;
    nomeReduzido?: string | undefined;
    descricao?: string | undefined;
    centroCusto?: CentroCusto | undefined;
    centroCustoId?: number;

    constructor(data?: ICentroCustoResposta) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.nomeReduzido = _data["nomeReduzido"];
            this.descricao = _data["descricao"];
            this.centroCusto = _data["centroCusto"] ? CentroCusto.fromJS(_data["centroCusto"]) : <any>undefined;
            this.centroCustoId = _data["centroCustoId"];
        }
    }

    static fromJS(data: any): CentroCustoResposta {
        data = typeof data === 'object' ? data : {};
        let result = new CentroCustoResposta();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["nomeReduzido"] = this.nomeReduzido;
        data["descricao"] = this.descricao;
        data["centroCusto"] = this.centroCusto ? this.centroCusto.toJSON() : <any>undefined;
        data["centroCustoId"] = this.centroCustoId;
        super.toJSON(data);
        return data;
    }
}

export interface ICentroCustoResposta extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    nomeReduzido?: string | undefined;
    descricao?: string | undefined;
    centroCusto?: CentroCusto | undefined;
    centroCustoId?: number;
}

export enum SituacaoProjeto {
    ProjetoAberto = 0,
    AguardandoAprovacaoTap = 1,
    TapConcluido = 2,
}

export class EquipeProjeto extends AuditableEntity implements IEquipeProjeto {
    id?: number;
    nome?: string | undefined;
    login?: string | undefined;
    participacao?: Participacao;
    funcao?: EquipeProjetoFuncao | undefined;
    funcaoId?: number;
    projeto?: Projeto | undefined;
    projetoId?: number;

    constructor(data?: IEquipeProjeto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.login = _data["login"];
            this.participacao = _data["participacao"];
            this.funcao = _data["funcao"] ? EquipeProjetoFuncao.fromJS(_data["funcao"]) : <any>undefined;
            this.funcaoId = _data["funcaoId"];
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): EquipeProjeto {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjeto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["login"] = this.login;
        data["participacao"] = this.participacao;
        data["funcao"] = this.funcao ? this.funcao.toJSON() : <any>undefined;
        data["funcaoId"] = this.funcaoId;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        super.toJSON(data);
        return data;
    }
}

export interface IEquipeProjeto extends IAuditableEntity {
    id?: number;
    nome?: string | undefined;
    login?: string | undefined;
    participacao?: Participacao;
    funcao?: EquipeProjetoFuncao | undefined;
    funcaoId?: number;
    projeto?: Projeto | undefined;
    projetoId?: number;
}

export enum Participacao {
    Integral = 0,
    Parcial = 1,
    SobDemanda = 2,
}

export class EquipeProjetoFuncao extends AuditableEntity implements IEquipeProjetoFuncao {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: IEquipeProjetoFuncao) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): EquipeProjetoFuncao {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoFuncao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        super.toJSON(data);
        return data;
    }
}

export interface IEquipeProjetoFuncao extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
}

export class DiarioBordo extends AuditableEntity implements IDiarioBordo {
    id?: number;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    cronograma?: Cronograma | undefined;
    cronogramaId?: number | undefined;
    areaResponsavelAtraso?: Departamento | undefined;
    areaResponsavelAtrasoId?: number | undefined;
    motivoAtraso?: string | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number;
    tipo?: TipoDiario;
    anoReferencia?: number | undefined;

    constructor(data?: IDiarioBordo) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.dataRegistro = _data["dataRegistro"] ? new Date(_data["dataRegistro"].toString()) : <any>undefined;
            this.descricao = _data["descricao"];
            this.planejado = _data["planejado"];
            this.real = _data["real"];
            this.cronograma = _data["cronograma"] ? Cronograma.fromJS(_data["cronograma"]) : <any>undefined;
            this.cronogramaId = _data["cronogramaId"];
            this.areaResponsavelAtraso = _data["areaResponsavelAtraso"] ? Departamento.fromJS(_data["areaResponsavelAtraso"]) : <any>undefined;
            this.areaResponsavelAtrasoId = _data["areaResponsavelAtrasoId"];
            this.motivoAtraso = _data["motivoAtraso"];
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
            this.tipo = _data["tipo"];
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): DiarioBordo {
        data = typeof data === 'object' ? data : {};
        let result = new DiarioBordo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["dataRegistro"] = this.dataRegistro ? this.dataRegistro.toISOString() : <any>undefined;
        data["descricao"] = this.descricao;
        data["planejado"] = this.planejado;
        data["real"] = this.real;
        data["cronograma"] = this.cronograma ? this.cronograma.toJSON() : <any>undefined;
        data["cronogramaId"] = this.cronogramaId;
        data["areaResponsavelAtraso"] = this.areaResponsavelAtraso ? this.areaResponsavelAtraso.toJSON() : <any>undefined;
        data["areaResponsavelAtrasoId"] = this.areaResponsavelAtrasoId;
        data["motivoAtraso"] = this.motivoAtraso;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        data["tipo"] = this.tipo;
        data["anoReferencia"] = this.anoReferencia;
        super.toJSON(data);
        return data;
    }
}

export interface IDiarioBordo extends IAuditableEntity {
    id?: number;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    cronograma?: Cronograma | undefined;
    cronogramaId?: number | undefined;
    areaResponsavelAtraso?: Departamento | undefined;
    areaResponsavelAtrasoId?: number | undefined;
    motivoAtraso?: string | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number;
    tipo?: TipoDiario;
    anoReferencia?: number | undefined;
}

export class Cronograma extends AuditableEntity implements ICronograma {
    id?: number;
    base?: number;
    revisado?: number;
    realizado?: number;
    data?: Date;
    dataStatus?: Date | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number;
    baseline?: number;
    importado?: boolean | undefined;
    tarefas?: Tarefa[] | undefined;
    status?: StatusCronograma;

    constructor(data?: ICronograma) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.base = _data["base"];
            this.revisado = _data["revisado"];
            this.realizado = _data["realizado"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.dataStatus = _data["dataStatus"] ? new Date(_data["dataStatus"].toString()) : <any>undefined;
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
            this.baseline = _data["baseline"];
            this.importado = _data["importado"];
            if (Array.isArray(_data["tarefas"])) {
                this.tarefas = [] as any;
                for (let item of _data["tarefas"])
                    this.tarefas!.push(Tarefa.fromJS(item));
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Cronograma {
        data = typeof data === 'object' ? data : {};
        let result = new Cronograma();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["base"] = this.base;
        data["revisado"] = this.revisado;
        data["realizado"] = this.realizado;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["dataStatus"] = this.dataStatus ? this.dataStatus.toISOString() : <any>undefined;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        data["baseline"] = this.baseline;
        data["importado"] = this.importado;
        if (Array.isArray(this.tarefas)) {
            data["tarefas"] = [];
            for (let item of this.tarefas)
                data["tarefas"].push(item.toJSON());
        }
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

export interface ICronograma extends IAuditableEntity {
    id?: number;
    base?: number;
    revisado?: number;
    realizado?: number;
    data?: Date;
    dataStatus?: Date | undefined;
    projeto?: Projeto | undefined;
    projetoId?: number;
    baseline?: number;
    importado?: boolean | undefined;
    tarefas?: Tarefa[] | undefined;
    status?: StatusCronograma;
}

export class Tarefa extends AuditableEntity implements ITarefa {
    id?: string | undefined;
    nome?: string | undefined;
    inicio?: Date | undefined;
    fim?: Date | undefined;
    predecessorId?: string | undefined;
    predecessor?: Tarefa | undefined;
    tarefaPaiId?: string | undefined;
    tarefaPai?: Tarefa | undefined;
    percentualEsperado?: number | undefined;
    percentualCompletado?: number | undefined;
    prioridade?: number | undefined;
    horasTrabalho?: number | undefined;
    tarefasFilhas?: Tarefa[] | undefined;
    cronogramaId?: number;
    cronograma?: Cronograma | undefined;

    constructor(data?: ITarefa) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.inicio = _data["inicio"] ? new Date(_data["inicio"].toString()) : <any>undefined;
            this.fim = _data["fim"] ? new Date(_data["fim"].toString()) : <any>undefined;
            this.predecessorId = _data["predecessorId"];
            this.predecessor = _data["predecessor"] ? Tarefa.fromJS(_data["predecessor"]) : <any>undefined;
            this.tarefaPaiId = _data["tarefaPaiId"];
            this.tarefaPai = _data["tarefaPai"] ? Tarefa.fromJS(_data["tarefaPai"]) : <any>undefined;
            this.percentualEsperado = _data["percentualEsperado"];
            this.percentualCompletado = _data["percentualCompletado"];
            this.prioridade = _data["prioridade"];
            this.horasTrabalho = _data["horasTrabalho"];
            if (Array.isArray(_data["tarefasFilhas"])) {
                this.tarefasFilhas = [] as any;
                for (let item of _data["tarefasFilhas"])
                    this.tarefasFilhas!.push(Tarefa.fromJS(item));
            }
            this.cronogramaId = _data["cronogramaId"];
            this.cronograma = _data["cronograma"] ? Cronograma.fromJS(_data["cronograma"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Tarefa {
        data = typeof data === 'object' ? data : {};
        let result = new Tarefa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["inicio"] = this.inicio ? this.inicio.toISOString() : <any>undefined;
        data["fim"] = this.fim ? this.fim.toISOString() : <any>undefined;
        data["predecessorId"] = this.predecessorId;
        data["predecessor"] = this.predecessor ? this.predecessor.toJSON() : <any>undefined;
        data["tarefaPaiId"] = this.tarefaPaiId;
        data["tarefaPai"] = this.tarefaPai ? this.tarefaPai.toJSON() : <any>undefined;
        data["percentualEsperado"] = this.percentualEsperado;
        data["percentualCompletado"] = this.percentualCompletado;
        data["prioridade"] = this.prioridade;
        data["horasTrabalho"] = this.horasTrabalho;
        if (Array.isArray(this.tarefasFilhas)) {
            data["tarefasFilhas"] = [];
            for (let item of this.tarefasFilhas)
                data["tarefasFilhas"].push(item.toJSON());
        }
        data["cronogramaId"] = this.cronogramaId;
        data["cronograma"] = this.cronograma ? this.cronograma.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ITarefa extends IAuditableEntity {
    id?: string | undefined;
    nome?: string | undefined;
    inicio?: Date | undefined;
    fim?: Date | undefined;
    predecessorId?: string | undefined;
    predecessor?: Tarefa | undefined;
    tarefaPaiId?: string | undefined;
    tarefaPai?: Tarefa | undefined;
    percentualEsperado?: number | undefined;
    percentualCompletado?: number | undefined;
    prioridade?: number | undefined;
    horasTrabalho?: number | undefined;
    tarefasFilhas?: Tarefa[] | undefined;
    cronogramaId?: number;
    cronograma?: Cronograma | undefined;
}

export enum StatusCronograma {
    Vermelho = 0,
    Amarelo = 1,
    Verde = 2,
}

export enum TipoDiario {
    Acao = 0,
    ReuniaoStatus = 1,
}

export class LicaoAprendida extends AuditableEntity implements ILicaoAprendida {
    id?: number;
    data?: Date;
    fase?: FaseProjeto;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    departamento?: Departamento | undefined;
    departamentoId?: number;
    projeto?: Projeto | undefined;
    projetoId?: number;

    constructor(data?: ILicaoAprendida) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.fase = _data["fase"];
            this.pontosPositivos = _data["pontosPositivos"];
            this.pontosAtencao = _data["pontosAtencao"];
            this.departamento = _data["departamento"] ? Departamento.fromJS(_data["departamento"]) : <any>undefined;
            this.departamentoId = _data["departamentoId"];
            this.projeto = _data["projeto"] ? Projeto.fromJS(_data["projeto"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): LicaoAprendida {
        data = typeof data === 'object' ? data : {};
        let result = new LicaoAprendida();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["fase"] = this.fase;
        data["pontosPositivos"] = this.pontosPositivos;
        data["pontosAtencao"] = this.pontosAtencao;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        data["departamentoId"] = this.departamentoId;
        data["projeto"] = this.projeto ? this.projeto.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        super.toJSON(data);
        return data;
    }
}

export interface ILicaoAprendida extends IAuditableEntity {
    id?: number;
    data?: Date;
    fase?: FaseProjeto;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    departamento?: Departamento | undefined;
    departamentoId?: number;
    projeto?: Projeto | undefined;
    projetoId?: number;
}

export enum FaseProjeto {
    Planejamento = 0,
    Execucao = 1,
}

export class DeclaracaoTrabalhoCorresponsavel extends AuditableEntity implements IDeclaracaoTrabalhoCorresponsavel {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    declaracaoTrabalhoId?: number;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;

    constructor(data?: IDeclaracaoTrabalhoCorresponsavel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.declaracaoTrabalho = _data["declaracaoTrabalho"] ? DeclaracaoTrabalho.fromJS(_data["declaracaoTrabalho"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoCorresponsavel {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoCorresponsavel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["declaracaoTrabalho"] = this.declaracaoTrabalho ? this.declaracaoTrabalho.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalhoCorresponsavel extends IAuditableEntity {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    declaracaoTrabalhoId?: number;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
}

export class DeclaracaoTrabalhoAnexo extends AuditableEntity implements IDeclaracaoTrabalhoAnexo {
    id?: number;
    tipoArquivo?: string | undefined;
    nomeArquivo?: string | undefined;
    nomeArquivoStorage?: string | undefined;
    tipo?: DeclaracaoTrabalhoTipoAnexo;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoAnexo) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.nomeArquivo = _data["nomeArquivo"];
            this.nomeArquivoStorage = _data["nomeArquivoStorage"];
            this.tipo = _data["tipo"];
            this.declaracaoTrabalho = _data["declaracaoTrabalho"] ? DeclaracaoTrabalho.fromJS(_data["declaracaoTrabalho"]) : <any>undefined;
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAnexo {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAnexo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tipoArquivo"] = this.tipoArquivo;
        data["nomeArquivo"] = this.nomeArquivo;
        data["nomeArquivoStorage"] = this.nomeArquivoStorage;
        data["tipo"] = this.tipo;
        data["declaracaoTrabalho"] = this.declaracaoTrabalho ? this.declaracaoTrabalho.toJSON() : <any>undefined;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalhoAnexo extends IAuditableEntity {
    id?: number;
    tipoArquivo?: string | undefined;
    nomeArquivo?: string | undefined;
    nomeArquivoStorage?: string | undefined;
    tipo?: DeclaracaoTrabalhoTipoAnexo;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
    declaracaoTrabalhoId?: number;
}

export enum DeclaracaoTrabalhoTipoAnexo {
    Solicitante = 0,
    FornecedorInterno = 1,
}

export class DeclaracaoTrabalhoOrcamento extends AuditableEntity implements IDeclaracaoTrabalhoOrcamento {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoOrcamento) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.declaracaoTrabalho = _data["declaracaoTrabalho"] ? DeclaracaoTrabalho.fromJS(_data["declaracaoTrabalho"]) : <any>undefined;
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoOrcamento {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoOrcamento();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["declaracaoTrabalho"] = this.declaracaoTrabalho ? this.declaracaoTrabalho.toJSON() : <any>undefined;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalhoOrcamento extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
    declaracaoTrabalhoId?: number;
}

export enum DeclaracaoTrabalhoSituacao {
    Elaboracao = 0,
    AguardandoFornecedor = 1,
    Respondida = 2,
    AguardandoClassificacao = 3,
    ClassificacaoRealizada = 4,
    Finalizada = 5,
    Cancelada = 6,
    AguardandoAjustes = 7,
    AjustesRealizados = 8,
}

export class DTSituacao implements IDTSituacao {
    id?: number;
    declaracaoTrabalhoId?: number;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
    data?: Date;
    situacao?: DeclaracaoTrabalhoSituacao;
    situacaoAnterior?: DeclaracaoTrabalhoSituacao | undefined;
    mensagem?: string | undefined;

    constructor(data?: IDTSituacao) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.declaracaoTrabalho = _data["declaracaoTrabalho"] ? DeclaracaoTrabalho.fromJS(_data["declaracaoTrabalho"]) : <any>undefined;
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoAnterior = _data["situacaoAnterior"];
            this.mensagem = _data["mensagem"];
        }
    }

    static fromJS(data: any): DTSituacao {
        data = typeof data === 'object' ? data : {};
        let result = new DTSituacao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["declaracaoTrabalho"] = this.declaracaoTrabalho ? this.declaracaoTrabalho.toJSON() : <any>undefined;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoAnterior"] = this.situacaoAnterior;
        data["mensagem"] = this.mensagem;
        return data;
    }
}

export interface IDTSituacao {
    id?: number;
    declaracaoTrabalhoId?: number;
    declaracaoTrabalho?: DeclaracaoTrabalho | undefined;
    data?: Date;
    situacao?: DeclaracaoTrabalhoSituacao;
    situacaoAnterior?: DeclaracaoTrabalhoSituacao | undefined;
    mensagem?: string | undefined;
}

export class PreProjetoAreasEnvolvida extends AuditableEntity implements IPreProjetoAreasEnvolvida {
    id?: number;
    preProjetoId?: number;
    preProjeto?: PreProjeto | undefined;
    departamentoId?: number;
    departamento?: Departamento | undefined;

    constructor(data?: IPreProjetoAreasEnvolvida) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.preProjetoId = _data["preProjetoId"];
            this.preProjeto = _data["preProjeto"] ? PreProjeto.fromJS(_data["preProjeto"]) : <any>undefined;
            this.departamentoId = _data["departamentoId"];
            this.departamento = _data["departamento"] ? Departamento.fromJS(_data["departamento"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PreProjetoAreasEnvolvida {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoAreasEnvolvida();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        data["departamentoId"] = this.departamentoId;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetoAreasEnvolvida extends IAuditableEntity {
    id?: number;
    preProjetoId?: number;
    preProjeto?: PreProjeto | undefined;
    departamentoId?: number;
    departamento?: Departamento | undefined;
}

export class PreProjetoOrcamento extends AuditableEntity implements IPreProjetoOrcamento {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    preProjeto?: PreProjeto | undefined;
    preProjetoId?: number;
    situacao?: SituacaoPreProjetoOrcamento;

    constructor(data?: IPreProjetoOrcamento) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.preProjeto = _data["preProjeto"] ? PreProjeto.fromJS(_data["preProjeto"]) : <any>undefined;
            this.preProjetoId = _data["preProjetoId"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): PreProjetoOrcamento {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoOrcamento();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        data["preProjetoId"] = this.preProjetoId;
        data["situacao"] = this.situacao;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetoOrcamento extends IAuditableEntity {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    preProjeto?: PreProjeto | undefined;
    preProjetoId?: number;
    situacao?: SituacaoPreProjetoOrcamento;
}

export enum SituacaoPreProjetoOrcamento {
    EmElaboracao = 0,
    AguardandoClassificacao = 1,
    ClassificacaoRealizada = 2,
}

export class AnaliseEconomicoFinanceira extends AuditableEntity implements IAnaliseEconomicoFinanceira {
    id?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
    departamento?: Departamento | undefined;
    anexos?: AnaliseEconomicoFinanceiraAnexo[] | undefined;

    constructor(data?: IAnaliseEconomicoFinanceira) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.analiseEconomicoFinanceiraAplicavel = _data["analiseEconomicoFinanceiraAplicavel"];
            this.retornoFinanceiroPositivo = _data["retornoFinanceiroPositivo"];
            this.parecer = _data["parecer"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.loginRepresentanteControladoria = _data["loginRepresentanteControladoria"];
            this.nomeRepresentanteControladoria = _data["nomeRepresentanteControladoria"];
            this.departamentoId = _data["departamentoId"];
            this.departamento = _data["departamento"] ? Departamento.fromJS(_data["departamento"]) : <any>undefined;
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(AnaliseEconomicoFinanceiraAnexo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceira {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceira();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["analiseEconomicoFinanceiraAplicavel"] = this.analiseEconomicoFinanceiraAplicavel;
        data["retornoFinanceiroPositivo"] = this.retornoFinanceiroPositivo;
        data["parecer"] = this.parecer;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["loginRepresentanteControladoria"] = this.loginRepresentanteControladoria;
        data["nomeRepresentanteControladoria"] = this.nomeRepresentanteControladoria;
        data["departamentoId"] = this.departamentoId;
        data["departamento"] = this.departamento ? this.departamento.toJSON() : <any>undefined;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IAnaliseEconomicoFinanceira extends IAuditableEntity {
    id?: number;
    analiseEconomicoFinanceiraAplicavel?: boolean;
    retornoFinanceiroPositivo?: boolean | undefined;
    parecer?: string | undefined;
    data?: Date;
    loginRepresentanteControladoria?: string | undefined;
    nomeRepresentanteControladoria?: string | undefined;
    departamentoId?: number;
    departamento?: Departamento | undefined;
    anexos?: AnaliseEconomicoFinanceiraAnexo[] | undefined;
}

export class AnaliseEconomicoFinanceiraAnexo extends AuditableEntity implements IAnaliseEconomicoFinanceiraAnexo {
    id?: number;
    tipoArquivo?: string | undefined;
    nomeArquivo?: string | undefined;
    nomeArquivoStorage?: string | undefined;
    analiseEconomicoFinanceira?: AnaliseEconomicoFinanceira | undefined;
    analiseEconomicoFinanceiraId?: number;

    constructor(data?: IAnaliseEconomicoFinanceiraAnexo) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.nomeArquivo = _data["nomeArquivo"];
            this.nomeArquivoStorage = _data["nomeArquivoStorage"];
            this.analiseEconomicoFinanceira = _data["analiseEconomicoFinanceira"] ? AnaliseEconomicoFinanceira.fromJS(_data["analiseEconomicoFinanceira"]) : <any>undefined;
            this.analiseEconomicoFinanceiraId = _data["analiseEconomicoFinanceiraId"];
        }
    }

    static fromJS(data: any): AnaliseEconomicoFinanceiraAnexo {
        data = typeof data === 'object' ? data : {};
        let result = new AnaliseEconomicoFinanceiraAnexo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tipoArquivo"] = this.tipoArquivo;
        data["nomeArquivo"] = this.nomeArquivo;
        data["nomeArquivoStorage"] = this.nomeArquivoStorage;
        data["analiseEconomicoFinanceira"] = this.analiseEconomicoFinanceira ? this.analiseEconomicoFinanceira.toJSON() : <any>undefined;
        data["analiseEconomicoFinanceiraId"] = this.analiseEconomicoFinanceiraId;
        super.toJSON(data);
        return data;
    }
}

export interface IAnaliseEconomicoFinanceiraAnexo extends IAuditableEntity {
    id?: number;
    tipoArquivo?: string | undefined;
    nomeArquivo?: string | undefined;
    nomeArquivoStorage?: string | undefined;
    analiseEconomicoFinanceira?: AnaliseEconomicoFinanceira | undefined;
    analiseEconomicoFinanceiraId?: number;
}

export class PreProjetoSituacao implements IPreProjetoSituacao {
    id?: number;
    preProjetoId?: number;
    preProjeto?: PreProjeto | undefined;
    data?: Date;
    situacao?: SituacaoPreProjeto;
    situacaoAnterior?: SituacaoPreProjeto | undefined;
    mensagem?: string | undefined;

    constructor(data?: IPreProjetoSituacao) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.preProjetoId = _data["preProjetoId"];
            this.preProjeto = _data["preProjeto"] ? PreProjeto.fromJS(_data["preProjeto"]) : <any>undefined;
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoAnterior = _data["situacaoAnterior"];
            this.mensagem = _data["mensagem"];
        }
    }

    static fromJS(data: any): PreProjetoSituacao {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoSituacao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoAnterior"] = this.situacaoAnterior;
        data["mensagem"] = this.mensagem;
        return data;
    }
}

export interface IPreProjetoSituacao {
    id?: number;
    preProjetoId?: number;
    preProjeto?: PreProjeto | undefined;
    data?: Date;
    situacao?: SituacaoPreProjeto;
    situacaoAnterior?: SituacaoPreProjeto | undefined;
    mensagem?: string | undefined;
}

export class PreProjetoObjetivosEstrategicos extends AuditableEntity implements IPreProjetoObjetivosEstrategicos {
    id?: number;
    preProjetoId?: number;
    preProjeto?: PreProjeto | undefined;
    objetivoEstrategicoId?: number;
    objetivoEstrategico?: ObjetivoEstrategico | undefined;

    constructor(data?: IPreProjetoObjetivosEstrategicos) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.preProjetoId = _data["preProjetoId"];
            this.preProjeto = _data["preProjeto"] ? PreProjeto.fromJS(_data["preProjeto"]) : <any>undefined;
            this.objetivoEstrategicoId = _data["objetivoEstrategicoId"];
            this.objetivoEstrategico = _data["objetivoEstrategico"] ? ObjetivoEstrategico.fromJS(_data["objetivoEstrategico"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PreProjetoObjetivosEstrategicos {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoObjetivosEstrategicos();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        data["objetivoEstrategicoId"] = this.objetivoEstrategicoId;
        data["objetivoEstrategico"] = this.objetivoEstrategico ? this.objetivoEstrategico.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetoObjetivosEstrategicos extends IAuditableEntity {
    id?: number;
    preProjetoId?: number;
    preProjeto?: PreProjeto | undefined;
    objetivoEstrategicoId?: number;
    objetivoEstrategico?: ObjetivoEstrategico | undefined;
}

export class CestaCriarCommand implements ICestaCriarCommand {
    descricao?: string | undefined;

    constructor(data?: ICestaCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): CestaCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CestaCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface ICestaCriarCommand {
    descricao?: string | undefined;
}

export class CestaAlterarCommand implements ICestaAlterarCommand {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: ICestaAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): CestaAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CestaAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface ICestaAlterarCommand {
    id?: number;
    descricao?: string | undefined;
}

export class CestaVm implements ICestaVm {
    id?: number;
    descricao?: string | undefined;
    preProjetos?: PreProjetoVm[] | undefined;
    projetosPlurianuais?: ProjetoPlurianualVm[] | undefined;

    constructor(data?: ICestaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            if (Array.isArray(_data["preProjetos"])) {
                this.preProjetos = [] as any;
                for (let item of _data["preProjetos"])
                    this.preProjetos!.push(PreProjetoVm.fromJS(item));
            }
            if (Array.isArray(_data["projetosPlurianuais"])) {
                this.projetosPlurianuais = [] as any;
                for (let item of _data["projetosPlurianuais"])
                    this.projetosPlurianuais!.push(ProjetoPlurianualVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CestaVm {
        data = typeof data === 'object' ? data : {};
        let result = new CestaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        if (Array.isArray(this.preProjetos)) {
            data["preProjetos"] = [];
            for (let item of this.preProjetos)
                data["preProjetos"].push(item.toJSON());
        }
        if (Array.isArray(this.projetosPlurianuais)) {
            data["projetosPlurianuais"] = [];
            for (let item of this.projetosPlurianuais)
                data["projetosPlurianuais"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICestaVm {
    id?: number;
    descricao?: string | undefined;
    preProjetos?: PreProjetoVm[] | undefined;
    projetosPlurianuais?: ProjetoPlurianualVm[] | undefined;
}

export class PreProjetoVm implements IPreProjetoVm {
    id?: number;
    nome?: string | undefined;
    departamentoId?: number | undefined;
    departamentoNome?: string | undefined;
    departamentoSigla?: string | undefined;
    tipo?: TipoPreProjeto;
    tipoDescricao?: string | undefined;
    situacao?: SituacaoPreProjeto;
    situacaoDescricao?: string | undefined;
    projetoId?: number | undefined;
    origem?: OrigemPreProjeto;
    origemDescricao?: string | undefined;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    departamentoGerenteProjeto?: string | undefined;
    departamentoResponsavel?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoSponsor?: string | undefined;
    codigoCentroCusto?: string | undefined;
    ideia?: string | undefined;
    atendeRequisitoLegal?: boolean;
    descricaoAtendeRequisitoLegal?: string | undefined;
    parecerDepartamentoJuridico?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoJuridico?: string | undefined;
    parecerDepartamentoRiscos?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoRiscos?: string | undefined;
    possuiAlinhamentoObjetivosEstrategicos?: boolean;
    descricaoPossuiAlinhamentoObjetivosEstrategicos?: string | undefined;
    possuiVinculoEstrategiaOperacao?: boolean | undefined;
    descricaoPossuiVinculoEstrategiaOperacao?: string | undefined;
    acrescentaProdutoServico?: boolean;
    descricaoAcrescentaProdutoServico?: string | undefined;
    zonaRisco?: ZonaRisco | undefined;
    descricaoZonaRisco?: string | undefined;
    abrangenciaResultadoRestrigeApenasPropriaArea?: boolean;
    descricaoAbrangenciaResultadoRestrigeApenasPropriaArea?: string | undefined;
    stakeHolders?: StakeholderVm[] | undefined;
    possuiNovasAquisicoes?: boolean;
    descricaoPossuiNovasAquisicoes?: string | undefined;
    necessarioNovosConhecimentos?: boolean;
    descricaoNecessarioNovosConhecimentos?: string | undefined;
    dataCriacao?: Date;
    strDataCriacao?: string | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalhoVm[] | undefined;
    areasEnvolvidas?: AreaEnvolvidaVm[] | undefined;
    orcamentos?: PreProjetoOrcamentoVm[] | undefined;
    analiseEconomicoFinanceira?: AnaliseEconomicoFinanceiraVm | undefined;
    valorOrcado?: number;
    valorRealizado?: number;
    valorSaldo?: number;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    projetoSituacoes?: PreProjetoSituacaoVm[] | undefined;
    permissaoUsuarioLogado?: PermissaoAcessoPreProjetoTipo | undefined;
    podeSolicitarAnaliseFinanceira?: boolean;
    pontuacaoWorkshop?: number | undefined;
    cestaId?: number | undefined;
    cestaDescricao?: string | undefined;
    portifolioId?: number | undefined;
    observacao?: string | undefined;
    objetivosEstrategicos?: ObjetivoEstrategicoPreProjetoVm[] | undefined;
    observacaoOrcamentos?: string | undefined;
    projetoStatus?: StatusProjeto | undefined;
    projetoStatusDescricao?: string | undefined;
    projetoCronogramaStatus?: StatusCronograma | undefined;
    projetoCronogramaStatusDescricao?: string | undefined;
    projetoCronogramaRevisado?: number | undefined;
    projetoCronogramaRealizado?: number | undefined;
    projetoCronogramaData?: Date | undefined;
    planosAcoes?: PlanoAcaoVm[] | undefined;

    constructor(data?: IPreProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.departamentoId = _data["departamentoId"];
            this.departamentoNome = _data["departamentoNome"];
            this.departamentoSigla = _data["departamentoSigla"];
            this.tipo = _data["tipo"];
            this.tipoDescricao = _data["tipoDescricao"];
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.projetoId = _data["projetoId"];
            this.origem = _data["origem"];
            this.origemDescricao = _data["origemDescricao"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.departamentoGerenteProjeto = _data["departamentoGerenteProjeto"];
            this.departamentoResponsavel = _data["departamentoResponsavel"];
            this.loginGerenteNegocio = _data["loginGerenteNegocio"];
            this.nomeGerenteNegocio = _data["nomeGerenteNegocio"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.departamentoSponsor = _data["departamentoSponsor"];
            this.codigoCentroCusto = _data["codigoCentroCusto"];
            this.ideia = _data["ideia"];
            this.atendeRequisitoLegal = _data["atendeRequisitoLegal"];
            this.descricaoAtendeRequisitoLegal = _data["descricaoAtendeRequisitoLegal"];
            this.parecerDepartamentoJuridico = _data["parecerDepartamentoJuridico"];
            this.descricaoParecerDepartamentoJuridico = _data["descricaoParecerDepartamentoJuridico"];
            this.parecerDepartamentoRiscos = _data["parecerDepartamentoRiscos"];
            this.descricaoParecerDepartamentoRiscos = _data["descricaoParecerDepartamentoRiscos"];
            this.possuiAlinhamentoObjetivosEstrategicos = _data["possuiAlinhamentoObjetivosEstrategicos"];
            this.descricaoPossuiAlinhamentoObjetivosEstrategicos = _data["descricaoPossuiAlinhamentoObjetivosEstrategicos"];
            this.possuiVinculoEstrategiaOperacao = _data["possuiVinculoEstrategiaOperacao"];
            this.descricaoPossuiVinculoEstrategiaOperacao = _data["descricaoPossuiVinculoEstrategiaOperacao"];
            this.acrescentaProdutoServico = _data["acrescentaProdutoServico"];
            this.descricaoAcrescentaProdutoServico = _data["descricaoAcrescentaProdutoServico"];
            this.zonaRisco = _data["zonaRisco"];
            this.descricaoZonaRisco = _data["descricaoZonaRisco"];
            this.abrangenciaResultadoRestrigeApenasPropriaArea = _data["abrangenciaResultadoRestrigeApenasPropriaArea"];
            this.descricaoAbrangenciaResultadoRestrigeApenasPropriaArea = _data["descricaoAbrangenciaResultadoRestrigeApenasPropriaArea"];
            if (Array.isArray(_data["stakeHolders"])) {
                this.stakeHolders = [] as any;
                for (let item of _data["stakeHolders"])
                    this.stakeHolders!.push(StakeholderVm.fromJS(item));
            }
            this.possuiNovasAquisicoes = _data["possuiNovasAquisicoes"];
            this.descricaoPossuiNovasAquisicoes = _data["descricaoPossuiNovasAquisicoes"];
            this.necessarioNovosConhecimentos = _data["necessarioNovosConhecimentos"];
            this.descricaoNecessarioNovosConhecimentos = _data["descricaoNecessarioNovosConhecimentos"];
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
            this.strDataCriacao = _data["strDataCriacao"];
            if (Array.isArray(_data["declaracoesTrabalho"])) {
                this.declaracoesTrabalho = [] as any;
                for (let item of _data["declaracoesTrabalho"])
                    this.declaracoesTrabalho!.push(DeclaracaoTrabalhoVm.fromJS(item));
            }
            if (Array.isArray(_data["areasEnvolvidas"])) {
                this.areasEnvolvidas = [] as any;
                for (let item of _data["areasEnvolvidas"])
                    this.areasEnvolvidas!.push(AreaEnvolvidaVm.fromJS(item));
            }
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(PreProjetoOrcamentoVm.fromJS(item));
            }
            this.analiseEconomicoFinanceira = _data["analiseEconomicoFinanceira"] ? AnaliseEconomicoFinanceiraVm.fromJS(_data["analiseEconomicoFinanceira"]) : <any>undefined;
            this.valorOrcado = _data["valorOrcado"];
            this.valorRealizado = _data["valorRealizado"];
            this.valorSaldo = _data["valorSaldo"];
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            if (Array.isArray(_data["projetoSituacoes"])) {
                this.projetoSituacoes = [] as any;
                for (let item of _data["projetoSituacoes"])
                    this.projetoSituacoes!.push(PreProjetoSituacaoVm.fromJS(item));
            }
            this.permissaoUsuarioLogado = _data["permissaoUsuarioLogado"];
            this.podeSolicitarAnaliseFinanceira = _data["podeSolicitarAnaliseFinanceira"];
            this.pontuacaoWorkshop = _data["pontuacaoWorkshop"];
            this.cestaId = _data["cestaId"];
            this.cestaDescricao = _data["cestaDescricao"];
            this.portifolioId = _data["portifolioId"];
            this.observacao = _data["observacao"];
            if (Array.isArray(_data["objetivosEstrategicos"])) {
                this.objetivosEstrategicos = [] as any;
                for (let item of _data["objetivosEstrategicos"])
                    this.objetivosEstrategicos!.push(ObjetivoEstrategicoPreProjetoVm.fromJS(item));
            }
            this.observacaoOrcamentos = _data["observacaoOrcamentos"];
            this.projetoStatus = _data["projetoStatus"];
            this.projetoStatusDescricao = _data["projetoStatusDescricao"];
            this.projetoCronogramaStatus = _data["projetoCronogramaStatus"];
            this.projetoCronogramaStatusDescricao = _data["projetoCronogramaStatusDescricao"];
            this.projetoCronogramaRevisado = _data["projetoCronogramaRevisado"];
            this.projetoCronogramaRealizado = _data["projetoCronogramaRealizado"];
            this.projetoCronogramaData = _data["projetoCronogramaData"] ? new Date(_data["projetoCronogramaData"].toString()) : <any>undefined;
            if (Array.isArray(_data["planosAcoes"])) {
                this.planosAcoes = [] as any;
                for (let item of _data["planosAcoes"])
                    this.planosAcoes!.push(PlanoAcaoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PreProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["departamentoId"] = this.departamentoId;
        data["departamentoNome"] = this.departamentoNome;
        data["departamentoSigla"] = this.departamentoSigla;
        data["tipo"] = this.tipo;
        data["tipoDescricao"] = this.tipoDescricao;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["projetoId"] = this.projetoId;
        data["origem"] = this.origem;
        data["origemDescricao"] = this.origemDescricao;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["departamentoGerenteProjeto"] = this.departamentoGerenteProjeto;
        data["departamentoResponsavel"] = this.departamentoResponsavel;
        data["loginGerenteNegocio"] = this.loginGerenteNegocio;
        data["nomeGerenteNegocio"] = this.nomeGerenteNegocio;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["departamentoSponsor"] = this.departamentoSponsor;
        data["codigoCentroCusto"] = this.codigoCentroCusto;
        data["ideia"] = this.ideia;
        data["atendeRequisitoLegal"] = this.atendeRequisitoLegal;
        data["descricaoAtendeRequisitoLegal"] = this.descricaoAtendeRequisitoLegal;
        data["parecerDepartamentoJuridico"] = this.parecerDepartamentoJuridico;
        data["descricaoParecerDepartamentoJuridico"] = this.descricaoParecerDepartamentoJuridico;
        data["parecerDepartamentoRiscos"] = this.parecerDepartamentoRiscos;
        data["descricaoParecerDepartamentoRiscos"] = this.descricaoParecerDepartamentoRiscos;
        data["possuiAlinhamentoObjetivosEstrategicos"] = this.possuiAlinhamentoObjetivosEstrategicos;
        data["descricaoPossuiAlinhamentoObjetivosEstrategicos"] = this.descricaoPossuiAlinhamentoObjetivosEstrategicos;
        data["possuiVinculoEstrategiaOperacao"] = this.possuiVinculoEstrategiaOperacao;
        data["descricaoPossuiVinculoEstrategiaOperacao"] = this.descricaoPossuiVinculoEstrategiaOperacao;
        data["acrescentaProdutoServico"] = this.acrescentaProdutoServico;
        data["descricaoAcrescentaProdutoServico"] = this.descricaoAcrescentaProdutoServico;
        data["zonaRisco"] = this.zonaRisco;
        data["descricaoZonaRisco"] = this.descricaoZonaRisco;
        data["abrangenciaResultadoRestrigeApenasPropriaArea"] = this.abrangenciaResultadoRestrigeApenasPropriaArea;
        data["descricaoAbrangenciaResultadoRestrigeApenasPropriaArea"] = this.descricaoAbrangenciaResultadoRestrigeApenasPropriaArea;
        if (Array.isArray(this.stakeHolders)) {
            data["stakeHolders"] = [];
            for (let item of this.stakeHolders)
                data["stakeHolders"].push(item.toJSON());
        }
        data["possuiNovasAquisicoes"] = this.possuiNovasAquisicoes;
        data["descricaoPossuiNovasAquisicoes"] = this.descricaoPossuiNovasAquisicoes;
        data["necessarioNovosConhecimentos"] = this.necessarioNovosConhecimentos;
        data["descricaoNecessarioNovosConhecimentos"] = this.descricaoNecessarioNovosConhecimentos;
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        data["strDataCriacao"] = this.strDataCriacao;
        if (Array.isArray(this.declaracoesTrabalho)) {
            data["declaracoesTrabalho"] = [];
            for (let item of this.declaracoesTrabalho)
                data["declaracoesTrabalho"].push(item.toJSON());
        }
        if (Array.isArray(this.areasEnvolvidas)) {
            data["areasEnvolvidas"] = [];
            for (let item of this.areasEnvolvidas)
                data["areasEnvolvidas"].push(item.toJSON());
        }
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["analiseEconomicoFinanceira"] = this.analiseEconomicoFinanceira ? this.analiseEconomicoFinanceira.toJSON() : <any>undefined;
        data["valorOrcado"] = this.valorOrcado;
        data["valorRealizado"] = this.valorRealizado;
        data["valorSaldo"] = this.valorSaldo;
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        if (Array.isArray(this.projetoSituacoes)) {
            data["projetoSituacoes"] = [];
            for (let item of this.projetoSituacoes)
                data["projetoSituacoes"].push(item.toJSON());
        }
        data["permissaoUsuarioLogado"] = this.permissaoUsuarioLogado;
        data["podeSolicitarAnaliseFinanceira"] = this.podeSolicitarAnaliseFinanceira;
        data["pontuacaoWorkshop"] = this.pontuacaoWorkshop;
        data["cestaId"] = this.cestaId;
        data["cestaDescricao"] = this.cestaDescricao;
        data["portifolioId"] = this.portifolioId;
        data["observacao"] = this.observacao;
        if (Array.isArray(this.objetivosEstrategicos)) {
            data["objetivosEstrategicos"] = [];
            for (let item of this.objetivosEstrategicos)
                data["objetivosEstrategicos"].push(item.toJSON());
        }
        data["observacaoOrcamentos"] = this.observacaoOrcamentos;
        data["projetoStatus"] = this.projetoStatus;
        data["projetoStatusDescricao"] = this.projetoStatusDescricao;
        data["projetoCronogramaStatus"] = this.projetoCronogramaStatus;
        data["projetoCronogramaStatusDescricao"] = this.projetoCronogramaStatusDescricao;
        data["projetoCronogramaRevisado"] = this.projetoCronogramaRevisado;
        data["projetoCronogramaRealizado"] = this.projetoCronogramaRealizado;
        data["projetoCronogramaData"] = this.projetoCronogramaData ? this.projetoCronogramaData.toISOString() : <any>undefined;
        if (Array.isArray(this.planosAcoes)) {
            data["planosAcoes"] = [];
            for (let item of this.planosAcoes)
                data["planosAcoes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPreProjetoVm {
    id?: number;
    nome?: string | undefined;
    departamentoId?: number | undefined;
    departamentoNome?: string | undefined;
    departamentoSigla?: string | undefined;
    tipo?: TipoPreProjeto;
    tipoDescricao?: string | undefined;
    situacao?: SituacaoPreProjeto;
    situacaoDescricao?: string | undefined;
    projetoId?: number | undefined;
    origem?: OrigemPreProjeto;
    origemDescricao?: string | undefined;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    departamentoGerenteProjeto?: string | undefined;
    departamentoResponsavel?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoSponsor?: string | undefined;
    codigoCentroCusto?: string | undefined;
    ideia?: string | undefined;
    atendeRequisitoLegal?: boolean;
    descricaoAtendeRequisitoLegal?: string | undefined;
    parecerDepartamentoJuridico?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoJuridico?: string | undefined;
    parecerDepartamentoRiscos?: SituacaoParecer | undefined;
    descricaoParecerDepartamentoRiscos?: string | undefined;
    possuiAlinhamentoObjetivosEstrategicos?: boolean;
    descricaoPossuiAlinhamentoObjetivosEstrategicos?: string | undefined;
    possuiVinculoEstrategiaOperacao?: boolean | undefined;
    descricaoPossuiVinculoEstrategiaOperacao?: string | undefined;
    acrescentaProdutoServico?: boolean;
    descricaoAcrescentaProdutoServico?: string | undefined;
    zonaRisco?: ZonaRisco | undefined;
    descricaoZonaRisco?: string | undefined;
    abrangenciaResultadoRestrigeApenasPropriaArea?: boolean;
    descricaoAbrangenciaResultadoRestrigeApenasPropriaArea?: string | undefined;
    stakeHolders?: StakeholderVm[] | undefined;
    possuiNovasAquisicoes?: boolean;
    descricaoPossuiNovasAquisicoes?: string | undefined;
    necessarioNovosConhecimentos?: boolean;
    descricaoNecessarioNovosConhecimentos?: string | undefined;
    dataCriacao?: Date;
    strDataCriacao?: string | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalhoVm[] | undefined;
    areasEnvolvidas?: AreaEnvolvidaVm[] | undefined;
    orcamentos?: PreProjetoOrcamentoVm[] | undefined;
    analiseEconomicoFinanceira?: AnaliseEconomicoFinanceiraVm | undefined;
    valorOrcado?: number;
    valorRealizado?: number;
    valorSaldo?: number;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    projetoSituacoes?: PreProjetoSituacaoVm[] | undefined;
    permissaoUsuarioLogado?: PermissaoAcessoPreProjetoTipo | undefined;
    podeSolicitarAnaliseFinanceira?: boolean;
    pontuacaoWorkshop?: number | undefined;
    cestaId?: number | undefined;
    cestaDescricao?: string | undefined;
    portifolioId?: number | undefined;
    observacao?: string | undefined;
    objetivosEstrategicos?: ObjetivoEstrategicoPreProjetoVm[] | undefined;
    observacaoOrcamentos?: string | undefined;
    projetoStatus?: StatusProjeto | undefined;
    projetoStatusDescricao?: string | undefined;
    projetoCronogramaStatus?: StatusCronograma | undefined;
    projetoCronogramaStatusDescricao?: string | undefined;
    projetoCronogramaRevisado?: number | undefined;
    projetoCronogramaRealizado?: number | undefined;
    projetoCronogramaData?: Date | undefined;
    planosAcoes?: PlanoAcaoVm[] | undefined;
}

export class StakeholderVm implements IStakeholderVm {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: IStakeholderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): StakeholderVm {
        data = typeof data === 'object' ? data : {};
        let result = new StakeholderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IStakeholderVm {
    id?: number;
    descricao?: string | undefined;
}

export class DeclaracaoTrabalhoVm implements IDeclaracaoTrabalhoVm {
    id?: number;
    departamentoId?: number;
    departamentoNome?: string | undefined;
    preProjetoId?: number | undefined;
    preProjetoNome?: string | undefined;
    projetoNome?: string | undefined;
    projetoPlurianualId?: number | undefined;
    projetoPlurianualNome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoCorresponsavelVm[] | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    anexos?: DeclaracaoTrabalhoAnexoVm[] | undefined;
    viavelTecnicamente?: boolean | undefined;
    parecerTecnico?: string | undefined;
    periodoExecucaoSolucao?: string | undefined;
    orcamentos?: DeclaracaoTrabalhoOrcamentoVm[] | undefined;
    situacao?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDescricao?: string | undefined;
    consideracoes?: string | undefined;
    totalOrcamento?: number;
    totalDespesaAdministrativa?: number;
    totalCustoAssistencial?: number;
    totalInvestimento?: number;
    dataEntregaFornecedor?: Date | undefined;
    dataEntregaClassificacaoContabil?: Date | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    usuarioCriacaoId?: string | undefined;
    declaracaoTrabalhoSituacoes?: DTSituacaoVm[] | undefined;
    permissaoUsuarioLogado?: PermissaoAcessoDeclaracaoTrabalhoTipo | undefined;
    dataCriacao?: Date;

    constructor(data?: IDeclaracaoTrabalhoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departamentoId = _data["departamentoId"];
            this.departamentoNome = _data["departamentoNome"];
            this.preProjetoId = _data["preProjetoId"];
            this.preProjetoNome = _data["preProjetoNome"];
            this.projetoNome = _data["projetoNome"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.projetoPlurianualNome = _data["projetoPlurianualNome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            if (Array.isArray(_data["corresponsaveis"])) {
                this.corresponsaveis = [] as any;
                for (let item of _data["corresponsaveis"])
                    this.corresponsaveis!.push(DeclaracaoTrabalhoCorresponsavelVm.fromJS(item));
            }
            this.problemaIdentificado = _data["problemaIdentificado"];
            this.solucaoProposta = _data["solucaoProposta"];
            this.requisitosEspecificacoesDesejadas = _data["requisitosEspecificacoesDesejadas"];
            this.requisitosEspecificacoesFundamentais = _data["requisitosEspecificacoesFundamentais"];
            this.prazoEsperadoExecucaoSolucao = _data["prazoEsperadoExecucaoSolucao"] ? new Date(_data["prazoEsperadoExecucaoSolucao"].toString()) : <any>undefined;
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(DeclaracaoTrabalhoAnexoVm.fromJS(item));
            }
            this.viavelTecnicamente = _data["viavelTecnicamente"];
            this.parecerTecnico = _data["parecerTecnico"];
            this.periodoExecucaoSolucao = _data["periodoExecucaoSolucao"];
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(DeclaracaoTrabalhoOrcamentoVm.fromJS(item));
            }
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.consideracoes = _data["consideracoes"];
            this.totalOrcamento = _data["totalOrcamento"];
            this.totalDespesaAdministrativa = _data["totalDespesaAdministrativa"];
            this.totalCustoAssistencial = _data["totalCustoAssistencial"];
            this.totalInvestimento = _data["totalInvestimento"];
            this.dataEntregaFornecedor = _data["dataEntregaFornecedor"] ? new Date(_data["dataEntregaFornecedor"].toString()) : <any>undefined;
            this.dataEntregaClassificacaoContabil = _data["dataEntregaClassificacaoContabil"] ? new Date(_data["dataEntregaClassificacaoContabil"].toString()) : <any>undefined;
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            this.usuarioCriacaoId = _data["usuarioCriacaoId"];
            if (Array.isArray(_data["declaracaoTrabalhoSituacoes"])) {
                this.declaracaoTrabalhoSituacoes = [] as any;
                for (let item of _data["declaracaoTrabalhoSituacoes"])
                    this.declaracaoTrabalhoSituacoes!.push(DTSituacaoVm.fromJS(item));
            }
            this.permissaoUsuarioLogado = _data["permissaoUsuarioLogado"];
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoId"] = this.departamentoId;
        data["departamentoNome"] = this.departamentoNome;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjetoNome"] = this.preProjetoNome;
        data["projetoNome"] = this.projetoNome;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["projetoPlurianualNome"] = this.projetoPlurianualNome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        if (Array.isArray(this.corresponsaveis)) {
            data["corresponsaveis"] = [];
            for (let item of this.corresponsaveis)
                data["corresponsaveis"].push(item.toJSON());
        }
        data["problemaIdentificado"] = this.problemaIdentificado;
        data["solucaoProposta"] = this.solucaoProposta;
        data["requisitosEspecificacoesDesejadas"] = this.requisitosEspecificacoesDesejadas;
        data["requisitosEspecificacoesFundamentais"] = this.requisitosEspecificacoesFundamentais;
        data["prazoEsperadoExecucaoSolucao"] = this.prazoEsperadoExecucaoSolucao ? this.prazoEsperadoExecucaoSolucao.toISOString() : <any>undefined;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        data["viavelTecnicamente"] = this.viavelTecnicamente;
        data["parecerTecnico"] = this.parecerTecnico;
        data["periodoExecucaoSolucao"] = this.periodoExecucaoSolucao;
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["consideracoes"] = this.consideracoes;
        data["totalOrcamento"] = this.totalOrcamento;
        data["totalDespesaAdministrativa"] = this.totalDespesaAdministrativa;
        data["totalCustoAssistencial"] = this.totalCustoAssistencial;
        data["totalInvestimento"] = this.totalInvestimento;
        data["dataEntregaFornecedor"] = this.dataEntregaFornecedor ? this.dataEntregaFornecedor.toISOString() : <any>undefined;
        data["dataEntregaClassificacaoContabil"] = this.dataEntregaClassificacaoContabil ? this.dataEntregaClassificacaoContabil.toISOString() : <any>undefined;
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        data["usuarioCriacaoId"] = this.usuarioCriacaoId;
        if (Array.isArray(this.declaracaoTrabalhoSituacoes)) {
            data["declaracaoTrabalhoSituacoes"] = [];
            for (let item of this.declaracaoTrabalhoSituacoes)
                data["declaracaoTrabalhoSituacoes"].push(item.toJSON());
        }
        data["permissaoUsuarioLogado"] = this.permissaoUsuarioLogado;
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDeclaracaoTrabalhoVm {
    id?: number;
    departamentoId?: number;
    departamentoNome?: string | undefined;
    preProjetoId?: number | undefined;
    preProjetoNome?: string | undefined;
    projetoNome?: string | undefined;
    projetoPlurianualId?: number | undefined;
    projetoPlurianualNome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoCorresponsavelVm[] | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    anexos?: DeclaracaoTrabalhoAnexoVm[] | undefined;
    viavelTecnicamente?: boolean | undefined;
    parecerTecnico?: string | undefined;
    periodoExecucaoSolucao?: string | undefined;
    orcamentos?: DeclaracaoTrabalhoOrcamentoVm[] | undefined;
    situacao?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDescricao?: string | undefined;
    consideracoes?: string | undefined;
    totalOrcamento?: number;
    totalDespesaAdministrativa?: number;
    totalCustoAssistencial?: number;
    totalInvestimento?: number;
    dataEntregaFornecedor?: Date | undefined;
    dataEntregaClassificacaoContabil?: Date | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    usuarioCriacaoId?: string | undefined;
    declaracaoTrabalhoSituacoes?: DTSituacaoVm[] | undefined;
    permissaoUsuarioLogado?: PermissaoAcessoDeclaracaoTrabalhoTipo | undefined;
    dataCriacao?: Date;
}

export class DeclaracaoTrabalhoCorresponsavelVm implements IDeclaracaoTrabalhoCorresponsavelVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;

    constructor(data?: IDeclaracaoTrabalhoCorresponsavelVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoCorresponsavelVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoCorresponsavelVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IDeclaracaoTrabalhoCorresponsavelVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
}

export class DeclaracaoTrabalhoAnexoVm implements IDeclaracaoTrabalhoAnexoVm {
    id?: number;
    nomeArquivo?: string | undefined;
    tipo?: DeclaracaoTrabalhoTipoAnexo;
    tipoDescricao?: string | undefined;

    constructor(data?: IDeclaracaoTrabalhoAnexoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nomeArquivo = _data["nomeArquivo"];
            this.tipo = _data["tipo"];
            this.tipoDescricao = _data["tipoDescricao"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAnexoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAnexoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nomeArquivo"] = this.nomeArquivo;
        data["tipo"] = this.tipo;
        data["tipoDescricao"] = this.tipoDescricao;
        return data;
    }
}

export interface IDeclaracaoTrabalhoAnexoVm {
    id?: number;
    nomeArquivo?: string | undefined;
    tipo?: DeclaracaoTrabalhoTipoAnexo;
    tipoDescricao?: string | undefined;
}

export class DeclaracaoTrabalhoOrcamentoVm implements IDeclaracaoTrabalhoOrcamentoVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoOrcamentoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoOrcamentoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoOrcamentoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        return data;
    }
}

export interface IDeclaracaoTrabalhoOrcamentoVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
}

export class DTSituacaoVm implements IDTSituacaoVm {
    data?: Date;
    situacao?: DeclaracaoTrabalhoSituacao;
    situacaoDescricao?: string | undefined;
    situacaoAnterior?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoAnteriorDescricao?: string | undefined;
    mensagem?: string | undefined;

    constructor(data?: IDTSituacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.situacaoAnterior = _data["situacaoAnterior"];
            this.situacaoAnteriorDescricao = _data["situacaoAnteriorDescricao"];
            this.mensagem = _data["mensagem"];
        }
    }

    static fromJS(data: any): DTSituacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DTSituacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["situacaoAnterior"] = this.situacaoAnterior;
        data["situacaoAnteriorDescricao"] = this.situacaoAnteriorDescricao;
        data["mensagem"] = this.mensagem;
        return data;
    }
}

export interface IDTSituacaoVm {
    data?: Date;
    situacao?: DeclaracaoTrabalhoSituacao;
    situacaoDescricao?: string | undefined;
    situacaoAnterior?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoAnteriorDescricao?: string | undefined;
    mensagem?: string | undefined;
}

export enum PermissaoAcessoDeclaracaoTrabalhoTipo {
    Visualizar = 0,
    AcessoTotal = 1,
}

export class AreaEnvolvidaVm implements IAreaEnvolvidaVm {
    id?: number;
    departamentoId?: number;
    nome?: string | undefined;

    constructor(data?: IAreaEnvolvidaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departamentoId = _data["departamentoId"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): AreaEnvolvidaVm {
        data = typeof data === 'object' ? data : {};
        let result = new AreaEnvolvidaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoId"] = this.departamentoId;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IAreaEnvolvidaVm {
    id?: number;
    departamentoId?: number;
    nome?: string | undefined;
}

export class PreProjetoOrcamentoVm implements IPreProjetoOrcamentoVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
    situacao?: SituacaoPreProjetoOrcamento;
    situacaoDescricao?: string | undefined;
    situacaoDt?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDtDescricao?: string | undefined;

    constructor(data?: IPreProjetoOrcamentoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.situacaoDt = _data["situacaoDt"];
            this.situacaoDtDescricao = _data["situacaoDtDescricao"];
        }
    }

    static fromJS(data: any): PreProjetoOrcamentoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoOrcamentoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["situacaoDt"] = this.situacaoDt;
        data["situacaoDtDescricao"] = this.situacaoDtDescricao;
        return data;
    }
}

export interface IPreProjetoOrcamentoVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
    situacao?: SituacaoPreProjetoOrcamento;
    situacaoDescricao?: string | undefined;
    situacaoDt?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDtDescricao?: string | undefined;
}

export class PreProjetoSituacaoVm implements IPreProjetoSituacaoVm {
    data?: Date;
    situacao?: SituacaoPreProjeto;
    situacaoDescricao?: string | undefined;
    situacaoAnterior?: SituacaoPreProjeto | undefined;
    situacaoAnteriorDescricao?: string | undefined;
    mensagem?: string | undefined;

    constructor(data?: IPreProjetoSituacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.situacaoAnterior = _data["situacaoAnterior"];
            this.situacaoAnteriorDescricao = _data["situacaoAnteriorDescricao"];
            this.mensagem = _data["mensagem"];
        }
    }

    static fromJS(data: any): PreProjetoSituacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoSituacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["situacaoAnterior"] = this.situacaoAnterior;
        data["situacaoAnteriorDescricao"] = this.situacaoAnteriorDescricao;
        data["mensagem"] = this.mensagem;
        return data;
    }
}

export interface IPreProjetoSituacaoVm {
    data?: Date;
    situacao?: SituacaoPreProjeto;
    situacaoDescricao?: string | undefined;
    situacaoAnterior?: SituacaoPreProjeto | undefined;
    situacaoAnteriorDescricao?: string | undefined;
    mensagem?: string | undefined;
}

export enum PermissaoAcessoPreProjetoTipo {
    Visualizar = 0,
    AcessoTotal = 1,
}

export class ObjetivoEstrategicoPreProjetoVm implements IObjetivoEstrategicoPreProjetoVm {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: IObjetivoEstrategicoPreProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): ObjetivoEstrategicoPreProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ObjetivoEstrategicoPreProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IObjetivoEstrategicoPreProjetoVm {
    id?: number;
    descricao?: string | undefined;
}

export class PlanoAcaoVm implements IPlanoAcaoVm {
    id?: number;
    descricao?: string | undefined;
    departamentoId?: number;
    departamentoNome?: string | undefined;
    data?: Date;
    observacao?: string | undefined;
    followUp?: FollowUp;
    followUpDescricao?: string | undefined;
    projetoId?: number;

    constructor(data?: IPlanoAcaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.departamentoId = _data["departamentoId"];
            this.departamentoNome = _data["departamentoNome"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.observacao = _data["observacao"];
            this.followUp = _data["followUp"];
            this.followUpDescricao = _data["followUpDescricao"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): PlanoAcaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PlanoAcaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["departamentoId"] = this.departamentoId;
        data["departamentoNome"] = this.departamentoNome;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["observacao"] = this.observacao;
        data["followUp"] = this.followUp;
        data["followUpDescricao"] = this.followUpDescricao;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IPlanoAcaoVm {
    id?: number;
    descricao?: string | undefined;
    departamentoId?: number;
    departamentoNome?: string | undefined;
    data?: Date;
    observacao?: string | undefined;
    followUp?: FollowUp;
    followUpDescricao?: string | undefined;
    projetoId?: number;
}

export enum FollowUp {
    Realizado = 0,
    EmAndamento = 1,
    Atrasado = 2,
    Cancelado = 3,
}

export class ProjetoPlurianualVm implements IProjetoPlurianualVm {
    id?: number;
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    departamentoResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoSponsor?: string | undefined;
    departamentoId?: number | undefined;
    departamentoNome?: string | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    situacao?: SituacaoProjetoPlurianual;
    situacaoDescricao?: string | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalhoVm[] | undefined;
    orcamentos?: ProjetoPlurianualOrcamentoVm[] | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    dataCriacao?: Date;
    valorOrcado?: number;
    valorRealizado?: number;
    valorSaldo?: number;
    anexos?: ProjetoPlurianualAnexoVm[] | undefined;
    projetoSituacoes?: ProjetoPlurianualSituacaoVm[] | undefined;
    portifolioId?: number | undefined;
    cestaId?: number | undefined;
    observacao?: string | undefined;
    anoReferencia?: number;
    projetoId?: number | undefined;
    tipo?: TipoPreProjeto;
    projetoStatus?: StatusProjeto | undefined;
    projetoStatusDescricao?: string | undefined;
    projetoCronogramaStatus?: StatusCronograma | undefined;
    projetoCronogramaStatusDescricao?: string | undefined;
    projetoCronogramaRevisado?: number | undefined;
    projetoCronogramaRealizado?: number | undefined;
    projetoCronogramaData?: Date | undefined;
    planosAcoes?: PlanoAcaoVm[] | undefined;

    constructor(data?: IProjetoPlurianualVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.departamentoResponsavel = _data["departamentoResponsavel"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.departamentoSponsor = _data["departamentoSponsor"];
            this.departamentoId = _data["departamentoId"];
            this.departamentoNome = _data["departamentoNome"];
            this.escopoAnoSeguinte = _data["escopoAnoSeguinte"];
            this.prazoExecucaoInicial = _data["prazoExecucaoInicial"] ? new Date(_data["prazoExecucaoInicial"].toString()) : <any>undefined;
            this.prazoExecucaoFinal = _data["prazoExecucaoFinal"] ? new Date(_data["prazoExecucaoFinal"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            if (Array.isArray(_data["declaracoesTrabalho"])) {
                this.declaracoesTrabalho = [] as any;
                for (let item of _data["declaracoesTrabalho"])
                    this.declaracoesTrabalho!.push(DeclaracaoTrabalhoVm.fromJS(item));
            }
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(ProjetoPlurianualOrcamentoVm.fromJS(item));
            }
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
            this.valorOrcado = _data["valorOrcado"];
            this.valorRealizado = _data["valorRealizado"];
            this.valorSaldo = _data["valorSaldo"];
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(ProjetoPlurianualAnexoVm.fromJS(item));
            }
            if (Array.isArray(_data["projetoSituacoes"])) {
                this.projetoSituacoes = [] as any;
                for (let item of _data["projetoSituacoes"])
                    this.projetoSituacoes!.push(ProjetoPlurianualSituacaoVm.fromJS(item));
            }
            this.portifolioId = _data["portifolioId"];
            this.cestaId = _data["cestaId"];
            this.observacao = _data["observacao"];
            this.anoReferencia = _data["anoReferencia"];
            this.projetoId = _data["projetoId"];
            this.tipo = _data["tipo"];
            this.projetoStatus = _data["projetoStatus"];
            this.projetoStatusDescricao = _data["projetoStatusDescricao"];
            this.projetoCronogramaStatus = _data["projetoCronogramaStatus"];
            this.projetoCronogramaStatusDescricao = _data["projetoCronogramaStatusDescricao"];
            this.projetoCronogramaRevisado = _data["projetoCronogramaRevisado"];
            this.projetoCronogramaRealizado = _data["projetoCronogramaRealizado"];
            this.projetoCronogramaData = _data["projetoCronogramaData"] ? new Date(_data["projetoCronogramaData"].toString()) : <any>undefined;
            if (Array.isArray(_data["planosAcoes"])) {
                this.planosAcoes = [] as any;
                for (let item of _data["planosAcoes"])
                    this.planosAcoes!.push(PlanoAcaoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjetoPlurianualVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["departamentoResponsavel"] = this.departamentoResponsavel;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["departamentoSponsor"] = this.departamentoSponsor;
        data["departamentoId"] = this.departamentoId;
        data["departamentoNome"] = this.departamentoNome;
        data["escopoAnoSeguinte"] = this.escopoAnoSeguinte;
        data["prazoExecucaoInicial"] = this.prazoExecucaoInicial ? this.prazoExecucaoInicial.toISOString() : <any>undefined;
        data["prazoExecucaoFinal"] = this.prazoExecucaoFinal ? this.prazoExecucaoFinal.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        if (Array.isArray(this.declaracoesTrabalho)) {
            data["declaracoesTrabalho"] = [];
            for (let item of this.declaracoesTrabalho)
                data["declaracoesTrabalho"].push(item.toJSON());
        }
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        data["valorOrcado"] = this.valorOrcado;
        data["valorRealizado"] = this.valorRealizado;
        data["valorSaldo"] = this.valorSaldo;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        if (Array.isArray(this.projetoSituacoes)) {
            data["projetoSituacoes"] = [];
            for (let item of this.projetoSituacoes)
                data["projetoSituacoes"].push(item.toJSON());
        }
        data["portifolioId"] = this.portifolioId;
        data["cestaId"] = this.cestaId;
        data["observacao"] = this.observacao;
        data["anoReferencia"] = this.anoReferencia;
        data["projetoId"] = this.projetoId;
        data["tipo"] = this.tipo;
        data["projetoStatus"] = this.projetoStatus;
        data["projetoStatusDescricao"] = this.projetoStatusDescricao;
        data["projetoCronogramaStatus"] = this.projetoCronogramaStatus;
        data["projetoCronogramaStatusDescricao"] = this.projetoCronogramaStatusDescricao;
        data["projetoCronogramaRevisado"] = this.projetoCronogramaRevisado;
        data["projetoCronogramaRealizado"] = this.projetoCronogramaRealizado;
        data["projetoCronogramaData"] = this.projetoCronogramaData ? this.projetoCronogramaData.toISOString() : <any>undefined;
        if (Array.isArray(this.planosAcoes)) {
            data["planosAcoes"] = [];
            for (let item of this.planosAcoes)
                data["planosAcoes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProjetoPlurianualVm {
    id?: number;
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    departamentoResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoSponsor?: string | undefined;
    departamentoId?: number | undefined;
    departamentoNome?: string | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    situacao?: SituacaoProjetoPlurianual;
    situacaoDescricao?: string | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalhoVm[] | undefined;
    orcamentos?: ProjetoPlurianualOrcamentoVm[] | undefined;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    dataCriacao?: Date;
    valorOrcado?: number;
    valorRealizado?: number;
    valorSaldo?: number;
    anexos?: ProjetoPlurianualAnexoVm[] | undefined;
    projetoSituacoes?: ProjetoPlurianualSituacaoVm[] | undefined;
    portifolioId?: number | undefined;
    cestaId?: number | undefined;
    observacao?: string | undefined;
    anoReferencia?: number;
    projetoId?: number | undefined;
    tipo?: TipoPreProjeto;
    projetoStatus?: StatusProjeto | undefined;
    projetoStatusDescricao?: string | undefined;
    projetoCronogramaStatus?: StatusCronograma | undefined;
    projetoCronogramaStatusDescricao?: string | undefined;
    projetoCronogramaRevisado?: number | undefined;
    projetoCronogramaRealizado?: number | undefined;
    projetoCronogramaData?: Date | undefined;
    planosAcoes?: PlanoAcaoVm[] | undefined;
}

export class ProjetoPlurianualOrcamentoVm implements IProjetoPlurianualOrcamentoVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
    situacao?: SituacaoProjetoPlurianualOrcamento;
    situacaoDescricao?: string | undefined;
    situacaoDt?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDtDescricao?: string | undefined;

    constructor(data?: IProjetoPlurianualOrcamentoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.situacaoDt = _data["situacaoDt"];
            this.situacaoDtDescricao = _data["situacaoDtDescricao"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualOrcamentoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualOrcamentoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["situacaoDt"] = this.situacaoDt;
        data["situacaoDtDescricao"] = this.situacaoDtDescricao;
        return data;
    }
}

export interface IProjetoPlurianualOrcamentoVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
    situacao?: SituacaoProjetoPlurianualOrcamento;
    situacaoDescricao?: string | undefined;
    situacaoDt?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDtDescricao?: string | undefined;
}

export class ProjetoPlurianualAnexoVm implements IProjetoPlurianualAnexoVm {
    id?: number;
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;

    constructor(data?: IProjetoPlurianualAnexoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nomeArquivo = _data["nomeArquivo"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualAnexoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualAnexoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nomeArquivo"] = this.nomeArquivo;
        data["tipoArquivo"] = this.tipoArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        return data;
    }
}

export interface IProjetoPlurianualAnexoVm {
    id?: number;
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
}

export class ProjetoPlurianualSituacaoVm implements IProjetoPlurianualSituacaoVm {
    data?: Date;
    situacao?: SituacaoProjetoPlurianual;
    situacaoDescricao?: string | undefined;
    situacaoAnterior?: SituacaoProjetoPlurianual | undefined;
    situacaoAnteriorDescricao?: string | undefined;
    mensagem?: string | undefined;

    constructor(data?: IProjetoPlurianualSituacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.situacaoAnterior = _data["situacaoAnterior"];
            this.situacaoAnteriorDescricao = _data["situacaoAnteriorDescricao"];
            this.mensagem = _data["mensagem"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualSituacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualSituacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["situacaoAnterior"] = this.situacaoAnterior;
        data["situacaoAnteriorDescricao"] = this.situacaoAnteriorDescricao;
        data["mensagem"] = this.mensagem;
        return data;
    }
}

export interface IProjetoPlurianualSituacaoVm {
    data?: Date;
    situacao?: SituacaoProjetoPlurianual;
    situacaoDescricao?: string | undefined;
    situacaoAnterior?: SituacaoProjetoPlurianual | undefined;
    situacaoAnteriorDescricao?: string | undefined;
    mensagem?: string | undefined;
}

export class PaginatedListOfCestaRasaVm implements IPaginatedListOfCestaRasaVm {
    items?: CestaRasaVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfCestaRasaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CestaRasaVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfCestaRasaVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfCestaRasaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfCestaRasaVm {
    items?: CestaRasaVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class CestaRasaVm implements ICestaRasaVm {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: ICestaRasaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): CestaRasaVm {
        data = typeof data === 'object' ? data : {};
        let result = new CestaRasaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface ICestaRasaVm {
    id?: number;
    descricao?: string | undefined;
}

export class CestaExcluirCommand implements ICestaExcluirCommand {
    id?: number;

    constructor(data?: ICestaExcluirCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CestaExcluirCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CestaExcluirCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICestaExcluirCommand {
    id?: number;
}

export class ProjetoSelecaoPortifolioVm implements IProjetoSelecaoPortifolioVm {
    id?: number;
    nome?: string | undefined;
    plurianual?: boolean;

    constructor(data?: IProjetoSelecaoPortifolioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.plurianual = _data["plurianual"];
        }
    }

    static fromJS(data: any): ProjetoSelecaoPortifolioVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoSelecaoPortifolioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["plurianual"] = this.plurianual;
        return data;
    }
}

export interface IProjetoSelecaoPortifolioVm {
    id?: number;
    nome?: string | undefined;
    plurianual?: boolean;
}

export class CestaIncluirPreProjetoProjetoOuPlurianualCommand implements ICestaIncluirPreProjetoProjetoOuPlurianualCommand {
    cestaId?: number | undefined;
    itens?: CestaIncluirPreProjetoProjetoOuPlurianualDto[] | undefined;

    constructor(data?: ICestaIncluirPreProjetoProjetoOuPlurianualCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cestaId = _data["cestaId"];
            if (Array.isArray(_data["itens"])) {
                this.itens = [] as any;
                for (let item of _data["itens"])
                    this.itens!.push(CestaIncluirPreProjetoProjetoOuPlurianualDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CestaIncluirPreProjetoProjetoOuPlurianualCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CestaIncluirPreProjetoProjetoOuPlurianualCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cestaId"] = this.cestaId;
        if (Array.isArray(this.itens)) {
            data["itens"] = [];
            for (let item of this.itens)
                data["itens"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICestaIncluirPreProjetoProjetoOuPlurianualCommand {
    cestaId?: number | undefined;
    itens?: CestaIncluirPreProjetoProjetoOuPlurianualDto[] | undefined;
}

export class CestaIncluirPreProjetoProjetoOuPlurianualDto implements ICestaIncluirPreProjetoProjetoOuPlurianualDto {
    id?: number;
    plurianual?: boolean;

    constructor(data?: ICestaIncluirPreProjetoProjetoOuPlurianualDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.plurianual = _data["plurianual"];
        }
    }

    static fromJS(data: any): CestaIncluirPreProjetoProjetoOuPlurianualDto {
        data = typeof data === 'object' ? data : {};
        let result = new CestaIncluirPreProjetoProjetoOuPlurianualDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["plurianual"] = this.plurianual;
        return data;
    }
}

export interface ICestaIncluirPreProjetoProjetoOuPlurianualDto {
    id?: number;
    plurianual?: boolean;
}

export class PaginatedListOfCronogramaVm implements IPaginatedListOfCronogramaVm {
    items?: CronogramaVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfCronogramaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CronogramaVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfCronogramaVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfCronogramaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfCronogramaVm {
    items?: CronogramaVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class CronogramaVm implements ICronogramaVm {
    id?: number;
    base?: number;
    revisado?: number;
    realizado?: number;
    data?: Date;
    dataStatus?: Date;
    baseline?: number;
    projetoId?: number;
    importado?: boolean;
    tarefas?: TarefaVm[] | undefined;
    status?: StatusCronograma;
    statusDescricao?: string | undefined;

    constructor(data?: ICronogramaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.base = _data["base"];
            this.revisado = _data["revisado"];
            this.realizado = _data["realizado"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.dataStatus = _data["dataStatus"] ? new Date(_data["dataStatus"].toString()) : <any>undefined;
            this.baseline = _data["baseline"];
            this.projetoId = _data["projetoId"];
            this.importado = _data["importado"];
            if (Array.isArray(_data["tarefas"])) {
                this.tarefas = [] as any;
                for (let item of _data["tarefas"])
                    this.tarefas!.push(TarefaVm.fromJS(item));
            }
            this.status = _data["status"];
            this.statusDescricao = _data["statusDescricao"];
        }
    }

    static fromJS(data: any): CronogramaVm {
        data = typeof data === 'object' ? data : {};
        let result = new CronogramaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["base"] = this.base;
        data["revisado"] = this.revisado;
        data["realizado"] = this.realizado;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["dataStatus"] = this.dataStatus ? this.dataStatus.toISOString() : <any>undefined;
        data["baseline"] = this.baseline;
        data["projetoId"] = this.projetoId;
        data["importado"] = this.importado;
        if (Array.isArray(this.tarefas)) {
            data["tarefas"] = [];
            for (let item of this.tarefas)
                data["tarefas"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["statusDescricao"] = this.statusDescricao;
        return data;
    }
}

export interface ICronogramaVm {
    id?: number;
    base?: number;
    revisado?: number;
    realizado?: number;
    data?: Date;
    dataStatus?: Date;
    baseline?: number;
    projetoId?: number;
    importado?: boolean;
    tarefas?: TarefaVm[] | undefined;
    status?: StatusCronograma;
    statusDescricao?: string | undefined;
}

export class TarefaVm implements ITarefaVm {
    id?: string | undefined;
    nome?: string | undefined;
    inicio?: Date | undefined;
    fim?: Date | undefined;
    duracaoDias?: number;
    duracaoHoras?: number;
    predecessorId?: string | undefined;
    tarefaPaiId?: string | undefined;
    percentualEsperado?: number | undefined;
    percentualCompletado?: number | undefined;
    prioridade?: number | undefined;
    horasTrabalho?: number | undefined;
    projetoId?: number;

    constructor(data?: ITarefaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.inicio = _data["inicio"] ? new Date(_data["inicio"].toString()) : <any>undefined;
            this.fim = _data["fim"] ? new Date(_data["fim"].toString()) : <any>undefined;
            this.duracaoDias = _data["duracaoDias"];
            this.duracaoHoras = _data["duracaoHoras"];
            this.predecessorId = _data["predecessorId"];
            this.tarefaPaiId = _data["tarefaPaiId"];
            this.percentualEsperado = _data["percentualEsperado"];
            this.percentualCompletado = _data["percentualCompletado"];
            this.prioridade = _data["prioridade"];
            this.horasTrabalho = _data["horasTrabalho"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): TarefaVm {
        data = typeof data === 'object' ? data : {};
        let result = new TarefaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["inicio"] = this.inicio ? this.inicio.toISOString() : <any>undefined;
        data["fim"] = this.fim ? this.fim.toISOString() : <any>undefined;
        data["duracaoDias"] = this.duracaoDias;
        data["duracaoHoras"] = this.duracaoHoras;
        data["predecessorId"] = this.predecessorId;
        data["tarefaPaiId"] = this.tarefaPaiId;
        data["percentualEsperado"] = this.percentualEsperado;
        data["percentualCompletado"] = this.percentualCompletado;
        data["prioridade"] = this.prioridade;
        data["horasTrabalho"] = this.horasTrabalho;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface ITarefaVm {
    id?: string | undefined;
    nome?: string | undefined;
    inicio?: Date | undefined;
    fim?: Date | undefined;
    duracaoDias?: number;
    duracaoHoras?: number;
    predecessorId?: string | undefined;
    tarefaPaiId?: string | undefined;
    percentualEsperado?: number | undefined;
    percentualCompletado?: number | undefined;
    prioridade?: number | undefined;
    horasTrabalho?: number | undefined;
    projetoId?: number;
}

export class CronogramaObterPorProjetoQuery extends QueryRequestBase implements ICronogramaObterPorProjetoQuery {
    projetoId?: number;
    ano?: number | undefined;

    constructor(data?: ICronogramaObterPorProjetoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.ano = _data["ano"];
        }
    }

    static fromJS(data: any): CronogramaObterPorProjetoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new CronogramaObterPorProjetoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["ano"] = this.ano;
        super.toJSON(data);
        return data;
    }
}

export interface ICronogramaObterPorProjetoQuery extends IQueryRequestBase {
    projetoId?: number;
    ano?: number | undefined;
}

export class CronogramaCriarCommand implements ICronogramaCriarCommand {
    base?: number | undefined;
    baseline?: number;
    revisado?: number;
    realizado?: number;
    dataStatus?: Date;
    projetoId?: number;

    constructor(data?: ICronogramaCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.base = _data["base"];
            this.baseline = _data["baseline"];
            this.revisado = _data["revisado"];
            this.realizado = _data["realizado"];
            this.dataStatus = _data["dataStatus"] ? new Date(_data["dataStatus"].toString()) : <any>undefined;
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): CronogramaCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CronogramaCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["base"] = this.base;
        data["baseline"] = this.baseline;
        data["revisado"] = this.revisado;
        data["realizado"] = this.realizado;
        data["dataStatus"] = this.dataStatus ? this.dataStatus.toISOString() : <any>undefined;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface ICronogramaCriarCommand {
    base?: number | undefined;
    baseline?: number;
    revisado?: number;
    realizado?: number;
    dataStatus?: Date;
    projetoId?: number;
}

export class CronogramaAlterarCommand implements ICronogramaAlterarCommand {
    id?: number;
    base?: number | undefined;
    revisado?: number;
    realizado?: number;
    dataStatus?: Date;

    constructor(data?: ICronogramaAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.base = _data["base"];
            this.revisado = _data["revisado"];
            this.realizado = _data["realizado"];
            this.dataStatus = _data["dataStatus"] ? new Date(_data["dataStatus"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CronogramaAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CronogramaAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["base"] = this.base;
        data["revisado"] = this.revisado;
        data["realizado"] = this.realizado;
        data["dataStatus"] = this.dataStatus ? this.dataStatus.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICronogramaAlterarCommand {
    id?: number;
    base?: number | undefined;
    revisado?: number;
    realizado?: number;
    dataStatus?: Date;
}

export class CronogramaImportarCommand implements ICronogramaImportarCommand {
    projetoId?: number;
    base64file?: string | undefined;
    novoBaseline?: boolean | undefined;

    constructor(data?: ICronogramaImportarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.base64file = _data["base64file"];
            this.novoBaseline = _data["novoBaseline"];
        }
    }

    static fromJS(data: any): CronogramaImportarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CronogramaImportarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["base64file"] = this.base64file;
        data["novoBaseline"] = this.novoBaseline;
        return data;
    }
}

export interface ICronogramaImportarCommand {
    projetoId?: number;
    base64file?: string | undefined;
    novoBaseline?: boolean | undefined;
}

export class CronogramaVisualizarImportacaoCommand implements ICronogramaVisualizarImportacaoCommand {
    projetoId?: number;
    base64file?: string | undefined;
    novoBaseline?: boolean | undefined;

    constructor(data?: ICronogramaVisualizarImportacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.base64file = _data["base64file"];
            this.novoBaseline = _data["novoBaseline"];
        }
    }

    static fromJS(data: any): CronogramaVisualizarImportacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CronogramaVisualizarImportacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["base64file"] = this.base64file;
        data["novoBaseline"] = this.novoBaseline;
        return data;
    }
}

export interface ICronogramaVisualizarImportacaoCommand {
    projetoId?: number;
    base64file?: string | undefined;
    novoBaseline?: boolean | undefined;
}

export class PaginatedListOfDeclaracaoTrabalhoVm implements IPaginatedListOfDeclaracaoTrabalhoVm {
    items?: DeclaracaoTrabalhoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfDeclaracaoTrabalhoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeclaracaoTrabalhoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfDeclaracaoTrabalhoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfDeclaracaoTrabalhoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfDeclaracaoTrabalhoVm {
    items?: DeclaracaoTrabalhoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class DeclaracaoTrabalhoObterQuery extends QueryRequestBase implements IDeclaracaoTrabalhoObterQuery {
    id?: number | undefined;
    departamentoId?: number | undefined;
    projetoNome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    situacao?: DeclaracaoTrabalhoSituacao | undefined;

    constructor(data?: IDeclaracaoTrabalhoObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.departamentoId = _data["departamentoId"];
            this.projetoNome = _data["projetoNome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoId"] = this.departamentoId;
        data["projetoNome"] = this.projetoNome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["situacao"] = this.situacao;
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalhoObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    departamentoId?: number | undefined;
    projetoNome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    situacao?: DeclaracaoTrabalhoSituacao | undefined;
}

export class DeclaracaoTrabalhoCriarCommand implements IDeclaracaoTrabalhoCriarCommand {
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
    departamentoId?: number;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoResponsavelCriarDto[] | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    anexos?: DeclaracaoTrabalhoAnexoCriarDto[] | undefined;
    enviarFornecedor?: boolean | undefined;

    constructor(data?: IDeclaracaoTrabalhoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preProjetoId = _data["preProjetoId"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.departamentoId = _data["departamentoId"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            if (Array.isArray(_data["corresponsaveis"])) {
                this.corresponsaveis = [] as any;
                for (let item of _data["corresponsaveis"])
                    this.corresponsaveis!.push(DeclaracaoTrabalhoResponsavelCriarDto.fromJS(item));
            }
            this.problemaIdentificado = _data["problemaIdentificado"];
            this.solucaoProposta = _data["solucaoProposta"];
            this.requisitosEspecificacoesDesejadas = _data["requisitosEspecificacoesDesejadas"];
            this.requisitosEspecificacoesFundamentais = _data["requisitosEspecificacoesFundamentais"];
            this.prazoEsperadoExecucaoSolucao = _data["prazoEsperadoExecucaoSolucao"] ? new Date(_data["prazoEsperadoExecucaoSolucao"].toString()) : <any>undefined;
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(DeclaracaoTrabalhoAnexoCriarDto.fromJS(item));
            }
            this.enviarFornecedor = _data["enviarFornecedor"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preProjetoId"] = this.preProjetoId;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["departamentoId"] = this.departamentoId;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        if (Array.isArray(this.corresponsaveis)) {
            data["corresponsaveis"] = [];
            for (let item of this.corresponsaveis)
                data["corresponsaveis"].push(item.toJSON());
        }
        data["problemaIdentificado"] = this.problemaIdentificado;
        data["solucaoProposta"] = this.solucaoProposta;
        data["requisitosEspecificacoesDesejadas"] = this.requisitosEspecificacoesDesejadas;
        data["requisitosEspecificacoesFundamentais"] = this.requisitosEspecificacoesFundamentais;
        data["prazoEsperadoExecucaoSolucao"] = this.prazoEsperadoExecucaoSolucao ? this.prazoEsperadoExecucaoSolucao.toISOString() : <any>undefined;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        data["enviarFornecedor"] = this.enviarFornecedor;
        return data;
    }
}

export interface IDeclaracaoTrabalhoCriarCommand {
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
    departamentoId?: number;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoResponsavelCriarDto[] | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    anexos?: DeclaracaoTrabalhoAnexoCriarDto[] | undefined;
    enviarFornecedor?: boolean | undefined;
}

export class DeclaracaoTrabalhoResponsavelCriarDto implements IDeclaracaoTrabalhoResponsavelCriarDto {
    login?: string | undefined;
    nome?: string | undefined;

    constructor(data?: IDeclaracaoTrabalhoResponsavelCriarDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoResponsavelCriarDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoResponsavelCriarDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IDeclaracaoTrabalhoResponsavelCriarDto {
    login?: string | undefined;
    nome?: string | undefined;
}

export class DeclaracaoTrabalhoAnexoCriarDto implements IDeclaracaoTrabalhoAnexoCriarDto {
    nomeArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
    declaracaoTrabalhoId?: number | undefined;
    tipo?: DeclaracaoTrabalhoTipoAnexo;

    constructor(data?: IDeclaracaoTrabalhoAnexoCriarDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomeArquivo = _data["nomeArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAnexoCriarDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAnexoCriarDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeArquivo"] = this.nomeArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["tipo"] = this.tipo;
        return data;
    }
}

export interface IDeclaracaoTrabalhoAnexoCriarDto {
    nomeArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
    declaracaoTrabalhoId?: number | undefined;
    tipo?: DeclaracaoTrabalhoTipoAnexo;
}

export class DeclaracaoTrabalhoAlterarCommand implements IDeclaracaoTrabalhoAlterarCommand {
    id?: number;
    departamentoId?: number;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    viavelTecnicamente?: boolean | undefined;
    parecerTecnico?: string | undefined;
    periodoExecucaoSolucao?: string | undefined;
    consideracoes?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoResponsavelCriarDto[] | undefined;
    dataEntregaFornecedor?: Date | undefined;
    dataEntregaClassificacaoContabil?: Date | undefined;
    enviarFornecedor?: boolean | undefined;

    constructor(data?: IDeclaracaoTrabalhoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departamentoId = _data["departamentoId"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.problemaIdentificado = _data["problemaIdentificado"];
            this.solucaoProposta = _data["solucaoProposta"];
            this.requisitosEspecificacoesDesejadas = _data["requisitosEspecificacoesDesejadas"];
            this.requisitosEspecificacoesFundamentais = _data["requisitosEspecificacoesFundamentais"];
            this.prazoEsperadoExecucaoSolucao = _data["prazoEsperadoExecucaoSolucao"] ? new Date(_data["prazoEsperadoExecucaoSolucao"].toString()) : <any>undefined;
            this.viavelTecnicamente = _data["viavelTecnicamente"];
            this.parecerTecnico = _data["parecerTecnico"];
            this.periodoExecucaoSolucao = _data["periodoExecucaoSolucao"];
            this.consideracoes = _data["consideracoes"];
            if (Array.isArray(_data["corresponsaveis"])) {
                this.corresponsaveis = [] as any;
                for (let item of _data["corresponsaveis"])
                    this.corresponsaveis!.push(DeclaracaoTrabalhoResponsavelCriarDto.fromJS(item));
            }
            this.dataEntregaFornecedor = _data["dataEntregaFornecedor"] ? new Date(_data["dataEntregaFornecedor"].toString()) : <any>undefined;
            this.dataEntregaClassificacaoContabil = _data["dataEntregaClassificacaoContabil"] ? new Date(_data["dataEntregaClassificacaoContabil"].toString()) : <any>undefined;
            this.enviarFornecedor = _data["enviarFornecedor"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoId"] = this.departamentoId;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["problemaIdentificado"] = this.problemaIdentificado;
        data["solucaoProposta"] = this.solucaoProposta;
        data["requisitosEspecificacoesDesejadas"] = this.requisitosEspecificacoesDesejadas;
        data["requisitosEspecificacoesFundamentais"] = this.requisitosEspecificacoesFundamentais;
        data["prazoEsperadoExecucaoSolucao"] = this.prazoEsperadoExecucaoSolucao ? this.prazoEsperadoExecucaoSolucao.toISOString() : <any>undefined;
        data["viavelTecnicamente"] = this.viavelTecnicamente;
        data["parecerTecnico"] = this.parecerTecnico;
        data["periodoExecucaoSolucao"] = this.periodoExecucaoSolucao;
        data["consideracoes"] = this.consideracoes;
        if (Array.isArray(this.corresponsaveis)) {
            data["corresponsaveis"] = [];
            for (let item of this.corresponsaveis)
                data["corresponsaveis"].push(item.toJSON());
        }
        data["dataEntregaFornecedor"] = this.dataEntregaFornecedor ? this.dataEntregaFornecedor.toISOString() : <any>undefined;
        data["dataEntregaClassificacaoContabil"] = this.dataEntregaClassificacaoContabil ? this.dataEntregaClassificacaoContabil.toISOString() : <any>undefined;
        data["enviarFornecedor"] = this.enviarFornecedor;
        return data;
    }
}

export interface IDeclaracaoTrabalhoAlterarCommand {
    id?: number;
    departamentoId?: number;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    problemaIdentificado?: string | undefined;
    solucaoProposta?: string | undefined;
    requisitosEspecificacoesDesejadas?: string | undefined;
    requisitosEspecificacoesFundamentais?: string | undefined;
    prazoEsperadoExecucaoSolucao?: Date;
    viavelTecnicamente?: boolean | undefined;
    parecerTecnico?: string | undefined;
    periodoExecucaoSolucao?: string | undefined;
    consideracoes?: string | undefined;
    corresponsaveis?: DeclaracaoTrabalhoResponsavelCriarDto[] | undefined;
    dataEntregaFornecedor?: Date | undefined;
    dataEntregaClassificacaoContabil?: Date | undefined;
    enviarFornecedor?: boolean | undefined;
}

export class DeclaracaoTrabalhoCorresponsavelCriarCommand implements IDeclaracaoTrabalhoCorresponsavelCriarCommand {
    declaracaoTrabalhoId?: number;
    corresponsaveis?: DeclaracaoTrabalhoResponsavelCriarDto[] | undefined;

    constructor(data?: IDeclaracaoTrabalhoCorresponsavelCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            if (Array.isArray(_data["corresponsaveis"])) {
                this.corresponsaveis = [] as any;
                for (let item of _data["corresponsaveis"])
                    this.corresponsaveis!.push(DeclaracaoTrabalhoResponsavelCriarDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoCorresponsavelCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoCorresponsavelCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        if (Array.isArray(this.corresponsaveis)) {
            data["corresponsaveis"] = [];
            for (let item of this.corresponsaveis)
                data["corresponsaveis"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeclaracaoTrabalhoCorresponsavelCriarCommand {
    declaracaoTrabalhoId?: number;
    corresponsaveis?: DeclaracaoTrabalhoResponsavelCriarDto[] | undefined;
}

export class DeclaracaoTrabalhoOrcamentoCriarCommand implements IDeclaracaoTrabalhoOrcamentoCriarCommand {
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoOrcamentoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoOrcamentoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoOrcamentoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        return data;
    }
}

export interface IDeclaracaoTrabalhoOrcamentoCriarCommand {
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    declaracaoTrabalhoId?: number;
}

export class DeclaracaoTrabalhoOrcamentoAlterarCommand implements IDeclaracaoTrabalhoOrcamentoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoOrcamentoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoOrcamentoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoOrcamentoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        return data;
    }
}

export interface IDeclaracaoTrabalhoOrcamentoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    declaracaoTrabalhoId?: number;
}

export class DeclaracaoTrabalhoAnexoComArquivoVm extends DeclaracaoTrabalhoAnexoVm implements IDeclaracaoTrabalhoAnexoComArquivoVm {
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;

    constructor(data?: IDeclaracaoTrabalhoAnexoComArquivoVm) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tipoArquivo = _data["tipoArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAnexoComArquivoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAnexoComArquivoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tipoArquivo"] = this.tipoArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalhoAnexoComArquivoVm extends IDeclaracaoTrabalhoAnexoVm {
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
}

export class DeclaracaoTrabalhoAnexoCriarCommand implements IDeclaracaoTrabalhoAnexoCriarCommand {
    anexos?: DeclaracaoTrabalhoAnexoCriarDto[] | undefined;

    constructor(data?: IDeclaracaoTrabalhoAnexoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(DeclaracaoTrabalhoAnexoCriarDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAnexoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAnexoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeclaracaoTrabalhoAnexoCriarCommand {
    anexos?: DeclaracaoTrabalhoAnexoCriarDto[] | undefined;
}

export class DeclaracaoTrabalhoAlterarSituacaoCommand implements IDeclaracaoTrabalhoAlterarSituacaoCommand {
    declaracaoTrabalhoId?: number;
    situacao?: DeclaracaoTrabalhoSituacao;
    motivoSolicitacaoNovasInformacoes?: string | undefined;

    constructor(data?: IDeclaracaoTrabalhoAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.situacao = _data["situacao"];
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["situacao"] = this.situacao;
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        return data;
    }
}

export interface IDeclaracaoTrabalhoAlterarSituacaoCommand {
    declaracaoTrabalhoId?: number;
    situacao?: DeclaracaoTrabalhoSituacao;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
}

export class PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm implements IPaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm {
    items?: PermissaoAcessoDeclaracaoTrabalhoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PermissaoAcessoDeclaracaoTrabalhoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPermissaoAcessoDeclaracaoTrabalhoVm {
    items?: PermissaoAcessoDeclaracaoTrabalhoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PermissaoAcessoDeclaracaoTrabalhoVm implements IPermissaoAcessoDeclaracaoTrabalhoVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoDeclaracaoTrabalhoTipo;
    permissaoDescricao?: string | undefined;
    declaracaoTrabalhoId?: number;

    constructor(data?: IPermissaoAcessoDeclaracaoTrabalhoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.permissao = _data["permissao"];
            this.permissaoDescricao = _data["permissaoDescricao"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): PermissaoAcessoDeclaracaoTrabalhoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PermissaoAcessoDeclaracaoTrabalhoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["permissao"] = this.permissao;
        data["permissaoDescricao"] = this.permissaoDescricao;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        return data;
    }
}

export interface IPermissaoAcessoDeclaracaoTrabalhoVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoDeclaracaoTrabalhoTipo;
    permissaoDescricao?: string | undefined;
    declaracaoTrabalhoId?: number;
}

export class DeclaracaoTrabalhoObterPermissoesAcessoQuery extends QueryRequestBase implements IDeclaracaoTrabalhoObterPermissoesAcessoQuery {
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoObterPermissoesAcessoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoObterPermissoesAcessoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoObterPermissoesAcessoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        super.toJSON(data);
        return data;
    }
}

export interface IDeclaracaoTrabalhoObterPermissoesAcessoQuery extends IQueryRequestBase {
    declaracaoTrabalhoId?: number;
}

export class DeclaracaoTrabalhoAdicionarPermissaoAcessoCommand implements IDeclaracaoTrabalhoAdicionarPermissaoAcessoCommand {
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoDeclaracaoTrabalhoTipo;
    declaracaoTrabalhoId?: number;

    constructor(data?: IDeclaracaoTrabalhoAdicionarPermissaoAcessoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.permissao = _data["permissao"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAdicionarPermissaoAcessoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAdicionarPermissaoAcessoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["permissao"] = this.permissao;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        return data;
    }
}

export interface IDeclaracaoTrabalhoAdicionarPermissaoAcessoCommand {
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoDeclaracaoTrabalhoTipo;
    declaracaoTrabalhoId?: number;
}

export class DeclaracaoTrabalhoAlterarPermissaoAcessoCommand implements IDeclaracaoTrabalhoAlterarPermissaoAcessoCommand {
    id?: number;
    permissao?: PermissaoAcessoDeclaracaoTrabalhoTipo;

    constructor(data?: IDeclaracaoTrabalhoAlterarPermissaoAcessoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.permissao = _data["permissao"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoAlterarPermissaoAcessoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoAlterarPermissaoAcessoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["permissao"] = this.permissao;
        return data;
    }
}

export interface IDeclaracaoTrabalhoAlterarPermissaoAcessoCommand {
    id?: number;
    permissao?: PermissaoAcessoDeclaracaoTrabalhoTipo;
}

export class DeclaracaoTrabalhoExcelVm implements IDeclaracaoTrabalhoExcelVm {
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;

    constructor(data?: IDeclaracaoTrabalhoExcelVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomeArquivo = _data["nomeArquivo"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoExcelVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoExcelVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeArquivo"] = this.nomeArquivo;
        data["tipoArquivo"] = this.tipoArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        return data;
    }
}

export interface IDeclaracaoTrabalhoExcelVm {
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
}

export class ExcelVm implements IExcelVm {
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;

    constructor(data?: IExcelVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomeArquivo = _data["nomeArquivo"];
            this.tipoArquivo = _data["tipoArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
        }
    }

    static fromJS(data: any): ExcelVm {
        data = typeof data === 'object' ? data : {};
        let result = new ExcelVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeArquivo"] = this.nomeArquivo;
        data["tipoArquivo"] = this.tipoArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        return data;
    }
}

export interface IExcelVm {
    nomeArquivo?: string | undefined;
    tipoArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
}

export class PaginatedListOfSearchProjetoDto implements IPaginatedListOfSearchProjetoDto {
    items?: SearchProjetoDto[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfSearchProjetoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SearchProjetoDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfSearchProjetoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfSearchProjetoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfSearchProjetoDto {
    items?: SearchProjetoDto[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class SearchProjetoDto implements ISearchProjetoDto {
    id?: number;
    nome?: string | undefined;
    tipo?: TipoProjetoDT;
    tipoDescricao?: string | undefined;

    constructor(data?: ISearchProjetoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.tipo = _data["tipo"];
            this.tipoDescricao = _data["tipoDescricao"];
        }
    }

    static fromJS(data: any): SearchProjetoDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchProjetoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["tipo"] = this.tipo;
        data["tipoDescricao"] = this.tipoDescricao;
        return data;
    }
}

export interface ISearchProjetoDto {
    id?: number;
    nome?: string | undefined;
    tipo?: TipoProjetoDT;
    tipoDescricao?: string | undefined;
}

export enum TipoProjetoDT {
    PreProjeto = 0,
    Plurianual = 1,
}

export class SearchProjetoQuery extends QueryRequestBase implements ISearchProjetoQuery {
    nome?: string | undefined;
    situacaoPreProjeto?: SituacaoPreProjeto | undefined;
    situacaoPlurianual?: SituacaoProjetoPlurianual | undefined;

    constructor(data?: ISearchProjetoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nome = _data["nome"];
            this.situacaoPreProjeto = _data["situacaoPreProjeto"];
            this.situacaoPlurianual = _data["situacaoPlurianual"];
        }
    }

    static fromJS(data: any): SearchProjetoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchProjetoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["situacaoPreProjeto"] = this.situacaoPreProjeto;
        data["situacaoPlurianual"] = this.situacaoPlurianual;
        super.toJSON(data);
        return data;
    }
}

export interface ISearchProjetoQuery extends IQueryRequestBase {
    nome?: string | undefined;
    situacaoPreProjeto?: SituacaoPreProjeto | undefined;
    situacaoPlurianual?: SituacaoProjetoPlurianual | undefined;
}

export class RelatorioDTDto implements IRelatorioDTDto {
    dts?: DeclaracaoTrabalhoRelatorioDto[] | undefined;
    tempoMedioRetorno?: number | undefined;
    maiorPrazoRetorno?: number | undefined;
    menorPrazoRetorno?: number | undefined;

    constructor(data?: IRelatorioDTDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dts"])) {
                this.dts = [] as any;
                for (let item of _data["dts"])
                    this.dts!.push(DeclaracaoTrabalhoRelatorioDto.fromJS(item));
            }
            this.tempoMedioRetorno = _data["tempoMedioRetorno"];
            this.maiorPrazoRetorno = _data["maiorPrazoRetorno"];
            this.menorPrazoRetorno = _data["menorPrazoRetorno"];
        }
    }

    static fromJS(data: any): RelatorioDTDto {
        data = typeof data === 'object' ? data : {};
        let result = new RelatorioDTDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dts)) {
            data["dts"] = [];
            for (let item of this.dts)
                data["dts"].push(item.toJSON());
        }
        data["tempoMedioRetorno"] = this.tempoMedioRetorno;
        data["maiorPrazoRetorno"] = this.maiorPrazoRetorno;
        data["menorPrazoRetorno"] = this.menorPrazoRetorno;
        return data;
    }
}

export interface IRelatorioDTDto {
    dts?: DeclaracaoTrabalhoRelatorioDto[] | undefined;
    tempoMedioRetorno?: number | undefined;
    maiorPrazoRetorno?: number | undefined;
    menorPrazoRetorno?: number | undefined;
}

export class DeclaracaoTrabalhoRelatorioDto implements IDeclaracaoTrabalhoRelatorioDto {
    id?: number;
    sigla?: string | undefined;
    situacao?: DeclaracaoTrabalhoSituacao;
    situacaoDescricao?: string | undefined;
    tempoRetorno?: number | undefined;
    mesCriacao?: number;
    dataRespondida?: Date | undefined;
    dataAguardandoFornecedor?: Date | undefined;

    constructor(data?: IDeclaracaoTrabalhoRelatorioDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sigla = _data["sigla"];
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.tempoRetorno = _data["tempoRetorno"];
            this.mesCriacao = _data["mesCriacao"];
            this.dataRespondida = _data["dataRespondida"] ? new Date(_data["dataRespondida"].toString()) : <any>undefined;
            this.dataAguardandoFornecedor = _data["dataAguardandoFornecedor"] ? new Date(_data["dataAguardandoFornecedor"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoRelatorioDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoRelatorioDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sigla"] = this.sigla;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["tempoRetorno"] = this.tempoRetorno;
        data["mesCriacao"] = this.mesCriacao;
        data["dataRespondida"] = this.dataRespondida ? this.dataRespondida.toISOString() : <any>undefined;
        data["dataAguardandoFornecedor"] = this.dataAguardandoFornecedor ? this.dataAguardandoFornecedor.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDeclaracaoTrabalhoRelatorioDto {
    id?: number;
    sigla?: string | undefined;
    situacao?: DeclaracaoTrabalhoSituacao;
    situacaoDescricao?: string | undefined;
    tempoRetorno?: number | undefined;
    mesCriacao?: number;
    dataRespondida?: Date | undefined;
    dataAguardandoFornecedor?: Date | undefined;
}

export class DeclaracaoTrabalhoRelatorioQuery implements IDeclaracaoTrabalhoRelatorioQuery {
    id?: number | undefined;
    departamentoId?: number | undefined;
    projetoNome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    situacao?: DeclaracaoTrabalhoSituacao | undefined;
    intervaloData?: Date[] | undefined;

    constructor(data?: IDeclaracaoTrabalhoRelatorioQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departamentoId = _data["departamentoId"];
            this.projetoNome = _data["projetoNome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.situacao = _data["situacao"];
            if (Array.isArray(_data["intervaloData"])) {
                this.intervaloData = [] as any;
                for (let item of _data["intervaloData"])
                    this.intervaloData!.push(new Date(item));
            }
        }
    }

    static fromJS(data: any): DeclaracaoTrabalhoRelatorioQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DeclaracaoTrabalhoRelatorioQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departamentoId"] = this.departamentoId;
        data["projetoNome"] = this.projetoNome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["situacao"] = this.situacao;
        if (Array.isArray(this.intervaloData)) {
            data["intervaloData"] = [];
            for (let item of this.intervaloData)
                data["intervaloData"].push(item.toISOString());
        }
        return data;
    }
}

export interface IDeclaracaoTrabalhoRelatorioQuery {
    id?: number | undefined;
    departamentoId?: number | undefined;
    projetoNome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    situacao?: DeclaracaoTrabalhoSituacao | undefined;
    intervaloData?: Date[] | undefined;
}

export class DepartamentoCriarCommand implements IDepartamentoCriarCommand {
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    departamentoSuperiorId?: number | undefined;
    tipo?: TipoDepartamento;

    constructor(data?: IDepartamentoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.sigla = _data["sigla"];
            this.loginGestor = _data["loginGestor"];
            this.nomeGestor = _data["nomeGestor"];
            this.situacao = _data["situacao"];
            this.departamentoSuperiorId = _data["departamentoSuperiorId"];
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): DepartamentoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["sigla"] = this.sigla;
        data["loginGestor"] = this.loginGestor;
        data["nomeGestor"] = this.nomeGestor;
        data["situacao"] = this.situacao;
        data["departamentoSuperiorId"] = this.departamentoSuperiorId;
        data["tipo"] = this.tipo;
        return data;
    }
}

export interface IDepartamentoCriarCommand {
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    departamentoSuperiorId?: number | undefined;
    tipo?: TipoDepartamento;
}

export class DepartamentoAlterarCommand implements IDepartamentoAlterarCommand {
    id?: number;
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    departamentoSuperiorId?: number | undefined;
    tipo?: TipoDepartamento;

    constructor(data?: IDepartamentoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.sigla = _data["sigla"];
            this.loginGestor = _data["loginGestor"];
            this.nomeGestor = _data["nomeGestor"];
            this.situacao = _data["situacao"];
            this.departamentoSuperiorId = _data["departamentoSuperiorId"];
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): DepartamentoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["sigla"] = this.sigla;
        data["loginGestor"] = this.loginGestor;
        data["nomeGestor"] = this.nomeGestor;
        data["situacao"] = this.situacao;
        data["departamentoSuperiorId"] = this.departamentoSuperiorId;
        data["tipo"] = this.tipo;
        return data;
    }
}

export interface IDepartamentoAlterarCommand {
    id?: number;
    nome?: string | undefined;
    sigla?: string | undefined;
    loginGestor?: string | undefined;
    nomeGestor?: string | undefined;
    situacao?: SituacaoDepartamento;
    departamentoSuperiorId?: number | undefined;
    tipo?: TipoDepartamento;
}

export class PaginatedListOfDiarioBordoVm implements IPaginatedListOfDiarioBordoVm {
    items?: DiarioBordoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfDiarioBordoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DiarioBordoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfDiarioBordoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfDiarioBordoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfDiarioBordoVm {
    items?: DiarioBordoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class DiarioBordoVm implements IDiarioBordoVm {
    id?: number;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    cronograma?: CronogramaVm | undefined;
    cronogramaId?: number | undefined;
    areaResponsavelAtrasoId?: number;
    areaResponsavelAtrasoNome?: string | undefined;
    motivoAtraso?: string | undefined;
    tipo?: TipoDiario;
    tipoDescricao?: string | undefined;
    anoReferencia?: number | undefined;

    constructor(data?: IDiarioBordoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.dataRegistro = _data["dataRegistro"] ? new Date(_data["dataRegistro"].toString()) : <any>undefined;
            this.descricao = _data["descricao"];
            this.planejado = _data["planejado"];
            this.real = _data["real"];
            this.cronograma = _data["cronograma"] ? CronogramaVm.fromJS(_data["cronograma"]) : <any>undefined;
            this.cronogramaId = _data["cronogramaId"];
            this.areaResponsavelAtrasoId = _data["areaResponsavelAtrasoId"];
            this.areaResponsavelAtrasoNome = _data["areaResponsavelAtrasoNome"];
            this.motivoAtraso = _data["motivoAtraso"];
            this.tipo = _data["tipo"];
            this.tipoDescricao = _data["tipoDescricao"];
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): DiarioBordoVm {
        data = typeof data === 'object' ? data : {};
        let result = new DiarioBordoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["dataRegistro"] = this.dataRegistro ? this.dataRegistro.toISOString() : <any>undefined;
        data["descricao"] = this.descricao;
        data["planejado"] = this.planejado;
        data["real"] = this.real;
        data["cronograma"] = this.cronograma ? this.cronograma.toJSON() : <any>undefined;
        data["cronogramaId"] = this.cronogramaId;
        data["areaResponsavelAtrasoId"] = this.areaResponsavelAtrasoId;
        data["areaResponsavelAtrasoNome"] = this.areaResponsavelAtrasoNome;
        data["motivoAtraso"] = this.motivoAtraso;
        data["tipo"] = this.tipo;
        data["tipoDescricao"] = this.tipoDescricao;
        data["anoReferencia"] = this.anoReferencia;
        return data;
    }
}

export interface IDiarioBordoVm {
    id?: number;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    cronograma?: CronogramaVm | undefined;
    cronogramaId?: number | undefined;
    areaResponsavelAtrasoId?: number;
    areaResponsavelAtrasoNome?: string | undefined;
    motivoAtraso?: string | undefined;
    tipo?: TipoDiario;
    tipoDescricao?: string | undefined;
    anoReferencia?: number | undefined;
}

export class DiarioBordoObterPorProjetoQuery extends QueryRequestBase implements IDiarioBordoObterPorProjetoQuery {
    projetoId?: number;
    anoReferencia?: number | undefined;

    constructor(data?: IDiarioBordoObterPorProjetoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): DiarioBordoObterPorProjetoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DiarioBordoObterPorProjetoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["anoReferencia"] = this.anoReferencia;
        super.toJSON(data);
        return data;
    }
}

export interface IDiarioBordoObterPorProjetoQuery extends IQueryRequestBase {
    projetoId?: number;
    anoReferencia?: number | undefined;
}

export class DiarioBordoCriarCommand implements IDiarioBordoCriarCommand {
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    areaResponsavelAtrasoId?: number | undefined;
    motivoAtraso?: string | undefined;
    projetoId?: number;
    tipo?: TipoDiario;
    anoReferencia?: number | undefined;

    constructor(data?: IDiarioBordoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.dataRegistro = _data["dataRegistro"] ? new Date(_data["dataRegistro"].toString()) : <any>undefined;
            this.descricao = _data["descricao"];
            this.planejado = _data["planejado"];
            this.real = _data["real"];
            this.areaResponsavelAtrasoId = _data["areaResponsavelAtrasoId"];
            this.motivoAtraso = _data["motivoAtraso"];
            this.projetoId = _data["projetoId"];
            this.tipo = _data["tipo"];
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): DiarioBordoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DiarioBordoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["dataRegistro"] = this.dataRegistro ? this.dataRegistro.toISOString() : <any>undefined;
        data["descricao"] = this.descricao;
        data["planejado"] = this.planejado;
        data["real"] = this.real;
        data["areaResponsavelAtrasoId"] = this.areaResponsavelAtrasoId;
        data["motivoAtraso"] = this.motivoAtraso;
        data["projetoId"] = this.projetoId;
        data["tipo"] = this.tipo;
        data["anoReferencia"] = this.anoReferencia;
        return data;
    }
}

export interface IDiarioBordoCriarCommand {
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    areaResponsavelAtrasoId?: number | undefined;
    motivoAtraso?: string | undefined;
    projetoId?: number;
    tipo?: TipoDiario;
    anoReferencia?: number | undefined;
}

export class DiarioBordoAlterarCommand implements IDiarioBordoAlterarCommand {
    id?: number;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    areaResponsavelAtrasoId?: number | undefined;
    motivoAtraso?: string | undefined;
    tipo?: TipoDiario;
    anoReferencia?: number | undefined;

    constructor(data?: IDiarioBordoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.dataRegistro = _data["dataRegistro"] ? new Date(_data["dataRegistro"].toString()) : <any>undefined;
            this.descricao = _data["descricao"];
            this.planejado = _data["planejado"];
            this.real = _data["real"];
            this.areaResponsavelAtrasoId = _data["areaResponsavelAtrasoId"];
            this.motivoAtraso = _data["motivoAtraso"];
            this.tipo = _data["tipo"];
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): DiarioBordoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DiarioBordoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["dataRegistro"] = this.dataRegistro ? this.dataRegistro.toISOString() : <any>undefined;
        data["descricao"] = this.descricao;
        data["planejado"] = this.planejado;
        data["real"] = this.real;
        data["areaResponsavelAtrasoId"] = this.areaResponsavelAtrasoId;
        data["motivoAtraso"] = this.motivoAtraso;
        data["tipo"] = this.tipo;
        data["anoReferencia"] = this.anoReferencia;
        return data;
    }
}

export interface IDiarioBordoAlterarCommand {
    id?: number;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    dataRegistro?: Date;
    descricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    areaResponsavelAtrasoId?: number | undefined;
    motivoAtraso?: string | undefined;
    tipo?: TipoDiario;
    anoReferencia?: number | undefined;
}

export class EquipeProjetoVm implements IEquipeProjetoVm {
    id?: number;
    nome?: string | undefined;
    login?: string | undefined;
    participacao?: Participacao;
    participacaoDescricao?: string | undefined;
    funcao?: EquipeProjetoFuncaoVm | undefined;
    funcaoId?: number;
    projetoId?: number;

    constructor(data?: IEquipeProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.login = _data["login"];
            this.participacao = _data["participacao"];
            this.participacaoDescricao = _data["participacaoDescricao"];
            this.funcao = _data["funcao"] ? EquipeProjetoFuncaoVm.fromJS(_data["funcao"]) : <any>undefined;
            this.funcaoId = _data["funcaoId"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): EquipeProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["login"] = this.login;
        data["participacao"] = this.participacao;
        data["participacaoDescricao"] = this.participacaoDescricao;
        data["funcao"] = this.funcao ? this.funcao.toJSON() : <any>undefined;
        data["funcaoId"] = this.funcaoId;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IEquipeProjetoVm {
    id?: number;
    nome?: string | undefined;
    login?: string | undefined;
    participacao?: Participacao;
    participacaoDescricao?: string | undefined;
    funcao?: EquipeProjetoFuncaoVm | undefined;
    funcaoId?: number;
    projetoId?: number;
}

export class EquipeProjetoFuncaoVm implements IEquipeProjetoFuncaoVm {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: IEquipeProjetoFuncaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): EquipeProjetoFuncaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoFuncaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IEquipeProjetoFuncaoVm {
    id?: number;
    descricao?: string | undefined;
}

export class EquipeProjetoCriarCommand implements IEquipeProjetoCriarCommand {
    nome?: string | undefined;
    login?: string | undefined;
    participacao?: Participacao;
    funcaoId?: number;
    projetoId?: number;

    constructor(data?: IEquipeProjetoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.login = _data["login"];
            this.participacao = _data["participacao"];
            this.funcaoId = _data["funcaoId"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): EquipeProjetoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["login"] = this.login;
        data["participacao"] = this.participacao;
        data["funcaoId"] = this.funcaoId;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IEquipeProjetoCriarCommand {
    nome?: string | undefined;
    login?: string | undefined;
    participacao?: Participacao;
    funcaoId?: number;
    projetoId?: number;
}

export class EquipeProjetoAlterarCommand implements IEquipeProjetoAlterarCommand {
    id?: number;
    nome?: string | undefined;
    login?: string | undefined;
    projetoId?: number;
    participacao?: Participacao;
    funcaoId?: number;

    constructor(data?: IEquipeProjetoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.login = _data["login"];
            this.projetoId = _data["projetoId"];
            this.participacao = _data["participacao"];
            this.funcaoId = _data["funcaoId"];
        }
    }

    static fromJS(data: any): EquipeProjetoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["login"] = this.login;
        data["projetoId"] = this.projetoId;
        data["participacao"] = this.participacao;
        data["funcaoId"] = this.funcaoId;
        return data;
    }
}

export interface IEquipeProjetoAlterarCommand {
    id?: number;
    nome?: string | undefined;
    login?: string | undefined;
    projetoId?: number;
    participacao?: Participacao;
    funcaoId?: number;
}

export class PaginatedListOfEquipeProjetoVm implements IPaginatedListOfEquipeProjetoVm {
    items?: EquipeProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfEquipeProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EquipeProjetoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfEquipeProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfEquipeProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfEquipeProjetoVm {
    items?: EquipeProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class EquipeProjetoObterTodosQuery extends QueryRequestBase implements IEquipeProjetoObterTodosQuery {
    projetoId?: number | undefined;

    constructor(data?: IEquipeProjetoObterTodosQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): EquipeProjetoObterTodosQuery {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoObterTodosQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        super.toJSON(data);
        return data;
    }
}

export interface IEquipeProjetoObterTodosQuery extends IQueryRequestBase {
    projetoId?: number | undefined;
}

export class EquipeProjetoFuncaoCriarCommand implements IEquipeProjetoFuncaoCriarCommand {
    descricao?: string | undefined;

    constructor(data?: IEquipeProjetoFuncaoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): EquipeProjetoFuncaoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoFuncaoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IEquipeProjetoFuncaoCriarCommand {
    descricao?: string | undefined;
}

export class EquipeProjetoFuncaoAlterarCommand implements IEquipeProjetoFuncaoAlterarCommand {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: IEquipeProjetoFuncaoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): EquipeProjetoFuncaoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoFuncaoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IEquipeProjetoFuncaoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
}

export class PaginatedListOfEquipeProjetoFuncaoVm implements IPaginatedListOfEquipeProjetoFuncaoVm {
    items?: EquipeProjetoFuncaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfEquipeProjetoFuncaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EquipeProjetoFuncaoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfEquipeProjetoFuncaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfEquipeProjetoFuncaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfEquipeProjetoFuncaoVm {
    items?: EquipeProjetoFuncaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class EquipeProjetoFuncaoObterTodosQuery extends QueryRequestBase implements IEquipeProjetoFuncaoObterTodosQuery {

    constructor(data?: IEquipeProjetoFuncaoObterTodosQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EquipeProjetoFuncaoObterTodosQuery {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoFuncaoObterTodosQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IEquipeProjetoFuncaoObterTodosQuery extends IQueryRequestBase {
}

export class GrupoAcessoVm implements IGrupoAcessoVm {
    id?: number;
    nome?: string | undefined;
    administrador?: boolean;
    permissoesAcesso?: PermissaoAcessoVm[] | undefined;

    constructor(data?: IGrupoAcessoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.administrador = _data["administrador"];
            if (Array.isArray(_data["permissoesAcesso"])) {
                this.permissoesAcesso = [] as any;
                for (let item of _data["permissoesAcesso"])
                    this.permissoesAcesso!.push(PermissaoAcessoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GrupoAcessoVm {
        data = typeof data === 'object' ? data : {};
        let result = new GrupoAcessoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["administrador"] = this.administrador;
        if (Array.isArray(this.permissoesAcesso)) {
            data["permissoesAcesso"] = [];
            for (let item of this.permissoesAcesso)
                data["permissoesAcesso"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGrupoAcessoVm {
    id?: number;
    nome?: string | undefined;
    administrador?: boolean;
    permissoesAcesso?: PermissaoAcessoVm[] | undefined;
}

export class PermissaoAcessoVm implements IPermissaoAcessoVm {
    id?: string | undefined;
    descricao?: string | undefined;
    agrupador?: string | undefined;

    constructor(data?: IPermissaoAcessoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.agrupador = _data["agrupador"];
        }
    }

    static fromJS(data: any): PermissaoAcessoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PermissaoAcessoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["agrupador"] = this.agrupador;
        return data;
    }
}

export interface IPermissaoAcessoVm {
    id?: string | undefined;
    descricao?: string | undefined;
    agrupador?: string | undefined;
}

export class GrupoAcessoCriarCommand implements IGrupoAcessoCriarCommand {
    nome?: string | undefined;
    administrador?: boolean;

    constructor(data?: IGrupoAcessoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.administrador = _data["administrador"];
        }
    }

    static fromJS(data: any): GrupoAcessoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GrupoAcessoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["administrador"] = this.administrador;
        return data;
    }
}

export interface IGrupoAcessoCriarCommand {
    nome?: string | undefined;
    administrador?: boolean;
}

export class GrupoAcessoAlterarCommand implements IGrupoAcessoAlterarCommand {
    id?: number;
    nome?: string | undefined;
    administrador?: boolean;

    constructor(data?: IGrupoAcessoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.administrador = _data["administrador"];
        }
    }

    static fromJS(data: any): GrupoAcessoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GrupoAcessoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["administrador"] = this.administrador;
        return data;
    }
}

export interface IGrupoAcessoAlterarCommand {
    id?: number;
    nome?: string | undefined;
    administrador?: boolean;
}

export class GrupoAcessoVincularDesvincularPermissaoCommand implements IGrupoAcessoVincularDesvincularPermissaoCommand {
    vincular?: boolean;
    permissaoAcessoId?: string | undefined;
    grupoAcessoId?: number;

    constructor(data?: IGrupoAcessoVincularDesvincularPermissaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vincular = _data["vincular"];
            this.permissaoAcessoId = _data["permissaoAcessoId"];
            this.grupoAcessoId = _data["grupoAcessoId"];
        }
    }

    static fromJS(data: any): GrupoAcessoVincularDesvincularPermissaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GrupoAcessoVincularDesvincularPermissaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vincular"] = this.vincular;
        data["permissaoAcessoId"] = this.permissaoAcessoId;
        data["grupoAcessoId"] = this.grupoAcessoId;
        return data;
    }
}

export interface IGrupoAcessoVincularDesvincularPermissaoCommand {
    vincular?: boolean;
    permissaoAcessoId?: string | undefined;
    grupoAcessoId?: number;
}

export class PaginatedListOfUsuarioVm implements IPaginatedListOfUsuarioVm {
    items?: UsuarioVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfUsuarioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UsuarioVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfUsuarioVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfUsuarioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfUsuarioVm {
    items?: UsuarioVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class UsuarioVm implements IUsuarioVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    administrador?: boolean;
    grupos?: GrupoAcessoVm[] | undefined;
    permissoes?: string[] | undefined;

    constructor(data?: IUsuarioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.administrador = _data["administrador"];
            if (Array.isArray(_data["grupos"])) {
                this.grupos = [] as any;
                for (let item of _data["grupos"])
                    this.grupos!.push(GrupoAcessoVm.fromJS(item));
            }
            if (Array.isArray(_data["permissoes"])) {
                this.permissoes = [] as any;
                for (let item of _data["permissoes"])
                    this.permissoes!.push(item);
            }
        }
    }

    static fromJS(data: any): UsuarioVm {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["administrador"] = this.administrador;
        if (Array.isArray(this.grupos)) {
            data["grupos"] = [];
            for (let item of this.grupos)
                data["grupos"].push(item.toJSON());
        }
        if (Array.isArray(this.permissoes)) {
            data["permissoes"] = [];
            for (let item of this.permissoes)
                data["permissoes"].push(item);
        }
        return data;
    }
}

export interface IUsuarioVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    administrador?: boolean;
    grupos?: GrupoAcessoVm[] | undefined;
    permissoes?: string[] | undefined;
}

export class GrupoAcessoObterTodosUsuariosQuery extends QueryRequestBase implements IGrupoAcessoObterTodosUsuariosQuery {
    grupoAcessoId?: number;

    constructor(data?: IGrupoAcessoObterTodosUsuariosQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.grupoAcessoId = _data["grupoAcessoId"];
        }
    }

    static fromJS(data: any): GrupoAcessoObterTodosUsuariosQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GrupoAcessoObterTodosUsuariosQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["grupoAcessoId"] = this.grupoAcessoId;
        super.toJSON(data);
        return data;
    }
}

export interface IGrupoAcessoObterTodosUsuariosQuery extends IQueryRequestBase {
    grupoAcessoId?: number;
}

export class PaginatedListOfPerguntaIndicadorVm implements IPaginatedListOfPerguntaIndicadorVm {
    items?: PerguntaIndicadorVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPerguntaIndicadorVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PerguntaIndicadorVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPerguntaIndicadorVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPerguntaIndicadorVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPerguntaIndicadorVm {
    items?: PerguntaIndicadorVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PerguntaIndicadorVm implements IPerguntaIndicadorVm {
    id?: number;
    descricao?: string | undefined;
    pesosRespostas?: PesoRespostaIndicadorVm[] | undefined;

    constructor(data?: IPerguntaIndicadorVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            if (Array.isArray(_data["pesosRespostas"])) {
                this.pesosRespostas = [] as any;
                for (let item of _data["pesosRespostas"])
                    this.pesosRespostas!.push(PesoRespostaIndicadorVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PerguntaIndicadorVm {
        data = typeof data === 'object' ? data : {};
        let result = new PerguntaIndicadorVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        if (Array.isArray(this.pesosRespostas)) {
            data["pesosRespostas"] = [];
            for (let item of this.pesosRespostas)
                data["pesosRespostas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPerguntaIndicadorVm {
    id?: number;
    descricao?: string | undefined;
    pesosRespostas?: PesoRespostaIndicadorVm[] | undefined;
}

export class PesoRespostaIndicadorVm implements IPesoRespostaIndicadorVm {
    resposta?: Respostas;
    respostaDescricao?: string | undefined;
    peso?: number | undefined;

    constructor(data?: IPesoRespostaIndicadorVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resposta = _data["resposta"];
            this.respostaDescricao = _data["respostaDescricao"];
            this.peso = _data["peso"];
        }
    }

    static fromJS(data: any): PesoRespostaIndicadorVm {
        data = typeof data === 'object' ? data : {};
        let result = new PesoRespostaIndicadorVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resposta"] = this.resposta;
        data["respostaDescricao"] = this.respostaDescricao;
        data["peso"] = this.peso;
        return data;
    }
}

export interface IPesoRespostaIndicadorVm {
    resposta?: Respostas;
    respostaDescricao?: string | undefined;
    peso?: number | undefined;
}

export enum Respostas {
    Sim = 0,
    Nao = 1,
    Verde = 2,
    Amarelo = 3,
    Vermelho = 4,
    NA = 5,
}

export class PerguntaIndicadorObterTodosQuery extends QueryRequestBase implements IPerguntaIndicadorObterTodosQuery {

    constructor(data?: IPerguntaIndicadorObterTodosQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): PerguntaIndicadorObterTodosQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PerguntaIndicadorObterTodosQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IPerguntaIndicadorObterTodosQuery extends IQueryRequestBase {
}

export class PerguntaIndicadoresCriarCommand implements IPerguntaIndicadoresCriarCommand {
    descricao?: string | undefined;

    constructor(data?: IPerguntaIndicadoresCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): PerguntaIndicadoresCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PerguntaIndicadoresCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IPerguntaIndicadoresCriarCommand {
    descricao?: string | undefined;
}

export class PerguntaIndicadoresAlterarCommand implements IPerguntaIndicadoresAlterarCommand {
    id?: number;
    descricao?: string | undefined;

    constructor(data?: IPerguntaIndicadoresAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
        }
    }

    static fromJS(data: any): PerguntaIndicadoresAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PerguntaIndicadoresAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        return data;
    }
}

export interface IPerguntaIndicadoresAlterarCommand {
    id?: number;
    descricao?: string | undefined;
}

export class PesosRespostasIndicadoresCriarCommand implements IPesosRespostasIndicadoresCriarCommand {
    resposta?: Respostas;
    peso?: number;
    perguntaId?: number;

    constructor(data?: IPesosRespostasIndicadoresCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resposta = _data["resposta"];
            this.peso = _data["peso"];
            this.perguntaId = _data["perguntaId"];
        }
    }

    static fromJS(data: any): PesosRespostasIndicadoresCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PesosRespostasIndicadoresCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resposta"] = this.resposta;
        data["peso"] = this.peso;
        data["perguntaId"] = this.perguntaId;
        return data;
    }
}

export interface IPesosRespostasIndicadoresCriarCommand {
    resposta?: Respostas;
    peso?: number;
    perguntaId?: number;
}

export class PesosRespostasIndicadoresAlterarCommand implements IPesosRespostasIndicadoresAlterarCommand {
    id?: number;
    resposta?: Respostas;
    peso?: number;

    constructor(data?: IPesosRespostasIndicadoresAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.resposta = _data["resposta"];
            this.peso = _data["peso"];
        }
    }

    static fromJS(data: any): PesosRespostasIndicadoresAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PesosRespostasIndicadoresAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["resposta"] = this.resposta;
        data["peso"] = this.peso;
        return data;
    }
}

export interface IPesosRespostasIndicadoresAlterarCommand {
    id?: number;
    resposta?: Respostas;
    peso?: number;
}

export class LicaoAprendidaVm implements ILicaoAprendidaVm {
    id?: number;
    data?: Date;
    fase?: FaseProjeto;
    faseDescricao?: string | undefined;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    departamentoId?: number;
    departamentoNome?: string | undefined;

    constructor(data?: ILicaoAprendidaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.fase = _data["fase"];
            this.faseDescricao = _data["faseDescricao"];
            this.pontosPositivos = _data["pontosPositivos"];
            this.pontosAtencao = _data["pontosAtencao"];
            this.departamentoId = _data["departamentoId"];
            this.departamentoNome = _data["departamentoNome"];
        }
    }

    static fromJS(data: any): LicaoAprendidaVm {
        data = typeof data === 'object' ? data : {};
        let result = new LicaoAprendidaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["fase"] = this.fase;
        data["faseDescricao"] = this.faseDescricao;
        data["pontosPositivos"] = this.pontosPositivos;
        data["pontosAtencao"] = this.pontosAtencao;
        data["departamentoId"] = this.departamentoId;
        data["departamentoNome"] = this.departamentoNome;
        return data;
    }
}

export interface ILicaoAprendidaVm {
    id?: number;
    data?: Date;
    fase?: FaseProjeto;
    faseDescricao?: string | undefined;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    departamentoId?: number;
    departamentoNome?: string | undefined;
}

export class LicaoAprendidaCriarCommand implements ILicaoAprendidaCriarCommand {
    data?: Date;
    fase?: FaseProjeto;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    projetoId?: number;
    departamentoId?: number;

    constructor(data?: ILicaoAprendidaCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.fase = _data["fase"];
            this.pontosPositivos = _data["pontosPositivos"];
            this.pontosAtencao = _data["pontosAtencao"];
            this.projetoId = _data["projetoId"];
            this.departamentoId = _data["departamentoId"];
        }
    }

    static fromJS(data: any): LicaoAprendidaCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LicaoAprendidaCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["fase"] = this.fase;
        data["pontosPositivos"] = this.pontosPositivos;
        data["pontosAtencao"] = this.pontosAtencao;
        data["projetoId"] = this.projetoId;
        data["departamentoId"] = this.departamentoId;
        return data;
    }
}

export interface ILicaoAprendidaCriarCommand {
    data?: Date;
    fase?: FaseProjeto;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    projetoId?: number;
    departamentoId?: number;
}

export class LicaoAprendidaAlterarCommand implements ILicaoAprendidaAlterarCommand {
    id?: number;
    data?: Date;
    fase?: FaseProjeto;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    departamentoId?: number;

    constructor(data?: ILicaoAprendidaAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.fase = _data["fase"];
            this.pontosPositivos = _data["pontosPositivos"];
            this.pontosAtencao = _data["pontosAtencao"];
            this.departamentoId = _data["departamentoId"];
        }
    }

    static fromJS(data: any): LicaoAprendidaAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LicaoAprendidaAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["fase"] = this.fase;
        data["pontosPositivos"] = this.pontosPositivos;
        data["pontosAtencao"] = this.pontosAtencao;
        data["departamentoId"] = this.departamentoId;
        return data;
    }
}

export interface ILicaoAprendidaAlterarCommand {
    id?: number;
    data?: Date;
    fase?: FaseProjeto;
    pontosPositivos?: string | undefined;
    pontosAtencao?: string | undefined;
    departamentoId?: number;
}

export class PaginatedListOfLicaoAprendidaVm implements IPaginatedListOfLicaoAprendidaVm {
    items?: LicaoAprendidaVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfLicaoAprendidaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LicaoAprendidaVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfLicaoAprendidaVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfLicaoAprendidaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfLicaoAprendidaVm {
    items?: LicaoAprendidaVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class LicaoAprendidaObterPorProjetoQuery extends QueryRequestBase implements ILicaoAprendidaObterPorProjetoQuery {
    projetoId?: number;
    ano?: number | undefined;

    constructor(data?: ILicaoAprendidaObterPorProjetoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.ano = _data["ano"];
        }
    }

    static fromJS(data: any): LicaoAprendidaObterPorProjetoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new LicaoAprendidaObterPorProjetoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["ano"] = this.ano;
        super.toJSON(data);
        return data;
    }
}

export interface ILicaoAprendidaObterPorProjetoQuery extends IQueryRequestBase {
    projetoId?: number;
    ano?: number | undefined;
}

export class LogAlteracaoVm implements ILogAlteracaoVm {
    id?: number;
    entidade?: string | undefined;
    entidadeId?: string | undefined;
    campo?: string | undefined;
    valorAnterior?: string | undefined;
    valorAtual?: string | undefined;
    dataAlteracao?: Date;
    usuarioLogin?: string | undefined;
    usuarioNome?: string | undefined;

    constructor(data?: ILogAlteracaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.entidade = _data["entidade"];
            this.entidadeId = _data["entidadeId"];
            this.campo = _data["campo"];
            this.valorAnterior = _data["valorAnterior"];
            this.valorAtual = _data["valorAtual"];
            this.dataAlteracao = _data["dataAlteracao"] ? new Date(_data["dataAlteracao"].toString()) : <any>undefined;
            this.usuarioLogin = _data["usuarioLogin"];
            this.usuarioNome = _data["usuarioNome"];
        }
    }

    static fromJS(data: any): LogAlteracaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new LogAlteracaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entidade"] = this.entidade;
        data["entidadeId"] = this.entidadeId;
        data["campo"] = this.campo;
        data["valorAnterior"] = this.valorAnterior;
        data["valorAtual"] = this.valorAtual;
        data["dataAlteracao"] = this.dataAlteracao ? this.dataAlteracao.toISOString() : <any>undefined;
        data["usuarioLogin"] = this.usuarioLogin;
        data["usuarioNome"] = this.usuarioNome;
        return data;
    }
}

export interface ILogAlteracaoVm {
    id?: number;
    entidade?: string | undefined;
    entidadeId?: string | undefined;
    campo?: string | undefined;
    valorAnterior?: string | undefined;
    valorAtual?: string | undefined;
    dataAlteracao?: Date;
    usuarioLogin?: string | undefined;
    usuarioNome?: string | undefined;
}

export class LogAlteracaoObterPorIdETipoEntidadeQuery implements ILogAlteracaoObterPorIdETipoEntidadeQuery {
    entidade?: string | undefined;
    entidadeId?: number;
    dataInicial?: Date | undefined;
    dataFinal?: Date | undefined;
    usuarioNome?: string | undefined;

    constructor(data?: ILogAlteracaoObterPorIdETipoEntidadeQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entidade = _data["entidade"];
            this.entidadeId = _data["entidadeId"];
            this.dataInicial = _data["dataInicial"] ? new Date(_data["dataInicial"].toString()) : <any>undefined;
            this.dataFinal = _data["dataFinal"] ? new Date(_data["dataFinal"].toString()) : <any>undefined;
            this.usuarioNome = _data["usuarioNome"];
        }
    }

    static fromJS(data: any): LogAlteracaoObterPorIdETipoEntidadeQuery {
        data = typeof data === 'object' ? data : {};
        let result = new LogAlteracaoObterPorIdETipoEntidadeQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entidade"] = this.entidade;
        data["entidadeId"] = this.entidadeId;
        data["dataInicial"] = this.dataInicial ? this.dataInicial.toISOString() : <any>undefined;
        data["dataFinal"] = this.dataFinal ? this.dataFinal.toISOString() : <any>undefined;
        data["usuarioNome"] = this.usuarioNome;
        return data;
    }
}

export interface ILogAlteracaoObterPorIdETipoEntidadeQuery {
    entidade?: string | undefined;
    entidadeId?: number;
    dataInicial?: Date | undefined;
    dataFinal?: Date | undefined;
    usuarioNome?: string | undefined;
}

export class LogAlteracaoObterPorEntidadeECampoQuery implements ILogAlteracaoObterPorEntidadeECampoQuery {
    entidade?: string | undefined;
    dataInicial?: Date;
    dataFinal?: Date;
    campo?: string | undefined;

    constructor(data?: ILogAlteracaoObterPorEntidadeECampoQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entidade = _data["entidade"];
            this.dataInicial = _data["dataInicial"] ? new Date(_data["dataInicial"].toString()) : <any>undefined;
            this.dataFinal = _data["dataFinal"] ? new Date(_data["dataFinal"].toString()) : <any>undefined;
            this.campo = _data["campo"];
        }
    }

    static fromJS(data: any): LogAlteracaoObterPorEntidadeECampoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new LogAlteracaoObterPorEntidadeECampoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entidade"] = this.entidade;
        data["dataInicial"] = this.dataInicial ? this.dataInicial.toISOString() : <any>undefined;
        data["dataFinal"] = this.dataFinal ? this.dataFinal.toISOString() : <any>undefined;
        data["campo"] = this.campo;
        return data;
    }
}

export interface ILogAlteracaoObterPorEntidadeECampoQuery {
    entidade?: string | undefined;
    dataInicial?: Date;
    dataFinal?: Date;
    campo?: string | undefined;
}

export class NotificacaoResponse implements INotificacaoResponse {
    quantidadeNotificacoesNaoLidas?: number;
    notificacoes?: PaginatedListOfNotificacaoVm | undefined;

    constructor(data?: INotificacaoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quantidadeNotificacoesNaoLidas = _data["quantidadeNotificacoesNaoLidas"];
            this.notificacoes = _data["notificacoes"] ? PaginatedListOfNotificacaoVm.fromJS(_data["notificacoes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NotificacaoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NotificacaoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quantidadeNotificacoesNaoLidas"] = this.quantidadeNotificacoesNaoLidas;
        data["notificacoes"] = this.notificacoes ? this.notificacoes.toJSON() : <any>undefined;
        return data;
    }
}

export interface INotificacaoResponse {
    quantidadeNotificacoesNaoLidas?: number;
    notificacoes?: PaginatedListOfNotificacaoVm | undefined;
}

export class PaginatedListOfNotificacaoVm implements IPaginatedListOfNotificacaoVm {
    items?: NotificacaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfNotificacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(NotificacaoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfNotificacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfNotificacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfNotificacaoVm {
    items?: NotificacaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class NotificacaoVm implements INotificacaoVm {
    id?: number;
    icone?: string | undefined;
    tipoNotificacao?: TipoNotificacao;
    dataEnvio?: Date;
    strDataEnvio?: string | undefined;
    dataLeitura?: Date | undefined;
    mensagem?: string | undefined;
    link?: string | undefined;
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
    declaracaoTrabalhoId?: number | undefined;
    projetoOrcamentoId?: number | undefined;
    projetoPlurianualOrcamentoId?: number | undefined;
    projetoId?: number | undefined;
    usuarioId?: number;

    constructor(data?: INotificacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.icone = _data["icone"];
            this.tipoNotificacao = _data["tipoNotificacao"];
            this.dataEnvio = _data["dataEnvio"] ? new Date(_data["dataEnvio"].toString()) : <any>undefined;
            this.strDataEnvio = _data["strDataEnvio"];
            this.dataLeitura = _data["dataLeitura"] ? new Date(_data["dataLeitura"].toString()) : <any>undefined;
            this.mensagem = _data["mensagem"];
            this.link = _data["link"];
            this.preProjetoId = _data["preProjetoId"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.projetoOrcamentoId = _data["projetoOrcamentoId"];
            this.projetoPlurianualOrcamentoId = _data["projetoPlurianualOrcamentoId"];
            this.projetoId = _data["projetoId"];
            this.usuarioId = _data["usuarioId"];
        }
    }

    static fromJS(data: any): NotificacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new NotificacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["icone"] = this.icone;
        data["tipoNotificacao"] = this.tipoNotificacao;
        data["dataEnvio"] = this.dataEnvio ? this.dataEnvio.toISOString() : <any>undefined;
        data["strDataEnvio"] = this.strDataEnvio;
        data["dataLeitura"] = this.dataLeitura ? this.dataLeitura.toISOString() : <any>undefined;
        data["mensagem"] = this.mensagem;
        data["link"] = this.link;
        data["preProjetoId"] = this.preProjetoId;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["projetoOrcamentoId"] = this.projetoOrcamentoId;
        data["projetoPlurianualOrcamentoId"] = this.projetoPlurianualOrcamentoId;
        data["projetoId"] = this.projetoId;
        data["usuarioId"] = this.usuarioId;
        return data;
    }
}

export interface INotificacaoVm {
    id?: number;
    icone?: string | undefined;
    tipoNotificacao?: TipoNotificacao;
    dataEnvio?: Date;
    strDataEnvio?: string | undefined;
    dataLeitura?: Date | undefined;
    mensagem?: string | undefined;
    link?: string | undefined;
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
    declaracaoTrabalhoId?: number | undefined;
    projetoOrcamentoId?: number | undefined;
    projetoPlurianualOrcamentoId?: number | undefined;
    projetoId?: number | undefined;
    usuarioId?: number;
}

export enum TipoNotificacao {
    Informacao = 0,
    Sucesso = 1,
    Erro = 2,
    Aviso = 3,
}

export class ObjetivoEstrategicoVm implements IObjetivoEstrategicoVm {
    id?: number;
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    objetivoEstrategicoPaiId?: number | undefined;
    porcentagem?: number;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva | undefined;
    objetivoEstrategicoClassificacaoDescricao?: string | undefined;
    objetivoEstrategicoPerspectivaDescricao?: string | undefined;

    constructor(data?: IObjetivoEstrategicoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.corFundo = _data["corFundo"];
            this.corTexto = _data["corTexto"];
            this.objetivoEstrategicoPaiId = _data["objetivoEstrategicoPaiId"];
            this.porcentagem = _data["porcentagem"];
            this.objetivoEstrategicoClassificacao = _data["objetivoEstrategicoClassificacao"];
            this.objetivoEstrategicoPerspectiva = _data["objetivoEstrategicoPerspectiva"];
            this.objetivoEstrategicoClassificacaoDescricao = _data["objetivoEstrategicoClassificacaoDescricao"];
            this.objetivoEstrategicoPerspectivaDescricao = _data["objetivoEstrategicoPerspectivaDescricao"];
        }
    }

    static fromJS(data: any): ObjetivoEstrategicoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ObjetivoEstrategicoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["corFundo"] = this.corFundo;
        data["corTexto"] = this.corTexto;
        data["objetivoEstrategicoPaiId"] = this.objetivoEstrategicoPaiId;
        data["porcentagem"] = this.porcentagem;
        data["objetivoEstrategicoClassificacao"] = this.objetivoEstrategicoClassificacao;
        data["objetivoEstrategicoPerspectiva"] = this.objetivoEstrategicoPerspectiva;
        data["objetivoEstrategicoClassificacaoDescricao"] = this.objetivoEstrategicoClassificacaoDescricao;
        data["objetivoEstrategicoPerspectivaDescricao"] = this.objetivoEstrategicoPerspectivaDescricao;
        return data;
    }
}

export interface IObjetivoEstrategicoVm {
    id?: number;
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    objetivoEstrategicoPaiId?: number | undefined;
    porcentagem?: number;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva | undefined;
    objetivoEstrategicoClassificacaoDescricao?: string | undefined;
    objetivoEstrategicoPerspectivaDescricao?: string | undefined;
}

export class ObjetivoEstrategicoCriarCommand implements IObjetivoEstrategicoCriarCommand {
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    porcentagem?: number;
    objetivoEstrategicoPaiId?: number | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao;

    constructor(data?: IObjetivoEstrategicoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
            this.corFundo = _data["corFundo"];
            this.corTexto = _data["corTexto"];
            this.porcentagem = _data["porcentagem"];
            this.objetivoEstrategicoPaiId = _data["objetivoEstrategicoPaiId"];
            this.objetivoEstrategicoPerspectiva = _data["objetivoEstrategicoPerspectiva"];
            this.objetivoEstrategicoClassificacao = _data["objetivoEstrategicoClassificacao"];
        }
    }

    static fromJS(data: any): ObjetivoEstrategicoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ObjetivoEstrategicoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        data["corFundo"] = this.corFundo;
        data["corTexto"] = this.corTexto;
        data["porcentagem"] = this.porcentagem;
        data["objetivoEstrategicoPaiId"] = this.objetivoEstrategicoPaiId;
        data["objetivoEstrategicoPerspectiva"] = this.objetivoEstrategicoPerspectiva;
        data["objetivoEstrategicoClassificacao"] = this.objetivoEstrategicoClassificacao;
        return data;
    }
}

export interface IObjetivoEstrategicoCriarCommand {
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    porcentagem?: number;
    objetivoEstrategicoPaiId?: number | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao;
}

export class ObjetivoEstrategicoAlterarCommand implements IObjetivoEstrategicoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    porcentagem?: number;
    objetivoEstrategicoPaiId?: number | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao;

    constructor(data?: IObjetivoEstrategicoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.corFundo = _data["corFundo"];
            this.corTexto = _data["corTexto"];
            this.porcentagem = _data["porcentagem"];
            this.objetivoEstrategicoPaiId = _data["objetivoEstrategicoPaiId"];
            this.objetivoEstrategicoPerspectiva = _data["objetivoEstrategicoPerspectiva"];
            this.objetivoEstrategicoClassificacao = _data["objetivoEstrategicoClassificacao"];
        }
    }

    static fromJS(data: any): ObjetivoEstrategicoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ObjetivoEstrategicoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["corFundo"] = this.corFundo;
        data["corTexto"] = this.corTexto;
        data["porcentagem"] = this.porcentagem;
        data["objetivoEstrategicoPaiId"] = this.objetivoEstrategicoPaiId;
        data["objetivoEstrategicoPerspectiva"] = this.objetivoEstrategicoPerspectiva;
        data["objetivoEstrategicoClassificacao"] = this.objetivoEstrategicoClassificacao;
        return data;
    }
}

export interface IObjetivoEstrategicoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    corFundo?: string | undefined;
    corTexto?: string | undefined;
    porcentagem?: number;
    objetivoEstrategicoPaiId?: number | undefined;
    objetivoEstrategicoPerspectiva?: ObjetivoEstrategicoPerspectiva;
    objetivoEstrategicoClassificacao?: ObjetivoEstrategicoClassificacao;
}

export class PeriodicidadeVm implements IPeriodicidadeVm {
    id?: number;
    nome?: string | undefined;

    constructor(data?: IPeriodicidadeVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): PeriodicidadeVm {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodicidadeVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IPeriodicidadeVm {
    id?: number;
    nome?: string | undefined;
}

export class PeriodicidadeCriarCommand implements IPeriodicidadeCriarCommand {
    nome?: string | undefined;

    constructor(data?: IPeriodicidadeCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): PeriodicidadeCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodicidadeCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        return data;
    }
}

export interface IPeriodicidadeCriarCommand {
    nome?: string | undefined;
}

export class PeriodicidadeAlterarCommand implements IPeriodicidadeAlterarCommand {
    id?: number;
    nome?: string | undefined;

    constructor(data?: IPeriodicidadeAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): PeriodicidadeAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodicidadeAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IPeriodicidadeAlterarCommand {
    id?: number;
    nome?: string | undefined;
}

export class PlanoAcaoCriarCommand implements IPlanoAcaoCriarCommand {
    descricao?: string | undefined;
    departamentoId?: number;
    data?: Date;
    observacao?: string | undefined;
    followUp?: FollowUp;
    projetoId?: number;

    constructor(data?: IPlanoAcaoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
            this.departamentoId = _data["departamentoId"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.observacao = _data["observacao"];
            this.followUp = _data["followUp"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): PlanoAcaoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PlanoAcaoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        data["departamentoId"] = this.departamentoId;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["observacao"] = this.observacao;
        data["followUp"] = this.followUp;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IPlanoAcaoCriarCommand {
    descricao?: string | undefined;
    departamentoId?: number;
    data?: Date;
    observacao?: string | undefined;
    followUp?: FollowUp;
    projetoId?: number;
}

export class PlanoAcaoAlterarCommand implements IPlanoAcaoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    departamentoId?: number;
    data?: Date;
    observacao?: string | undefined;
    followUp?: FollowUp;

    constructor(data?: IPlanoAcaoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.departamentoId = _data["departamentoId"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
            this.observacao = _data["observacao"];
            this.followUp = _data["followUp"];
        }
    }

    static fromJS(data: any): PlanoAcaoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PlanoAcaoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["departamentoId"] = this.departamentoId;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["observacao"] = this.observacao;
        data["followUp"] = this.followUp;
        return data;
    }
}

export interface IPlanoAcaoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    departamentoId?: number;
    data?: Date;
    observacao?: string | undefined;
    followUp?: FollowUp;
}

export class PaginatedListOfPlanoAcaoVm implements IPaginatedListOfPlanoAcaoVm {
    items?: PlanoAcaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPlanoAcaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PlanoAcaoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPlanoAcaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPlanoAcaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPlanoAcaoVm {
    items?: PlanoAcaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PlanoAcaoObterPorProjetoQuery extends QueryRequestBase implements IPlanoAcaoObterPorProjetoQuery {
    projetoId?: number;
    ano?: number | undefined;

    constructor(data?: IPlanoAcaoObterPorProjetoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.ano = _data["ano"];
        }
    }

    static fromJS(data: any): PlanoAcaoObterPorProjetoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PlanoAcaoObterPorProjetoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["ano"] = this.ano;
        super.toJSON(data);
        return data;
    }
}

export interface IPlanoAcaoObterPorProjetoQuery extends IQueryRequestBase {
    projetoId?: number;
    ano?: number | undefined;
}

export class PortifolioCriarCommand implements IPortifolioCriarCommand {
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;

    constructor(data?: IPortifolioCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataTermino = _data["dataTermino"] ? new Date(_data["dataTermino"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PortifolioCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataTermino"] = this.dataTermino ? this.dataTermino.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPortifolioCriarCommand {
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
}

export class PortifolioAlterarCommand implements IPortifolioAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;

    constructor(data?: IPortifolioAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataTermino = _data["dataTermino"] ? new Date(_data["dataTermino"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PortifolioAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataTermino"] = this.dataTermino ? this.dataTermino.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPortifolioAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
}

export class PortifolioVm implements IPortifolioVm {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
    preProjetos?: PreProjetoVm[] | undefined;
    projetosPlurianuais?: ProjetoPlurianualVm[] | undefined;

    constructor(data?: IPortifolioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataTermino = _data["dataTermino"] ? new Date(_data["dataTermino"].toString()) : <any>undefined;
            if (Array.isArray(_data["preProjetos"])) {
                this.preProjetos = [] as any;
                for (let item of _data["preProjetos"])
                    this.preProjetos!.push(PreProjetoVm.fromJS(item));
            }
            if (Array.isArray(_data["projetosPlurianuais"])) {
                this.projetosPlurianuais = [] as any;
                for (let item of _data["projetosPlurianuais"])
                    this.projetosPlurianuais!.push(ProjetoPlurianualVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PortifolioVm {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataTermino"] = this.dataTermino ? this.dataTermino.toISOString() : <any>undefined;
        if (Array.isArray(this.preProjetos)) {
            data["preProjetos"] = [];
            for (let item of this.preProjetos)
                data["preProjetos"].push(item.toJSON());
        }
        if (Array.isArray(this.projetosPlurianuais)) {
            data["projetosPlurianuais"] = [];
            for (let item of this.projetosPlurianuais)
                data["projetosPlurianuais"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPortifolioVm {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
    preProjetos?: PreProjetoVm[] | undefined;
    projetosPlurianuais?: ProjetoPlurianualVm[] | undefined;
}

export class PaginatedListOfPortifolioRasoVm implements IPaginatedListOfPortifolioRasoVm {
    items?: PortifolioRasoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPortifolioRasoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PortifolioRasoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPortifolioRasoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPortifolioRasoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPortifolioRasoVm {
    items?: PortifolioRasoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PortifolioRasoVm implements IPortifolioRasoVm {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;

    constructor(data?: IPortifolioRasoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataTermino = _data["dataTermino"] ? new Date(_data["dataTermino"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PortifolioRasoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioRasoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataTermino"] = this.dataTermino ? this.dataTermino.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPortifolioRasoVm {
    id?: number;
    descricao?: string | undefined;
    dataInicio?: Date;
    dataTermino?: Date;
}

export class PortifolioIncluirProjetoCommand implements IPortifolioIncluirProjetoCommand {
    id?: number;
    portifolioId?: number;

    constructor(data?: IPortifolioIncluirProjetoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.portifolioId = _data["portifolioId"];
        }
    }

    static fromJS(data: any): PortifolioIncluirProjetoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioIncluirProjetoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["portifolioId"] = this.portifolioId;
        return data;
    }
}

export interface IPortifolioIncluirProjetoCommand {
    id?: number;
    portifolioId?: number;
}

export class PortifolioIncluirPreProjetoProjetoOuPlurianualCommand implements IPortifolioIncluirPreProjetoProjetoOuPlurianualCommand {
    portifolioId?: number | undefined;
    itens?: PortifolioIncluirPreProjetoProjetoOuPlurianualDto[] | undefined;

    constructor(data?: IPortifolioIncluirPreProjetoProjetoOuPlurianualCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.portifolioId = _data["portifolioId"];
            if (Array.isArray(_data["itens"])) {
                this.itens = [] as any;
                for (let item of _data["itens"])
                    this.itens!.push(PortifolioIncluirPreProjetoProjetoOuPlurianualDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PortifolioIncluirPreProjetoProjetoOuPlurianualCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioIncluirPreProjetoProjetoOuPlurianualCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portifolioId"] = this.portifolioId;
        if (Array.isArray(this.itens)) {
            data["itens"] = [];
            for (let item of this.itens)
                data["itens"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPortifolioIncluirPreProjetoProjetoOuPlurianualCommand {
    portifolioId?: number | undefined;
    itens?: PortifolioIncluirPreProjetoProjetoOuPlurianualDto[] | undefined;
}

export class PortifolioIncluirPreProjetoProjetoOuPlurianualDto implements IPortifolioIncluirPreProjetoProjetoOuPlurianualDto {
    id?: number;
    plurianual?: boolean;

    constructor(data?: IPortifolioIncluirPreProjetoProjetoOuPlurianualDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.plurianual = _data["plurianual"];
        }
    }

    static fromJS(data: any): PortifolioIncluirPreProjetoProjetoOuPlurianualDto {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioIncluirPreProjetoProjetoOuPlurianualDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["plurianual"] = this.plurianual;
        return data;
    }
}

export interface IPortifolioIncluirPreProjetoProjetoOuPlurianualDto {
    id?: number;
    plurianual?: boolean;
}

export class RelatorioOrcamentoDto implements IRelatorioOrcamentoDto {
    preProjetos?: PreProjetoOrcamentoDto[] | undefined;
    plurianuais?: PlurianuaOrcamentoDto[] | undefined;
    orcamentos?: OrcamentoMensalDto[] | undefined;
    revisado?: number;
    realizado?: number;
    saldo?: number;

    constructor(data?: IRelatorioOrcamentoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["preProjetos"])) {
                this.preProjetos = [] as any;
                for (let item of _data["preProjetos"])
                    this.preProjetos!.push(PreProjetoOrcamentoDto.fromJS(item));
            }
            if (Array.isArray(_data["plurianuais"])) {
                this.plurianuais = [] as any;
                for (let item of _data["plurianuais"])
                    this.plurianuais!.push(PlurianuaOrcamentoDto.fromJS(item));
            }
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(OrcamentoMensalDto.fromJS(item));
            }
            this.revisado = _data["revisado"];
            this.realizado = _data["realizado"];
            this.saldo = _data["saldo"];
        }
    }

    static fromJS(data: any): RelatorioOrcamentoDto {
        data = typeof data === 'object' ? data : {};
        let result = new RelatorioOrcamentoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.preProjetos)) {
            data["preProjetos"] = [];
            for (let item of this.preProjetos)
                data["preProjetos"].push(item.toJSON());
        }
        if (Array.isArray(this.plurianuais)) {
            data["plurianuais"] = [];
            for (let item of this.plurianuais)
                data["plurianuais"].push(item.toJSON());
        }
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["revisado"] = this.revisado;
        data["realizado"] = this.realizado;
        data["saldo"] = this.saldo;
        return data;
    }
}

export interface IRelatorioOrcamentoDto {
    preProjetos?: PreProjetoOrcamentoDto[] | undefined;
    plurianuais?: PlurianuaOrcamentoDto[] | undefined;
    orcamentos?: OrcamentoMensalDto[] | undefined;
    revisado?: number;
    realizado?: number;
    saldo?: number;
}

export class PreProjetoOrcamentoDto implements IPreProjetoOrcamentoDto {
    id?: number;
    nome?: string | undefined;
    codigoCentroCusto?: string | undefined;

    constructor(data?: IPreProjetoOrcamentoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigoCentroCusto = _data["codigoCentroCusto"];
        }
    }

    static fromJS(data: any): PreProjetoOrcamentoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoOrcamentoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigoCentroCusto"] = this.codigoCentroCusto;
        return data;
    }
}

export interface IPreProjetoOrcamentoDto {
    id?: number;
    nome?: string | undefined;
    codigoCentroCusto?: string | undefined;
}

export class PlurianuaOrcamentoDto implements IPlurianuaOrcamentoDto {
    id?: number;
    nome?: string | undefined;
    codigoCentroCusto?: string | undefined;

    constructor(data?: IPlurianuaOrcamentoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigoCentroCusto = _data["codigoCentroCusto"];
        }
    }

    static fromJS(data: any): PlurianuaOrcamentoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlurianuaOrcamentoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigoCentroCusto"] = this.codigoCentroCusto;
        return data;
    }
}

export interface IPlurianuaOrcamentoDto {
    id?: number;
    nome?: string | undefined;
    codigoCentroCusto?: string | undefined;
}

export class OrcamentoMensalDto implements IOrcamentoMensalDto {
    mes?: number;
    ano?: number;
    codigoCentroCusto?: string | undefined;
    orcado?: number;
    realizado?: number;
    dentroDoOrcamento?: boolean;

    constructor(data?: IOrcamentoMensalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mes = _data["mes"];
            this.ano = _data["ano"];
            this.codigoCentroCusto = _data["codigoCentroCusto"];
            this.orcado = _data["orcado"];
            this.realizado = _data["realizado"];
            this.dentroDoOrcamento = _data["dentroDoOrcamento"];
        }
    }

    static fromJS(data: any): OrcamentoMensalDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrcamentoMensalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mes"] = this.mes;
        data["ano"] = this.ano;
        data["codigoCentroCusto"] = this.codigoCentroCusto;
        data["orcado"] = this.orcado;
        data["realizado"] = this.realizado;
        data["dentroDoOrcamento"] = this.dentroDoOrcamento;
        return data;
    }
}

export interface IOrcamentoMensalDto {
    mes?: number;
    ano?: number;
    codigoCentroCusto?: string | undefined;
    orcado?: number;
    realizado?: number;
    dentroDoOrcamento?: boolean;
}

export class PortifolioObterRelatorioOrcamentoQuery implements IPortifolioObterRelatorioOrcamentoQuery {
    portifolioId?: number;
    dataInicio?: Date;
    dataFim?: Date;

    constructor(data?: IPortifolioObterRelatorioOrcamentoQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.portifolioId = _data["portifolioId"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataFim = _data["dataFim"] ? new Date(_data["dataFim"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PortifolioObterRelatorioOrcamentoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PortifolioObterRelatorioOrcamentoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portifolioId"] = this.portifolioId;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataFim"] = this.dataFim ? this.dataFim.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPortifolioObterRelatorioOrcamentoQuery {
    portifolioId?: number;
    dataInicio?: Date;
    dataFim?: Date;
}

export class PaginatedListOfPreProjetoVm implements IPaginatedListOfPreProjetoVm {
    items?: PreProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPreProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PreProjetoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPreProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPreProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPreProjetoVm {
    items?: PreProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PreProjetosObterQuery extends QueryRequestBase implements IPreProjetosObterQuery {
    id?: number | undefined;
    dataInicio?: Date | undefined;
    dataFim?: Date | undefined;
    departamentoId?: number | undefined;
    loginGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    projetoNome?: string | undefined;
    situacao?: SituacaoPreProjeto | undefined;

    constructor(data?: IPreProjetosObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataFim = _data["dataFim"] ? new Date(_data["dataFim"].toString()) : <any>undefined;
            this.departamentoId = _data["departamentoId"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.loginGerenteNegocio = _data["loginGerenteNegocio"];
            this.loginSponsor = _data["loginSponsor"];
            this.projetoNome = _data["projetoNome"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): PreProjetosObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetosObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataFim"] = this.dataFim ? this.dataFim.toISOString() : <any>undefined;
        data["departamentoId"] = this.departamentoId;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["loginGerenteNegocio"] = this.loginGerenteNegocio;
        data["loginSponsor"] = this.loginSponsor;
        data["projetoNome"] = this.projetoNome;
        data["situacao"] = this.situacao;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetosObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    dataInicio?: Date | undefined;
    dataFim?: Date | undefined;
    departamentoId?: number | undefined;
    loginGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    projetoNome?: string | undefined;
    situacao?: SituacaoPreProjeto | undefined;
}

export class PreProjetosObterArquivadosQuery extends QueryRequestBase implements IPreProjetosObterArquivadosQuery {
    id?: number | undefined;
    dataInicio?: Date | undefined;
    dataFim?: Date | undefined;
    departamentoId?: number | undefined;
    loginGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    projetoNome?: string | undefined;
    situacao?: SituacaoPreProjeto | undefined;

    constructor(data?: IPreProjetosObterArquivadosQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataFim = _data["dataFim"] ? new Date(_data["dataFim"].toString()) : <any>undefined;
            this.departamentoId = _data["departamentoId"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.loginGerenteNegocio = _data["loginGerenteNegocio"];
            this.loginSponsor = _data["loginSponsor"];
            this.projetoNome = _data["projetoNome"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): PreProjetosObterArquivadosQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetosObterArquivadosQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataFim"] = this.dataFim ? this.dataFim.toISOString() : <any>undefined;
        data["departamentoId"] = this.departamentoId;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["loginGerenteNegocio"] = this.loginGerenteNegocio;
        data["loginSponsor"] = this.loginSponsor;
        data["projetoNome"] = this.projetoNome;
        data["situacao"] = this.situacao;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetosObterArquivadosQuery extends IQueryRequestBase {
    id?: number | undefined;
    dataInicio?: Date | undefined;
    dataFim?: Date | undefined;
    departamentoId?: number | undefined;
    loginGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    projetoNome?: string | undefined;
    situacao?: SituacaoPreProjeto | undefined;
}

export class PreProjetoSalvarCommand implements IPreProjetoSalvarCommand {
    nome?: string | undefined;
    departamentoId?: number | undefined;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    ideia?: string | undefined;
    atendeRequisitoLegal?: boolean | undefined;
    descricaoAtendeRequisitoLegal?: string | undefined;
    possuiAlinhamentoObjetivosEstrategicos?: boolean | undefined;
    descricaoPossuiAlinhamentoObjetivosEstrategicos?: string | undefined;
    possuiVinculoEstrategiaOperacao?: boolean | undefined;
    descricaoPossuiVinculoEstrategiaOperacao?: string | undefined;
    acrescentaProdutoServico?: boolean | undefined;
    descricaoAcrescentaProdutoServico?: string | undefined;
    zonaRisco?: ZonaRisco | undefined;
    descricaoZonaRisco?: string | undefined;
    abrangenciaResultadoRestrigeApenasPropriaArea?: boolean | undefined;
    descricaoAbrangenciaResultadoRestrigeApenasPropriaArea?: string | undefined;
    stakeHolders?: number[] | undefined;
    possuiNovasAquisicoes?: boolean | undefined;
    descricaoPossuiNovasAquisicoes?: string | undefined;
    necessarioNovosConhecimentos?: boolean | undefined;
    descricaoNecessarioNovosConhecimentos?: string | undefined;
    enviarPmo?: boolean;
    areasEnvolvidas?: number[] | undefined;
    pontuacaoWorkshop?: number | undefined;
    cestaId?: number | undefined;
    portifolioId?: number | undefined;
    objetivosEstrategicos?: number[] | undefined;
    origem?: OrigemPreProjeto | undefined;

    constructor(data?: IPreProjetoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.departamentoId = _data["departamentoId"];
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.loginGerenteNegocio = _data["loginGerenteNegocio"];
            this.nomeGerenteNegocio = _data["nomeGerenteNegocio"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.ideia = _data["ideia"];
            this.atendeRequisitoLegal = _data["atendeRequisitoLegal"];
            this.descricaoAtendeRequisitoLegal = _data["descricaoAtendeRequisitoLegal"];
            this.possuiAlinhamentoObjetivosEstrategicos = _data["possuiAlinhamentoObjetivosEstrategicos"];
            this.descricaoPossuiAlinhamentoObjetivosEstrategicos = _data["descricaoPossuiAlinhamentoObjetivosEstrategicos"];
            this.possuiVinculoEstrategiaOperacao = _data["possuiVinculoEstrategiaOperacao"];
            this.descricaoPossuiVinculoEstrategiaOperacao = _data["descricaoPossuiVinculoEstrategiaOperacao"];
            this.acrescentaProdutoServico = _data["acrescentaProdutoServico"];
            this.descricaoAcrescentaProdutoServico = _data["descricaoAcrescentaProdutoServico"];
            this.zonaRisco = _data["zonaRisco"];
            this.descricaoZonaRisco = _data["descricaoZonaRisco"];
            this.abrangenciaResultadoRestrigeApenasPropriaArea = _data["abrangenciaResultadoRestrigeApenasPropriaArea"];
            this.descricaoAbrangenciaResultadoRestrigeApenasPropriaArea = _data["descricaoAbrangenciaResultadoRestrigeApenasPropriaArea"];
            if (Array.isArray(_data["stakeHolders"])) {
                this.stakeHolders = [] as any;
                for (let item of _data["stakeHolders"])
                    this.stakeHolders!.push(item);
            }
            this.possuiNovasAquisicoes = _data["possuiNovasAquisicoes"];
            this.descricaoPossuiNovasAquisicoes = _data["descricaoPossuiNovasAquisicoes"];
            this.necessarioNovosConhecimentos = _data["necessarioNovosConhecimentos"];
            this.descricaoNecessarioNovosConhecimentos = _data["descricaoNecessarioNovosConhecimentos"];
            this.enviarPmo = _data["enviarPmo"];
            if (Array.isArray(_data["areasEnvolvidas"])) {
                this.areasEnvolvidas = [] as any;
                for (let item of _data["areasEnvolvidas"])
                    this.areasEnvolvidas!.push(item);
            }
            this.pontuacaoWorkshop = _data["pontuacaoWorkshop"];
            this.cestaId = _data["cestaId"];
            this.portifolioId = _data["portifolioId"];
            if (Array.isArray(_data["objetivosEstrategicos"])) {
                this.objetivosEstrategicos = [] as any;
                for (let item of _data["objetivosEstrategicos"])
                    this.objetivosEstrategicos!.push(item);
            }
            this.origem = _data["origem"];
        }
    }

    static fromJS(data: any): PreProjetoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["departamentoId"] = this.departamentoId;
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["loginGerenteNegocio"] = this.loginGerenteNegocio;
        data["nomeGerenteNegocio"] = this.nomeGerenteNegocio;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["ideia"] = this.ideia;
        data["atendeRequisitoLegal"] = this.atendeRequisitoLegal;
        data["descricaoAtendeRequisitoLegal"] = this.descricaoAtendeRequisitoLegal;
        data["possuiAlinhamentoObjetivosEstrategicos"] = this.possuiAlinhamentoObjetivosEstrategicos;
        data["descricaoPossuiAlinhamentoObjetivosEstrategicos"] = this.descricaoPossuiAlinhamentoObjetivosEstrategicos;
        data["possuiVinculoEstrategiaOperacao"] = this.possuiVinculoEstrategiaOperacao;
        data["descricaoPossuiVinculoEstrategiaOperacao"] = this.descricaoPossuiVinculoEstrategiaOperacao;
        data["acrescentaProdutoServico"] = this.acrescentaProdutoServico;
        data["descricaoAcrescentaProdutoServico"] = this.descricaoAcrescentaProdutoServico;
        data["zonaRisco"] = this.zonaRisco;
        data["descricaoZonaRisco"] = this.descricaoZonaRisco;
        data["abrangenciaResultadoRestrigeApenasPropriaArea"] = this.abrangenciaResultadoRestrigeApenasPropriaArea;
        data["descricaoAbrangenciaResultadoRestrigeApenasPropriaArea"] = this.descricaoAbrangenciaResultadoRestrigeApenasPropriaArea;
        if (Array.isArray(this.stakeHolders)) {
            data["stakeHolders"] = [];
            for (let item of this.stakeHolders)
                data["stakeHolders"].push(item);
        }
        data["possuiNovasAquisicoes"] = this.possuiNovasAquisicoes;
        data["descricaoPossuiNovasAquisicoes"] = this.descricaoPossuiNovasAquisicoes;
        data["necessarioNovosConhecimentos"] = this.necessarioNovosConhecimentos;
        data["descricaoNecessarioNovosConhecimentos"] = this.descricaoNecessarioNovosConhecimentos;
        data["enviarPmo"] = this.enviarPmo;
        if (Array.isArray(this.areasEnvolvidas)) {
            data["areasEnvolvidas"] = [];
            for (let item of this.areasEnvolvidas)
                data["areasEnvolvidas"].push(item);
        }
        data["pontuacaoWorkshop"] = this.pontuacaoWorkshop;
        data["cestaId"] = this.cestaId;
        data["portifolioId"] = this.portifolioId;
        if (Array.isArray(this.objetivosEstrategicos)) {
            data["objetivosEstrategicos"] = [];
            for (let item of this.objetivosEstrategicos)
                data["objetivosEstrategicos"].push(item);
        }
        data["origem"] = this.origem;
        return data;
    }
}

export interface IPreProjetoSalvarCommand {
    nome?: string | undefined;
    departamentoId?: number | undefined;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    ideia?: string | undefined;
    atendeRequisitoLegal?: boolean | undefined;
    descricaoAtendeRequisitoLegal?: string | undefined;
    possuiAlinhamentoObjetivosEstrategicos?: boolean | undefined;
    descricaoPossuiAlinhamentoObjetivosEstrategicos?: string | undefined;
    possuiVinculoEstrategiaOperacao?: boolean | undefined;
    descricaoPossuiVinculoEstrategiaOperacao?: string | undefined;
    acrescentaProdutoServico?: boolean | undefined;
    descricaoAcrescentaProdutoServico?: string | undefined;
    zonaRisco?: ZonaRisco | undefined;
    descricaoZonaRisco?: string | undefined;
    abrangenciaResultadoRestrigeApenasPropriaArea?: boolean | undefined;
    descricaoAbrangenciaResultadoRestrigeApenasPropriaArea?: string | undefined;
    stakeHolders?: number[] | undefined;
    possuiNovasAquisicoes?: boolean | undefined;
    descricaoPossuiNovasAquisicoes?: string | undefined;
    necessarioNovosConhecimentos?: boolean | undefined;
    descricaoNecessarioNovosConhecimentos?: string | undefined;
    enviarPmo?: boolean;
    areasEnvolvidas?: number[] | undefined;
    pontuacaoWorkshop?: number | undefined;
    cestaId?: number | undefined;
    portifolioId?: number | undefined;
    objetivosEstrategicos?: number[] | undefined;
    origem?: OrigemPreProjeto | undefined;
}

export class PreProjetoCriarCommand extends PreProjetoSalvarCommand implements IPreProjetoCriarCommand {

    constructor(data?: IPreProjetoCriarCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): PreProjetoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetoCriarCommand extends IPreProjetoSalvarCommand {
}

export class PreProjetoAlterarCommand extends PreProjetoSalvarCommand implements IPreProjetoAlterarCommand {
    id?: number;
    descricaoParecerDepartamentoJuridico?: string | undefined;
    descricaoParecerDepartamentoRiscos?: string | undefined;
    observacaoOrcamentos?: string | undefined;

    constructor(data?: IPreProjetoAlterarCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.descricaoParecerDepartamentoJuridico = _data["descricaoParecerDepartamentoJuridico"];
            this.descricaoParecerDepartamentoRiscos = _data["descricaoParecerDepartamentoRiscos"];
            this.observacaoOrcamentos = _data["observacaoOrcamentos"];
        }
    }

    static fromJS(data: any): PreProjetoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricaoParecerDepartamentoJuridico"] = this.descricaoParecerDepartamentoJuridico;
        data["descricaoParecerDepartamentoRiscos"] = this.descricaoParecerDepartamentoRiscos;
        data["observacaoOrcamentos"] = this.observacaoOrcamentos;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetoAlterarCommand extends IPreProjetoSalvarCommand {
    id?: number;
    descricaoParecerDepartamentoJuridico?: string | undefined;
    descricaoParecerDepartamentoRiscos?: string | undefined;
    observacaoOrcamentos?: string | undefined;
}

export class PreProjetoAlterarParecerCommand implements IPreProjetoAlterarParecerCommand {
    preProjetoId?: number;
    tipoParecer?: TipoParecer;
    parecer?: string | undefined;
    situacao?: SituacaoParecer;

    constructor(data?: IPreProjetoAlterarParecerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preProjetoId = _data["preProjetoId"];
            this.tipoParecer = _data["tipoParecer"];
            this.parecer = _data["parecer"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): PreProjetoAlterarParecerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoAlterarParecerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preProjetoId"] = this.preProjetoId;
        data["tipoParecer"] = this.tipoParecer;
        data["parecer"] = this.parecer;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface IPreProjetoAlterarParecerCommand {
    preProjetoId?: number;
    tipoParecer?: TipoParecer;
    parecer?: string | undefined;
    situacao?: SituacaoParecer;
}

export enum TipoParecer {
    Juridico = 0,
    Dpo = 1,
    Riscos = 2,
    Qualidade = 3,
}

export class PreProjetoAlterarSituacaoCommand implements IPreProjetoAlterarSituacaoCommand {
    preProjetoId?: number;
    situacao?: SituacaoPreProjeto;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    observacao?: string | undefined;
    dataProjeto?: Date | undefined;

    constructor(data?: IPreProjetoAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preProjetoId = _data["preProjetoId"];
            this.situacao = _data["situacao"];
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            this.observacao = _data["observacao"];
            this.dataProjeto = _data["dataProjeto"] ? new Date(_data["dataProjeto"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PreProjetoAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preProjetoId"] = this.preProjetoId;
        data["situacao"] = this.situacao;
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        data["observacao"] = this.observacao;
        data["dataProjeto"] = this.dataProjeto ? this.dataProjeto.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPreProjetoAlterarSituacaoCommand {
    preProjetoId?: number;
    situacao?: SituacaoPreProjeto;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    observacao?: string | undefined;
    dataProjeto?: Date | undefined;
}

export class PreProjetoOrcamentoCriarCommand implements IPreProjetoOrcamentoCriarCommand {
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    projetoId?: number;

    constructor(data?: IPreProjetoOrcamentoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): PreProjetoOrcamentoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoOrcamentoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IPreProjetoOrcamentoCriarCommand {
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    projetoId?: number;
}

export class PreProjetoOrcamentoAlterarCommand implements IPreProjetoOrcamentoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    projetoId?: number;

    constructor(data?: IPreProjetoOrcamentoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): PreProjetoOrcamentoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoOrcamentoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IPreProjetoOrcamentoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    projetoId?: number;
}

export class PreProjetoOrcamentoAlterarSituacaoCommand implements IPreProjetoOrcamentoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoPreProjetoOrcamento;

    constructor(data?: IPreProjetoOrcamentoAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): PreProjetoOrcamentoAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoOrcamentoAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface IPreProjetoOrcamentoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoPreProjetoOrcamento;
}

export class PaginatedListOfPermissaoAcessoPreProjetoVm implements IPaginatedListOfPermissaoAcessoPreProjetoVm {
    items?: PermissaoAcessoPreProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPermissaoAcessoPreProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PermissaoAcessoPreProjetoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPermissaoAcessoPreProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPermissaoAcessoPreProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPermissaoAcessoPreProjetoVm {
    items?: PermissaoAcessoPreProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PermissaoAcessoPreProjetoVm implements IPermissaoAcessoPreProjetoVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoPreProjetoTipo;
    permissaoDescricao?: string | undefined;
    preProjetoId?: number;

    constructor(data?: IPermissaoAcessoPreProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.permissao = _data["permissao"];
            this.permissaoDescricao = _data["permissaoDescricao"];
            this.preProjetoId = _data["preProjetoId"];
        }
    }

    static fromJS(data: any): PermissaoAcessoPreProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PermissaoAcessoPreProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["permissao"] = this.permissao;
        data["permissaoDescricao"] = this.permissaoDescricao;
        data["preProjetoId"] = this.preProjetoId;
        return data;
    }
}

export interface IPermissaoAcessoPreProjetoVm {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoPreProjetoTipo;
    permissaoDescricao?: string | undefined;
    preProjetoId?: number;
}

export class PreProjetoObterPermissoesAcessoQuery extends QueryRequestBase implements IPreProjetoObterPermissoesAcessoQuery {
    projetoId?: number;

    constructor(data?: IPreProjetoObterPermissoesAcessoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): PreProjetoObterPermissoesAcessoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoObterPermissoesAcessoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        super.toJSON(data);
        return data;
    }
}

export interface IPreProjetoObterPermissoesAcessoQuery extends IQueryRequestBase {
    projetoId?: number;
}

export class PreProjetoAdicionarPermissaoAcessoCommand implements IPreProjetoAdicionarPermissaoAcessoCommand {
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoPreProjetoTipo;
    preProjetoId?: number;

    constructor(data?: IPreProjetoAdicionarPermissaoAcessoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.permissao = _data["permissao"];
            this.preProjetoId = _data["preProjetoId"];
        }
    }

    static fromJS(data: any): PreProjetoAdicionarPermissaoAcessoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoAdicionarPermissaoAcessoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["permissao"] = this.permissao;
        data["preProjetoId"] = this.preProjetoId;
        return data;
    }
}

export interface IPreProjetoAdicionarPermissaoAcessoCommand {
    login?: string | undefined;
    nome?: string | undefined;
    permissao?: PermissaoAcessoPreProjetoTipo;
    preProjetoId?: number;
}

export class PreProjetoAlterarPermissaoAcessoCommand implements IPreProjetoAlterarPermissaoAcessoCommand {
    id?: number;
    permissao?: PermissaoAcessoPreProjetoTipo;

    constructor(data?: IPreProjetoAlterarPermissaoAcessoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.permissao = _data["permissao"];
        }
    }

    static fromJS(data: any): PreProjetoAlterarPermissaoAcessoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreProjetoAlterarPermissaoAcessoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["permissao"] = this.permissao;
        return data;
    }
}

export interface IPreProjetoAlterarPermissaoAcessoCommand {
    id?: number;
    permissao?: PermissaoAcessoPreProjetoTipo;
}

export class PontuacaoVm implements IPontuacaoVm {
    pontuacao?: number;
    tipoProjeto?: string | undefined;

    constructor(data?: IPontuacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pontuacao = _data["pontuacao"];
            this.tipoProjeto = _data["tipoProjeto"];
        }
    }

    static fromJS(data: any): PontuacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PontuacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pontuacao"] = this.pontuacao;
        data["tipoProjeto"] = this.tipoProjeto;
        return data;
    }
}

export interface IPontuacaoVm {
    pontuacao?: number;
    tipoProjeto?: string | undefined;
}

export class ProdutoVm implements IProdutoVm {
    id?: number;
    nome?: string | undefined;

    constructor(data?: IProdutoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): ProdutoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProdutoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IProdutoVm {
    id?: number;
    nome?: string | undefined;
}

export class ProjetoCriarCommand implements IProjetoCriarCommand {
    nome?: string | undefined;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
    codigoCentroCustoReduzido?: string | undefined;

    constructor(data?: IProjetoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.objetivoDoProjeto = _data["objetivoDoProjeto"];
            this.escopoDoProjeto = _data["escopoDoProjeto"];
            this.premissasDoProjeto = _data["premissasDoProjeto"];
            this.restricoesDoProjeto = _data["restricoesDoProjeto"];
            this.riscosDoProjeto = _data["riscosDoProjeto"];
            this.comentarios = _data["comentarios"];
            this.codigoCentroCustoReduzido = _data["codigoCentroCustoReduzido"];
        }
    }

    static fromJS(data: any): ProjetoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["objetivoDoProjeto"] = this.objetivoDoProjeto;
        data["escopoDoProjeto"] = this.escopoDoProjeto;
        data["premissasDoProjeto"] = this.premissasDoProjeto;
        data["restricoesDoProjeto"] = this.restricoesDoProjeto;
        data["riscosDoProjeto"] = this.riscosDoProjeto;
        data["comentarios"] = this.comentarios;
        data["codigoCentroCustoReduzido"] = this.codigoCentroCustoReduzido;
        return data;
    }
}

export interface IProjetoCriarCommand {
    nome?: string | undefined;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
    codigoCentroCustoReduzido?: string | undefined;
}

export class PaginatedListOfProjetoVm implements IPaginatedListOfProjetoVm {
    items?: ProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProjetoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfProjetoVm {
    items?: ProjetoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ProjetoVm implements IProjetoVm {
    id?: number;
    nome?: string | undefined;
    codigoCentroCustoReduzido?: string | undefined;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
    preProjetoId?: number;
    preProjeto?: PreProjetoVm | undefined;
    status?: StatusProjeto;
    statusDescricao?: string | undefined;
    motivoPausaCancelamento?: string | undefined;
    planoDeComunicacaoVm?: PlanoDeComunicacaoVm[] | undefined;
    riscoVm?: RiscoVm[] | undefined;
    centroCusto?: CentroCustoVm | undefined;
    situacao?: SituacaoProjeto;
    situacaoDescricao?: string | undefined;
    cronogramaStatus?: StatusCronograma | undefined;
    cronogramaStatusDescricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    quantidadeTotal?: number;
    quantidadeRealizado?: number;
    quantidadeEmAndamento?: number;
    quantidadeAtrasado?: number;
    quantidadeCancelado?: number;
    valorTotal?: number;
    valorRealizado?: number;
    valorSaldo?: number;
    equipesProjeto?: EquipeProjetoVm[] | undefined;
    acompanhamentoOrcamentario?: AcompanhamentoOrcamentarioVm[] | undefined;
    cronogramas?: CronogramaVm[] | undefined;
    projetosPlurianuais?: ProjetoPlurianualVm[] | undefined;
    possuiPlurianualPendente?: boolean | undefined;
    plurianualPendenteId?: number | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalhoVm[] | undefined;
    orcamentos?: OrcamentoExtraVm[] | undefined;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    dataCriacao?: Date;
    anosPlurianualidade?: AnosPlurianualidade[] | undefined;
    dataProjeto?: Date;

    constructor(data?: IProjetoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigoCentroCustoReduzido = _data["codigoCentroCustoReduzido"];
            this.objetivoDoProjeto = _data["objetivoDoProjeto"];
            this.escopoDoProjeto = _data["escopoDoProjeto"];
            this.premissasDoProjeto = _data["premissasDoProjeto"];
            this.restricoesDoProjeto = _data["restricoesDoProjeto"];
            this.riscosDoProjeto = _data["riscosDoProjeto"];
            this.comentarios = _data["comentarios"];
            this.preProjetoId = _data["preProjetoId"];
            this.preProjeto = _data["preProjeto"] ? PreProjetoVm.fromJS(_data["preProjeto"]) : <any>undefined;
            this.status = _data["status"];
            this.statusDescricao = _data["statusDescricao"];
            this.motivoPausaCancelamento = _data["motivoPausaCancelamento"];
            if (Array.isArray(_data["planoDeComunicacaoVm"])) {
                this.planoDeComunicacaoVm = [] as any;
                for (let item of _data["planoDeComunicacaoVm"])
                    this.planoDeComunicacaoVm!.push(PlanoDeComunicacaoVm.fromJS(item));
            }
            if (Array.isArray(_data["riscoVm"])) {
                this.riscoVm = [] as any;
                for (let item of _data["riscoVm"])
                    this.riscoVm!.push(RiscoVm.fromJS(item));
            }
            this.centroCusto = _data["centroCusto"] ? CentroCustoVm.fromJS(_data["centroCusto"]) : <any>undefined;
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.cronogramaStatus = _data["cronogramaStatus"];
            this.cronogramaStatusDescricao = _data["cronogramaStatusDescricao"];
            this.planejado = _data["planejado"];
            this.real = _data["real"];
            this.quantidadeTotal = _data["quantidadeTotal"];
            this.quantidadeRealizado = _data["quantidadeRealizado"];
            this.quantidadeEmAndamento = _data["quantidadeEmAndamento"];
            this.quantidadeAtrasado = _data["quantidadeAtrasado"];
            this.quantidadeCancelado = _data["quantidadeCancelado"];
            this.valorTotal = _data["valorTotal"];
            this.valorRealizado = _data["valorRealizado"];
            this.valorSaldo = _data["valorSaldo"];
            if (Array.isArray(_data["equipesProjeto"])) {
                this.equipesProjeto = [] as any;
                for (let item of _data["equipesProjeto"])
                    this.equipesProjeto!.push(EquipeProjetoVm.fromJS(item));
            }
            if (Array.isArray(_data["acompanhamentoOrcamentario"])) {
                this.acompanhamentoOrcamentario = [] as any;
                for (let item of _data["acompanhamentoOrcamentario"])
                    this.acompanhamentoOrcamentario!.push(AcompanhamentoOrcamentarioVm.fromJS(item));
            }
            if (Array.isArray(_data["cronogramas"])) {
                this.cronogramas = [] as any;
                for (let item of _data["cronogramas"])
                    this.cronogramas!.push(CronogramaVm.fromJS(item));
            }
            if (Array.isArray(_data["projetosPlurianuais"])) {
                this.projetosPlurianuais = [] as any;
                for (let item of _data["projetosPlurianuais"])
                    this.projetosPlurianuais!.push(ProjetoPlurianualVm.fromJS(item));
            }
            this.possuiPlurianualPendente = _data["possuiPlurianualPendente"];
            this.plurianualPendenteId = _data["plurianualPendenteId"];
            if (Array.isArray(_data["declaracoesTrabalho"])) {
                this.declaracoesTrabalho = [] as any;
                for (let item of _data["declaracoesTrabalho"])
                    this.declaracoesTrabalho!.push(DeclaracaoTrabalhoVm.fromJS(item));
            }
            if (Array.isArray(_data["orcamentos"])) {
                this.orcamentos = [] as any;
                for (let item of _data["orcamentos"])
                    this.orcamentos!.push(OrcamentoExtraVm.fromJS(item));
            }
            this.loginGerenteProjeto = _data["loginGerenteProjeto"];
            this.nomeGerenteProjeto = _data["nomeGerenteProjeto"];
            this.loginGerenteNegocio = _data["loginGerenteNegocio"];
            this.nomeGerenteNegocio = _data["nomeGerenteNegocio"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
            if (Array.isArray(_data["anosPlurianualidade"])) {
                this.anosPlurianualidade = [] as any;
                for (let item of _data["anosPlurianualidade"])
                    this.anosPlurianualidade!.push(AnosPlurianualidade.fromJS(item));
            }
            this.dataProjeto = _data["dataProjeto"] ? new Date(_data["dataProjeto"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProjetoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigoCentroCustoReduzido"] = this.codigoCentroCustoReduzido;
        data["objetivoDoProjeto"] = this.objetivoDoProjeto;
        data["escopoDoProjeto"] = this.escopoDoProjeto;
        data["premissasDoProjeto"] = this.premissasDoProjeto;
        data["restricoesDoProjeto"] = this.restricoesDoProjeto;
        data["riscosDoProjeto"] = this.riscosDoProjeto;
        data["comentarios"] = this.comentarios;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjeto"] = this.preProjeto ? this.preProjeto.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["statusDescricao"] = this.statusDescricao;
        data["motivoPausaCancelamento"] = this.motivoPausaCancelamento;
        if (Array.isArray(this.planoDeComunicacaoVm)) {
            data["planoDeComunicacaoVm"] = [];
            for (let item of this.planoDeComunicacaoVm)
                data["planoDeComunicacaoVm"].push(item.toJSON());
        }
        if (Array.isArray(this.riscoVm)) {
            data["riscoVm"] = [];
            for (let item of this.riscoVm)
                data["riscoVm"].push(item.toJSON());
        }
        data["centroCusto"] = this.centroCusto ? this.centroCusto.toJSON() : <any>undefined;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["cronogramaStatus"] = this.cronogramaStatus;
        data["cronogramaStatusDescricao"] = this.cronogramaStatusDescricao;
        data["planejado"] = this.planejado;
        data["real"] = this.real;
        data["quantidadeTotal"] = this.quantidadeTotal;
        data["quantidadeRealizado"] = this.quantidadeRealizado;
        data["quantidadeEmAndamento"] = this.quantidadeEmAndamento;
        data["quantidadeAtrasado"] = this.quantidadeAtrasado;
        data["quantidadeCancelado"] = this.quantidadeCancelado;
        data["valorTotal"] = this.valorTotal;
        data["valorRealizado"] = this.valorRealizado;
        data["valorSaldo"] = this.valorSaldo;
        if (Array.isArray(this.equipesProjeto)) {
            data["equipesProjeto"] = [];
            for (let item of this.equipesProjeto)
                data["equipesProjeto"].push(item.toJSON());
        }
        if (Array.isArray(this.acompanhamentoOrcamentario)) {
            data["acompanhamentoOrcamentario"] = [];
            for (let item of this.acompanhamentoOrcamentario)
                data["acompanhamentoOrcamentario"].push(item.toJSON());
        }
        if (Array.isArray(this.cronogramas)) {
            data["cronogramas"] = [];
            for (let item of this.cronogramas)
                data["cronogramas"].push(item.toJSON());
        }
        if (Array.isArray(this.projetosPlurianuais)) {
            data["projetosPlurianuais"] = [];
            for (let item of this.projetosPlurianuais)
                data["projetosPlurianuais"].push(item.toJSON());
        }
        data["possuiPlurianualPendente"] = this.possuiPlurianualPendente;
        data["plurianualPendenteId"] = this.plurianualPendenteId;
        if (Array.isArray(this.declaracoesTrabalho)) {
            data["declaracoesTrabalho"] = [];
            for (let item of this.declaracoesTrabalho)
                data["declaracoesTrabalho"].push(item.toJSON());
        }
        if (Array.isArray(this.orcamentos)) {
            data["orcamentos"] = [];
            for (let item of this.orcamentos)
                data["orcamentos"].push(item.toJSON());
        }
        data["loginGerenteProjeto"] = this.loginGerenteProjeto;
        data["nomeGerenteProjeto"] = this.nomeGerenteProjeto;
        data["loginGerenteNegocio"] = this.loginGerenteNegocio;
        data["nomeGerenteNegocio"] = this.nomeGerenteNegocio;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        if (Array.isArray(this.anosPlurianualidade)) {
            data["anosPlurianualidade"] = [];
            for (let item of this.anosPlurianualidade)
                data["anosPlurianualidade"].push(item.toJSON());
        }
        data["dataProjeto"] = this.dataProjeto ? this.dataProjeto.toISOString() : <any>undefined;
        return data;
    }
}

export interface IProjetoVm {
    id?: number;
    nome?: string | undefined;
    codigoCentroCustoReduzido?: string | undefined;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
    preProjetoId?: number;
    preProjeto?: PreProjetoVm | undefined;
    status?: StatusProjeto;
    statusDescricao?: string | undefined;
    motivoPausaCancelamento?: string | undefined;
    planoDeComunicacaoVm?: PlanoDeComunicacaoVm[] | undefined;
    riscoVm?: RiscoVm[] | undefined;
    centroCusto?: CentroCustoVm | undefined;
    situacao?: SituacaoProjeto;
    situacaoDescricao?: string | undefined;
    cronogramaStatus?: StatusCronograma | undefined;
    cronogramaStatusDescricao?: string | undefined;
    planejado?: number | undefined;
    real?: number | undefined;
    quantidadeTotal?: number;
    quantidadeRealizado?: number;
    quantidadeEmAndamento?: number;
    quantidadeAtrasado?: number;
    quantidadeCancelado?: number;
    valorTotal?: number;
    valorRealizado?: number;
    valorSaldo?: number;
    equipesProjeto?: EquipeProjetoVm[] | undefined;
    acompanhamentoOrcamentario?: AcompanhamentoOrcamentarioVm[] | undefined;
    cronogramas?: CronogramaVm[] | undefined;
    projetosPlurianuais?: ProjetoPlurianualVm[] | undefined;
    possuiPlurianualPendente?: boolean | undefined;
    plurianualPendenteId?: number | undefined;
    declaracoesTrabalho?: DeclaracaoTrabalhoVm[] | undefined;
    orcamentos?: OrcamentoExtraVm[] | undefined;
    loginGerenteProjeto?: string | undefined;
    nomeGerenteProjeto?: string | undefined;
    loginGerenteNegocio?: string | undefined;
    nomeGerenteNegocio?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    dataCriacao?: Date;
    anosPlurianualidade?: AnosPlurianualidade[] | undefined;
    dataProjeto?: Date;
}

export class PlanoDeComunicacaoVm implements IPlanoDeComunicacaoVm {
    id?: number;
    conteudo?: string | undefined;
    publico?: string | undefined;
    periodicidadeVm?: PeriodicidadeVm | undefined;
    produtoVm?: ProdutoVm | undefined;

    constructor(data?: IPlanoDeComunicacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.conteudo = _data["conteudo"];
            this.publico = _data["publico"];
            this.periodicidadeVm = _data["periodicidadeVm"] ? PeriodicidadeVm.fromJS(_data["periodicidadeVm"]) : <any>undefined;
            this.produtoVm = _data["produtoVm"] ? ProdutoVm.fromJS(_data["produtoVm"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PlanoDeComunicacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PlanoDeComunicacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["conteudo"] = this.conteudo;
        data["publico"] = this.publico;
        data["periodicidadeVm"] = this.periodicidadeVm ? this.periodicidadeVm.toJSON() : <any>undefined;
        data["produtoVm"] = this.produtoVm ? this.produtoVm.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPlanoDeComunicacaoVm {
    id?: number;
    conteudo?: string | undefined;
    publico?: string | undefined;
    periodicidadeVm?: PeriodicidadeVm | undefined;
    produtoVm?: ProdutoVm | undefined;
}

export class RiscoVm implements IRiscoVm {
    id?: number;
    descricao?: string | undefined;
    impacto?: string | undefined;
    probabilidade?: string | undefined;
    planoDeAcao?: string | undefined;

    constructor(data?: IRiscoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.impacto = _data["impacto"];
            this.probabilidade = _data["probabilidade"];
            this.planoDeAcao = _data["planoDeAcao"];
        }
    }

    static fromJS(data: any): RiscoVm {
        data = typeof data === 'object' ? data : {};
        let result = new RiscoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["impacto"] = this.impacto;
        data["probabilidade"] = this.probabilidade;
        data["planoDeAcao"] = this.planoDeAcao;
        return data;
    }
}

export interface IRiscoVm {
    id?: number;
    descricao?: string | undefined;
    impacto?: string | undefined;
    probabilidade?: string | undefined;
    planoDeAcao?: string | undefined;
}

export class AcompanhamentoOrcamentarioVm implements IAcompanhamentoOrcamentarioVm {
    codigoCentroCustoReduzido?: string | undefined;
    centroCusto?: string | undefined;
    codigoConta?: string | undefined;
    conta?: string | undefined;
    mes?: number;
    ano?: number;
    orcado?: number;
    realizado?: number;

    constructor(data?: IAcompanhamentoOrcamentarioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.codigoCentroCustoReduzido = _data["codigoCentroCustoReduzido"];
            this.centroCusto = _data["centroCusto"];
            this.codigoConta = _data["codigoConta"];
            this.conta = _data["conta"];
            this.mes = _data["mes"];
            this.ano = _data["ano"];
            this.orcado = _data["orcado"];
            this.realizado = _data["realizado"];
        }
    }

    static fromJS(data: any): AcompanhamentoOrcamentarioVm {
        data = typeof data === 'object' ? data : {};
        let result = new AcompanhamentoOrcamentarioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codigoCentroCustoReduzido"] = this.codigoCentroCustoReduzido;
        data["centroCusto"] = this.centroCusto;
        data["codigoConta"] = this.codigoConta;
        data["conta"] = this.conta;
        data["mes"] = this.mes;
        data["ano"] = this.ano;
        data["orcado"] = this.orcado;
        data["realizado"] = this.realizado;
        return data;
    }
}

export interface IAcompanhamentoOrcamentarioVm {
    codigoCentroCustoReduzido?: string | undefined;
    centroCusto?: string | undefined;
    codigoConta?: string | undefined;
    conta?: string | undefined;
    mes?: number;
    ano?: number;
    orcado?: number;
    realizado?: number;
}

export class OrcamentoExtraVm implements IOrcamentoExtraVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
    situacao?: SituacaoOrcamentoExtra;
    situacaoDescricao?: string | undefined;
    situacaoDt?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDtDescricao?: string | undefined;

    constructor(data?: IOrcamentoExtraVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.total = _data["total"];
            this.totalRessalva = _data["totalRessalva"];
            this.declaracaoTrabalhoId = _data["declaracaoTrabalhoId"];
            this.situacao = _data["situacao"];
            this.situacaoDescricao = _data["situacaoDescricao"];
            this.situacaoDt = _data["situacaoDt"];
            this.situacaoDtDescricao = _data["situacaoDtDescricao"];
        }
    }

    static fromJS(data: any): OrcamentoExtraVm {
        data = typeof data === 'object' ? data : {};
        let result = new OrcamentoExtraVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["total"] = this.total;
        data["totalRessalva"] = this.totalRessalva;
        data["declaracaoTrabalhoId"] = this.declaracaoTrabalhoId;
        data["situacao"] = this.situacao;
        data["situacaoDescricao"] = this.situacaoDescricao;
        data["situacaoDt"] = this.situacaoDt;
        data["situacaoDtDescricao"] = this.situacaoDtDescricao;
        return data;
    }
}

export interface IOrcamentoExtraVm {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    total?: number;
    totalRessalva?: number | undefined;
    declaracaoTrabalhoId?: number;
    situacao?: SituacaoOrcamentoExtra;
    situacaoDescricao?: string | undefined;
    situacaoDt?: DeclaracaoTrabalhoSituacao | undefined;
    situacaoDtDescricao?: string | undefined;
}

export enum SituacaoOrcamentoExtra {
    EmElaboracao = 0,
    AguardandoClassificacao = 1,
    ClassificacaoRealizada = 2,
}

export class AnosPlurianualidade implements IAnosPlurianualidade {
    ano?: number;
    plurianualId?: number | undefined;
    preProjetoId?: number | undefined;

    constructor(data?: IAnosPlurianualidade) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ano = _data["ano"];
            this.plurianualId = _data["plurianualId"];
            this.preProjetoId = _data["preProjetoId"];
        }
    }

    static fromJS(data: any): AnosPlurianualidade {
        data = typeof data === 'object' ? data : {};
        let result = new AnosPlurianualidade();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ano"] = this.ano;
        data["plurianualId"] = this.plurianualId;
        data["preProjetoId"] = this.preProjetoId;
        return data;
    }
}

export interface IAnosPlurianualidade {
    ano?: number;
    plurianualId?: number | undefined;
    preProjetoId?: number | undefined;
}

export class ProjetoAlterarCommand implements IProjetoAlterarCommand {
    id?: number;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;

    constructor(data?: IProjetoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.objetivoDoProjeto = _data["objetivoDoProjeto"];
            this.escopoDoProjeto = _data["escopoDoProjeto"];
            this.premissasDoProjeto = _data["premissasDoProjeto"];
            this.restricoesDoProjeto = _data["restricoesDoProjeto"];
            this.riscosDoProjeto = _data["riscosDoProjeto"];
            this.comentarios = _data["comentarios"];
        }
    }

    static fromJS(data: any): ProjetoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["objetivoDoProjeto"] = this.objetivoDoProjeto;
        data["escopoDoProjeto"] = this.escopoDoProjeto;
        data["premissasDoProjeto"] = this.premissasDoProjeto;
        data["restricoesDoProjeto"] = this.restricoesDoProjeto;
        data["riscosDoProjeto"] = this.riscosDoProjeto;
        data["comentarios"] = this.comentarios;
        return data;
    }
}

export interface IProjetoAlterarCommand {
    id?: number;
    objetivoDoProjeto?: string | undefined;
    escopoDoProjeto?: string | undefined;
    premissasDoProjeto?: string | undefined;
    restricoesDoProjeto?: string | undefined;
    riscosDoProjeto?: string | undefined;
    comentarios?: string | undefined;
}

export class ProjetoExcluirCommand implements IProjetoExcluirCommand {
    id?: number;

    constructor(data?: IProjetoExcluirCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProjetoExcluirCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoExcluirCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IProjetoExcluirCommand {
    id?: number;
}

export class ProjetoIncluirPlanoComunicacaoCommand implements IProjetoIncluirPlanoComunicacaoCommand {
    conteudo?: string | undefined;
    publico?: string | undefined;
    periodicidadeId?: number;
    produtoId?: number;
    projetoId?: number;

    constructor(data?: IProjetoIncluirPlanoComunicacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conteudo = _data["conteudo"];
            this.publico = _data["publico"];
            this.periodicidadeId = _data["periodicidadeId"];
            this.produtoId = _data["produtoId"];
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): ProjetoIncluirPlanoComunicacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoIncluirPlanoComunicacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conteudo"] = this.conteudo;
        data["publico"] = this.publico;
        data["periodicidadeId"] = this.periodicidadeId;
        data["produtoId"] = this.produtoId;
        data["projetoId"] = this.projetoId;
        return data;
    }
}

export interface IProjetoIncluirPlanoComunicacaoCommand {
    conteudo?: string | undefined;
    publico?: string | undefined;
    periodicidadeId?: number;
    produtoId?: number;
    projetoId?: number;
}

export class ProjetoExcluirPlanoComunicacaoCommand implements IProjetoExcluirPlanoComunicacaoCommand {
    id?: number;

    constructor(data?: IProjetoExcluirPlanoComunicacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProjetoExcluirPlanoComunicacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoExcluirPlanoComunicacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IProjetoExcluirPlanoComunicacaoCommand {
    id?: number;
}

export class ProjetoIncluirRiscoCommand implements IProjetoIncluirRiscoCommand {
    projetoId?: number;
    descricao?: string | undefined;
    impacto?: string | undefined;
    probabilidade?: string | undefined;
    planoDeAcao?: string | undefined;

    constructor(data?: IProjetoIncluirRiscoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.descricao = _data["descricao"];
            this.impacto = _data["impacto"];
            this.probabilidade = _data["probabilidade"];
            this.planoDeAcao = _data["planoDeAcao"];
        }
    }

    static fromJS(data: any): ProjetoIncluirRiscoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoIncluirRiscoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["descricao"] = this.descricao;
        data["impacto"] = this.impacto;
        data["probabilidade"] = this.probabilidade;
        data["planoDeAcao"] = this.planoDeAcao;
        return data;
    }
}

export interface IProjetoIncluirRiscoCommand {
    projetoId?: number;
    descricao?: string | undefined;
    impacto?: string | undefined;
    probabilidade?: string | undefined;
    planoDeAcao?: string | undefined;
}

export class ProjetoExcluirRiscoCommand implements IProjetoExcluirRiscoCommand {
    id?: number;

    constructor(data?: IProjetoExcluirRiscoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProjetoExcluirRiscoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoExcluirRiscoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IProjetoExcluirRiscoCommand {
    id?: number;
}

export class ProjetoAlterarSituacaoCommand implements IProjetoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoProjeto;

    constructor(data?: IProjetoAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): ProjetoAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface IProjetoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoProjeto;
}

export class PaginatedListOfProjetoSituacaoVm implements IPaginatedListOfProjetoSituacaoVm {
    items?: ProjetoSituacaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfProjetoSituacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProjetoSituacaoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfProjetoSituacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfProjetoSituacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfProjetoSituacaoVm {
    items?: ProjetoSituacaoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ProjetoSituacaoVm implements IProjetoSituacaoVm {
    id?: number;
    projetoId?: number;
    situacao?: SituacaoProjeto;
    data?: Date;

    constructor(data?: IProjetoSituacaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projetoId = _data["projetoId"];
            this.situacao = _data["situacao"];
            this.data = _data["data"] ? new Date(_data["data"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProjetoSituacaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoSituacaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projetoId"] = this.projetoId;
        data["situacao"] = this.situacao;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        return data;
    }
}

export interface IProjetoSituacaoVm {
    id?: number;
    projetoId?: number;
    situacao?: SituacaoProjeto;
    data?: Date;
}

export class ProjetoSituacaoObterPorProjetoQuery extends QueryRequestBase implements IProjetoSituacaoObterPorProjetoQuery {
    projetoId?: number;

    constructor(data?: IProjetoSituacaoObterPorProjetoQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projetoId = _data["projetoId"];
        }
    }

    static fromJS(data: any): ProjetoSituacaoObterPorProjetoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoSituacaoObterPorProjetoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        super.toJSON(data);
        return data;
    }
}

export interface IProjetoSituacaoObterPorProjetoQuery extends IQueryRequestBase {
    projetoId?: number;
}

export class ProjetoAlterarStatusCommand implements IProjetoAlterarStatusCommand {
    projetoId?: number;
    status?: StatusProjeto;
    motivoPausaCancelamento?: string | undefined;

    constructor(data?: IProjetoAlterarStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projetoId = _data["projetoId"];
            this.status = _data["status"];
            this.motivoPausaCancelamento = _data["motivoPausaCancelamento"];
        }
    }

    static fromJS(data: any): ProjetoAlterarStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoAlterarStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoId"] = this.projetoId;
        data["status"] = this.status;
        data["motivoPausaCancelamento"] = this.motivoPausaCancelamento;
        return data;
    }
}

export interface IProjetoAlterarStatusCommand {
    projetoId?: number;
    status?: StatusProjeto;
    motivoPausaCancelamento?: string | undefined;
}

export class PaginatedListOfProjetoPlurianualVm implements IPaginatedListOfProjetoPlurianualVm {
    items?: ProjetoPlurianualVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfProjetoPlurianualVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProjetoPlurianualVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfProjetoPlurianualVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfProjetoPlurianualVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfProjetoPlurianualVm {
    items?: ProjetoPlurianualVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ProjetoPlurianualObterQuery extends QueryRequestBase implements IProjetoPlurianualObterQuery {
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    departamentoId?: number | undefined;
    situacao?: SituacaoProjetoPlurianual | undefined;
    dataInicio?: Date | undefined;
    dataFim?: Date | undefined;

    constructor(data?: IProjetoPlurianualObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nome = _data["nome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.loginSponsor = _data["loginSponsor"];
            this.departamentoId = _data["departamentoId"];
            this.situacao = _data["situacao"];
            this.dataInicio = _data["dataInicio"] ? new Date(_data["dataInicio"].toString()) : <any>undefined;
            this.dataFim = _data["dataFim"] ? new Date(_data["dataFim"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProjetoPlurianualObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["loginSponsor"] = this.loginSponsor;
        data["departamentoId"] = this.departamentoId;
        data["situacao"] = this.situacao;
        data["dataInicio"] = this.dataInicio ? this.dataInicio.toISOString() : <any>undefined;
        data["dataFim"] = this.dataFim ? this.dataFim.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IProjetoPlurianualObterQuery extends IQueryRequestBase {
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    departamentoId?: number | undefined;
    situacao?: SituacaoProjetoPlurianual | undefined;
    dataInicio?: Date | undefined;
    dataFim?: Date | undefined;
}

export class ProjetoPlurianualCriarCommand implements IProjetoPlurianualCriarCommand {
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoId?: number | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    solicitarLevantamentoCustoEPrazo?: boolean;
    cestaId?: number | undefined;
    portifolioId?: number | undefined;
    anoReferencia?: number;
    anexos?: ProjetoPlurianualAnexoDto[] | undefined;

    constructor(data?: IProjetoPlurianualCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nome = _data["nome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.departamentoId = _data["departamentoId"];
            this.escopoAnoSeguinte = _data["escopoAnoSeguinte"];
            this.prazoExecucaoInicial = _data["prazoExecucaoInicial"] ? new Date(_data["prazoExecucaoInicial"].toString()) : <any>undefined;
            this.prazoExecucaoFinal = _data["prazoExecucaoFinal"] ? new Date(_data["prazoExecucaoFinal"].toString()) : <any>undefined;
            this.solicitarLevantamentoCustoEPrazo = _data["solicitarLevantamentoCustoEPrazo"];
            this.cestaId = _data["cestaId"];
            this.portifolioId = _data["portifolioId"];
            this.anoReferencia = _data["anoReferencia"];
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(ProjetoPlurianualAnexoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjetoPlurianualCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nome"] = this.nome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["departamentoId"] = this.departamentoId;
        data["escopoAnoSeguinte"] = this.escopoAnoSeguinte;
        data["prazoExecucaoInicial"] = this.prazoExecucaoInicial ? this.prazoExecucaoInicial.toISOString() : <any>undefined;
        data["prazoExecucaoFinal"] = this.prazoExecucaoFinal ? this.prazoExecucaoFinal.toISOString() : <any>undefined;
        data["solicitarLevantamentoCustoEPrazo"] = this.solicitarLevantamentoCustoEPrazo;
        data["cestaId"] = this.cestaId;
        data["portifolioId"] = this.portifolioId;
        data["anoReferencia"] = this.anoReferencia;
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProjetoPlurianualCriarCommand {
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoId?: number | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    solicitarLevantamentoCustoEPrazo?: boolean;
    cestaId?: number | undefined;
    portifolioId?: number | undefined;
    anoReferencia?: number;
    anexos?: ProjetoPlurianualAnexoDto[] | undefined;
}

export class ProjetoPlurianualAnexoDto implements IProjetoPlurianualAnexoDto {
    nomeArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
    projetoPlurianualId?: number | undefined;

    constructor(data?: IProjetoPlurianualAnexoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomeArquivo = _data["nomeArquivo"];
            this.arquivoBase64 = _data["arquivoBase64"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualAnexoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualAnexoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeArquivo"] = this.nomeArquivo;
        data["arquivoBase64"] = this.arquivoBase64;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        return data;
    }
}

export interface IProjetoPlurianualAnexoDto {
    nomeArquivo?: string | undefined;
    arquivoBase64?: string | undefined;
    projetoPlurianualId?: number | undefined;
}

export class ProjetoPlurianualAlterarCommand implements IProjetoPlurianualAlterarCommand {
    id?: number;
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoId?: number | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    situacaoProjetoPlurianual?: SituacaoProjetoPlurianual;
    solicitarLevantamentoCustoEPrazo?: boolean;
    cestaId?: number | undefined;
    portifolioId?: number | undefined;
    anoReferencia?: number;

    constructor(data?: IProjetoPlurianualAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.loginResponsavel = _data["loginResponsavel"];
            this.nomeResponsavel = _data["nomeResponsavel"];
            this.loginSponsor = _data["loginSponsor"];
            this.nomeSponsor = _data["nomeSponsor"];
            this.departamentoId = _data["departamentoId"];
            this.escopoAnoSeguinte = _data["escopoAnoSeguinte"];
            this.prazoExecucaoInicial = _data["prazoExecucaoInicial"] ? new Date(_data["prazoExecucaoInicial"].toString()) : <any>undefined;
            this.prazoExecucaoFinal = _data["prazoExecucaoFinal"] ? new Date(_data["prazoExecucaoFinal"].toString()) : <any>undefined;
            this.situacaoProjetoPlurianual = _data["situacaoProjetoPlurianual"];
            this.solicitarLevantamentoCustoEPrazo = _data["solicitarLevantamentoCustoEPrazo"];
            this.cestaId = _data["cestaId"];
            this.portifolioId = _data["portifolioId"];
            this.anoReferencia = _data["anoReferencia"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["loginResponsavel"] = this.loginResponsavel;
        data["nomeResponsavel"] = this.nomeResponsavel;
        data["loginSponsor"] = this.loginSponsor;
        data["nomeSponsor"] = this.nomeSponsor;
        data["departamentoId"] = this.departamentoId;
        data["escopoAnoSeguinte"] = this.escopoAnoSeguinte;
        data["prazoExecucaoInicial"] = this.prazoExecucaoInicial ? this.prazoExecucaoInicial.toISOString() : <any>undefined;
        data["prazoExecucaoFinal"] = this.prazoExecucaoFinal ? this.prazoExecucaoFinal.toISOString() : <any>undefined;
        data["situacaoProjetoPlurianual"] = this.situacaoProjetoPlurianual;
        data["solicitarLevantamentoCustoEPrazo"] = this.solicitarLevantamentoCustoEPrazo;
        data["cestaId"] = this.cestaId;
        data["portifolioId"] = this.portifolioId;
        data["anoReferencia"] = this.anoReferencia;
        return data;
    }
}

export interface IProjetoPlurianualAlterarCommand {
    id?: number;
    nome?: string | undefined;
    loginResponsavel?: string | undefined;
    nomeResponsavel?: string | undefined;
    loginSponsor?: string | undefined;
    nomeSponsor?: string | undefined;
    departamentoId?: number | undefined;
    escopoAnoSeguinte?: string | undefined;
    prazoExecucaoInicial?: Date | undefined;
    prazoExecucaoFinal?: Date | undefined;
    situacaoProjetoPlurianual?: SituacaoProjetoPlurianual;
    solicitarLevantamentoCustoEPrazo?: boolean;
    cestaId?: number | undefined;
    portifolioId?: number | undefined;
    anoReferencia?: number;
}

export class ProjetoPlurianualAlterarSituacaoCommand implements IProjetoPlurianualAlterarSituacaoCommand {
    projetoPlurianualId?: number;
    situacao?: SituacaoProjetoPlurianual;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    observacao?: string | undefined;

    constructor(data?: IProjetoPlurianualAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.situacao = _data["situacao"];
            this.motivoSolicitacaoNovasInformacoes = _data["motivoSolicitacaoNovasInformacoes"];
            this.observacao = _data["observacao"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["situacao"] = this.situacao;
        data["motivoSolicitacaoNovasInformacoes"] = this.motivoSolicitacaoNovasInformacoes;
        data["observacao"] = this.observacao;
        return data;
    }
}

export interface IProjetoPlurianualAlterarSituacaoCommand {
    projetoPlurianualId?: number;
    situacao?: SituacaoProjetoPlurianual;
    motivoSolicitacaoNovasInformacoes?: string | undefined;
    observacao?: string | undefined;
}

export class ProjetoPlurianualOrcamentoCriarCommand implements IProjetoPlurianualOrcamentoCriarCommand {
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    projetoPlurianualId?: number;

    constructor(data?: IProjetoPlurianualOrcamentoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualOrcamentoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualOrcamentoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        return data;
    }
}

export interface IProjetoPlurianualOrcamentoCriarCommand {
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    projetoPlurianualId?: number;
}

export class ProjetoPlurianualOrcamentoAlterarCommand implements IProjetoPlurianualOrcamentoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    projetoPlurianualId?: number;

    constructor(data?: IProjetoPlurianualOrcamentoAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.descricao = _data["descricao"];
            this.valorDespesaAdministrativa = _data["valorDespesaAdministrativa"];
            this.valorCustoAssistencial = _data["valorCustoAssistencial"];
            this.valorInvestimento = _data["valorInvestimento"];
            this.observacao = _data["observacao"];
            this.valorDespesaAdministrativaObservacao = _data["valorDespesaAdministrativaObservacao"];
            this.valorCustoAssistencialObservacao = _data["valorCustoAssistencialObservacao"];
            this.valorInvestimentoObservacao = _data["valorInvestimentoObservacao"];
            this.ressalva = _data["ressalva"];
            this.valorDespesaAdministrativaRessalva = _data["valorDespesaAdministrativaRessalva"];
            this.valorCustoAssistencialRessalva = _data["valorCustoAssistencialRessalva"];
            this.valorInvestimentoRessalva = _data["valorInvestimentoRessalva"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualOrcamentoAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualOrcamentoAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["descricao"] = this.descricao;
        data["valorDespesaAdministrativa"] = this.valorDespesaAdministrativa;
        data["valorCustoAssistencial"] = this.valorCustoAssistencial;
        data["valorInvestimento"] = this.valorInvestimento;
        data["observacao"] = this.observacao;
        data["valorDespesaAdministrativaObservacao"] = this.valorDespesaAdministrativaObservacao;
        data["valorCustoAssistencialObservacao"] = this.valorCustoAssistencialObservacao;
        data["valorInvestimentoObservacao"] = this.valorInvestimentoObservacao;
        data["ressalva"] = this.ressalva;
        data["valorDespesaAdministrativaRessalva"] = this.valorDespesaAdministrativaRessalva;
        data["valorCustoAssistencialRessalva"] = this.valorCustoAssistencialRessalva;
        data["valorInvestimentoRessalva"] = this.valorInvestimentoRessalva;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        return data;
    }
}

export interface IProjetoPlurianualOrcamentoAlterarCommand {
    id?: number;
    descricao?: string | undefined;
    valorDespesaAdministrativa?: number;
    valorCustoAssistencial?: number;
    valorInvestimento?: number;
    observacao?: string | undefined;
    valorDespesaAdministrativaObservacao?: number | undefined;
    valorCustoAssistencialObservacao?: number | undefined;
    valorInvestimentoObservacao?: number | undefined;
    ressalva?: string | undefined;
    valorDespesaAdministrativaRessalva?: number | undefined;
    valorCustoAssistencialRessalva?: number | undefined;
    valorInvestimentoRessalva?: number | undefined;
    projetoPlurianualId?: number;
}

export class ProjetoPlurianualOrcamentoAlterarSituacaoCommand implements IProjetoPlurianualOrcamentoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoProjetoPlurianualOrcamento;

    constructor(data?: IProjetoPlurianualOrcamentoAlterarSituacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): ProjetoPlurianualOrcamentoAlterarSituacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualOrcamentoAlterarSituacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface IProjetoPlurianualOrcamentoAlterarSituacaoCommand {
    id?: number;
    situacao?: SituacaoProjetoPlurianualOrcamento;
}

export class ProjetoPlurianualAnexoCriarCommand implements IProjetoPlurianualAnexoCriarCommand {
    anexos?: ProjetoPlurianualAnexoDto[] | undefined;

    constructor(data?: IProjetoPlurianualAnexoCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["anexos"])) {
                this.anexos = [] as any;
                for (let item of _data["anexos"])
                    this.anexos!.push(ProjetoPlurianualAnexoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjetoPlurianualAnexoCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetoPlurianualAnexoCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.anexos)) {
            data["anexos"] = [];
            for (let item of this.anexos)
                data["anexos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProjetoPlurianualAnexoCriarCommand {
    anexos?: ProjetoPlurianualAnexoDto[] | undefined;
}

export class EquipeProjetoFuncaoExcluirCommand implements IEquipeProjetoFuncaoExcluirCommand {
    id?: number;

    constructor(data?: IEquipeProjetoFuncaoExcluirCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EquipeProjetoFuncaoExcluirCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EquipeProjetoFuncaoExcluirCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IEquipeProjetoFuncaoExcluirCommand {
    id?: number;
}

export class QuestionarioPreenchimentoVm implements IQuestionarioPreenchimentoVm {
    id?: number;
    questionarioId?: number;
    usuarioId?: number;
    usuario?: UsuarioVm | undefined;
    dataCriacao?: Date;
    questionarioTitulo?: string | undefined;
    dataAlteracao?: string | undefined;
    situacaoQuestionarioPreenchimento?: SituacaoQuestionarioPreenchimento;
    situacaoQuestionarioPreenchimentoDescricao?: string | undefined;
    respostas?: QuestionarioPreenchimentoRespostaVm[] | undefined;

    constructor(data?: IQuestionarioPreenchimentoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.questionarioId = _data["questionarioId"];
            this.usuarioId = _data["usuarioId"];
            this.usuario = _data["usuario"] ? UsuarioVm.fromJS(_data["usuario"]) : <any>undefined;
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
            this.questionarioTitulo = _data["questionarioTitulo"];
            this.dataAlteracao = _data["dataAlteracao"];
            this.situacaoQuestionarioPreenchimento = _data["situacaoQuestionarioPreenchimento"];
            this.situacaoQuestionarioPreenchimentoDescricao = _data["situacaoQuestionarioPreenchimentoDescricao"];
            if (Array.isArray(_data["respostas"])) {
                this.respostas = [] as any;
                for (let item of _data["respostas"])
                    this.respostas!.push(QuestionarioPreenchimentoRespostaVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["questionarioId"] = this.questionarioId;
        data["usuarioId"] = this.usuarioId;
        data["usuario"] = this.usuario ? this.usuario.toJSON() : <any>undefined;
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        data["questionarioTitulo"] = this.questionarioTitulo;
        data["dataAlteracao"] = this.dataAlteracao;
        data["situacaoQuestionarioPreenchimento"] = this.situacaoQuestionarioPreenchimento;
        data["situacaoQuestionarioPreenchimentoDescricao"] = this.situacaoQuestionarioPreenchimentoDescricao;
        if (Array.isArray(this.respostas)) {
            data["respostas"] = [];
            for (let item of this.respostas)
                data["respostas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioPreenchimentoVm {
    id?: number;
    questionarioId?: number;
    usuarioId?: number;
    usuario?: UsuarioVm | undefined;
    dataCriacao?: Date;
    questionarioTitulo?: string | undefined;
    dataAlteracao?: string | undefined;
    situacaoQuestionarioPreenchimento?: SituacaoQuestionarioPreenchimento;
    situacaoQuestionarioPreenchimentoDescricao?: string | undefined;
    respostas?: QuestionarioPreenchimentoRespostaVm[] | undefined;
}

export enum SituacaoQuestionarioPreenchimento {
    Enviado = 0,
    Respondido = 1,
}

export class QuestionarioPreenchimentoRespostaVm implements IQuestionarioPreenchimentoRespostaVm {
    id?: number;
    questionarioPreenchimentoId?: number;
    questionarioPerguntaId?: number;
    questionarioPerguntaTipoResposta?: QuestionarioTipoResposta;
    respostaTexto?: string | undefined;
    opcaoIdSelecionada?: number | undefined;
    respostasMultiplas?: QuestionarioPreenchimentoRespostaMultiplaVm[] | undefined;
    opcoesSelecionadas?: (number | undefined)[] | undefined;

    constructor(data?: IQuestionarioPreenchimentoRespostaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.questionarioPreenchimentoId = _data["questionarioPreenchimentoId"];
            this.questionarioPerguntaId = _data["questionarioPerguntaId"];
            this.questionarioPerguntaTipoResposta = _data["questionarioPerguntaTipoResposta"];
            this.respostaTexto = _data["respostaTexto"];
            this.opcaoIdSelecionada = _data["opcaoIdSelecionada"];
            if (Array.isArray(_data["respostasMultiplas"])) {
                this.respostasMultiplas = [] as any;
                for (let item of _data["respostasMultiplas"])
                    this.respostasMultiplas!.push(QuestionarioPreenchimentoRespostaMultiplaVm.fromJS(item));
            }
            if (Array.isArray(_data["opcoesSelecionadas"])) {
                this.opcoesSelecionadas = [] as any;
                for (let item of _data["opcoesSelecionadas"])
                    this.opcoesSelecionadas!.push(item);
            }
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoRespostaVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoRespostaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["questionarioPreenchimentoId"] = this.questionarioPreenchimentoId;
        data["questionarioPerguntaId"] = this.questionarioPerguntaId;
        data["questionarioPerguntaTipoResposta"] = this.questionarioPerguntaTipoResposta;
        data["respostaTexto"] = this.respostaTexto;
        data["opcaoIdSelecionada"] = this.opcaoIdSelecionada;
        if (Array.isArray(this.respostasMultiplas)) {
            data["respostasMultiplas"] = [];
            for (let item of this.respostasMultiplas)
                data["respostasMultiplas"].push(item.toJSON());
        }
        if (Array.isArray(this.opcoesSelecionadas)) {
            data["opcoesSelecionadas"] = [];
            for (let item of this.opcoesSelecionadas)
                data["opcoesSelecionadas"].push(item);
        }
        return data;
    }
}

export interface IQuestionarioPreenchimentoRespostaVm {
    id?: number;
    questionarioPreenchimentoId?: number;
    questionarioPerguntaId?: number;
    questionarioPerguntaTipoResposta?: QuestionarioTipoResposta;
    respostaTexto?: string | undefined;
    opcaoIdSelecionada?: number | undefined;
    respostasMultiplas?: QuestionarioPreenchimentoRespostaMultiplaVm[] | undefined;
    opcoesSelecionadas?: (number | undefined)[] | undefined;
}

export enum QuestionarioTipoResposta {
    UnicaEscolha = 0,
    SimNao = 1,
    MultiplaEscolha = 2,
    Texto = 3,
    NPS = 4,
}

export class QuestionarioPreenchimentoRespostaMultiplaVm implements IQuestionarioPreenchimentoRespostaMultiplaVm {
    id?: number;
    questionarioPreenchimentoRespostaId?: number;
    opcaoIdSelecionada?: number | undefined;

    constructor(data?: IQuestionarioPreenchimentoRespostaMultiplaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.questionarioPreenchimentoRespostaId = _data["questionarioPreenchimentoRespostaId"];
            this.opcaoIdSelecionada = _data["opcaoIdSelecionada"];
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoRespostaMultiplaVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoRespostaMultiplaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["questionarioPreenchimentoRespostaId"] = this.questionarioPreenchimentoRespostaId;
        data["opcaoIdSelecionada"] = this.opcaoIdSelecionada;
        return data;
    }
}

export interface IQuestionarioPreenchimentoRespostaMultiplaVm {
    id?: number;
    questionarioPreenchimentoRespostaId?: number;
    opcaoIdSelecionada?: number | undefined;
}

export class PaginatedListOfQuestionarioPreenchimentoVm implements IPaginatedListOfQuestionarioPreenchimentoVm {
    items?: QuestionarioPreenchimentoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfQuestionarioPreenchimentoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuestionarioPreenchimentoVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfQuestionarioPreenchimentoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfQuestionarioPreenchimentoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfQuestionarioPreenchimentoVm {
    items?: QuestionarioPreenchimentoVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class QuestionarioPreenchimentoObterQuery extends QueryRequestBase implements IQuestionarioPreenchimentoObterQuery {
    questionarioId?: number | undefined;

    constructor(data?: IQuestionarioPreenchimentoObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.questionarioId = _data["questionarioId"];
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionarioId"] = this.questionarioId;
        super.toJSON(data);
        return data;
    }
}

export interface IQuestionarioPreenchimentoObterQuery extends IQueryRequestBase {
    questionarioId?: number | undefined;
}

export class QuestionarioPreenchimentoSalvarCommand implements IQuestionarioPreenchimentoSalvarCommand {
    id?: number | undefined;
    questionarioId?: number;
    situacaoQuestionarioPreenchimento?: SituacaoQuestionarioPreenchimento;

    constructor(data?: IQuestionarioPreenchimentoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.questionarioId = _data["questionarioId"];
            this.situacaoQuestionarioPreenchimento = _data["situacaoQuestionarioPreenchimento"];
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["questionarioId"] = this.questionarioId;
        data["situacaoQuestionarioPreenchimento"] = this.situacaoQuestionarioPreenchimento;
        return data;
    }
}

export interface IQuestionarioPreenchimentoSalvarCommand {
    id?: number | undefined;
    questionarioId?: number;
    situacaoQuestionarioPreenchimento?: SituacaoQuestionarioPreenchimento;
}

export class QuestionarioPreenchimentoRespostaSalvarCommand implements IQuestionarioPreenchimentoRespostaSalvarCommand {
    questionarioId?: number;
    respostas?: QuestionarioPreenchimentoRespostaSalvar[] | undefined;

    constructor(data?: IQuestionarioPreenchimentoRespostaSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.questionarioId = _data["questionarioId"];
            if (Array.isArray(_data["respostas"])) {
                this.respostas = [] as any;
                for (let item of _data["respostas"])
                    this.respostas!.push(QuestionarioPreenchimentoRespostaSalvar.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoRespostaSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoRespostaSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionarioId"] = this.questionarioId;
        if (Array.isArray(this.respostas)) {
            data["respostas"] = [];
            for (let item of this.respostas)
                data["respostas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioPreenchimentoRespostaSalvarCommand {
    questionarioId?: number;
    respostas?: QuestionarioPreenchimentoRespostaSalvar[] | undefined;
}

export class QuestionarioPreenchimentoRespostaSalvar implements IQuestionarioPreenchimentoRespostaSalvar {
    questionarioPerguntaId?: number;
    respostaTexto?: string | undefined;
    opcaoIdSelecionada?: number | undefined;
    opcoesSelecionadas?: number[] | undefined;

    constructor(data?: IQuestionarioPreenchimentoRespostaSalvar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.questionarioPerguntaId = _data["questionarioPerguntaId"];
            this.respostaTexto = _data["respostaTexto"];
            this.opcaoIdSelecionada = _data["opcaoIdSelecionada"];
            if (Array.isArray(_data["opcoesSelecionadas"])) {
                this.opcoesSelecionadas = [] as any;
                for (let item of _data["opcoesSelecionadas"])
                    this.opcoesSelecionadas!.push(item);
            }
        }
    }

    static fromJS(data: any): QuestionarioPreenchimentoRespostaSalvar {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPreenchimentoRespostaSalvar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionarioPerguntaId"] = this.questionarioPerguntaId;
        data["respostaTexto"] = this.respostaTexto;
        data["opcaoIdSelecionada"] = this.opcaoIdSelecionada;
        if (Array.isArray(this.opcoesSelecionadas)) {
            data["opcoesSelecionadas"] = [];
            for (let item of this.opcoesSelecionadas)
                data["opcoesSelecionadas"].push(item);
        }
        return data;
    }
}

export interface IQuestionarioPreenchimentoRespostaSalvar {
    questionarioPerguntaId?: number;
    respostaTexto?: string | undefined;
    opcaoIdSelecionada?: number | undefined;
    opcoesSelecionadas?: number[] | undefined;
}

export class QuestionarioModeloSalvarCommand implements IQuestionarioModeloSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;

    constructor(data?: IQuestionarioModeloSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
        }
    }

    static fromJS(data: any): QuestionarioModeloSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioModeloSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        return data;
    }
}

export interface IQuestionarioModeloSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
}

export class PaginatedListOfQuestionarioModeloVm implements IPaginatedListOfQuestionarioModeloVm {
    items?: QuestionarioModeloVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfQuestionarioModeloVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuestionarioModeloVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfQuestionarioModeloVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfQuestionarioModeloVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfQuestionarioModeloVm {
    items?: QuestionarioModeloVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class QuestionarioModeloVm implements IQuestionarioModeloVm {
    id?: number;
    titulo?: string | undefined;
    dataCriacao?: Date;
    usuarioCriacaoId?: string | undefined;
    dataAlteracao?: Date;
    usuarioAlteracaoId?: string | undefined;
    gruposPerguntas?: QuestionarioGrupoPerguntaVm[] | undefined;

    constructor(data?: IQuestionarioModeloVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.dataCriacao = _data["dataCriacao"] ? new Date(_data["dataCriacao"].toString()) : <any>undefined;
            this.usuarioCriacaoId = _data["usuarioCriacaoId"];
            this.dataAlteracao = _data["dataAlteracao"] ? new Date(_data["dataAlteracao"].toString()) : <any>undefined;
            this.usuarioAlteracaoId = _data["usuarioAlteracaoId"];
            if (Array.isArray(_data["gruposPerguntas"])) {
                this.gruposPerguntas = [] as any;
                for (let item of _data["gruposPerguntas"])
                    this.gruposPerguntas!.push(QuestionarioGrupoPerguntaVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioModeloVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioModeloVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["dataCriacao"] = this.dataCriacao ? this.dataCriacao.toISOString() : <any>undefined;
        data["usuarioCriacaoId"] = this.usuarioCriacaoId;
        data["dataAlteracao"] = this.dataAlteracao ? this.dataAlteracao.toISOString() : <any>undefined;
        data["usuarioAlteracaoId"] = this.usuarioAlteracaoId;
        if (Array.isArray(this.gruposPerguntas)) {
            data["gruposPerguntas"] = [];
            for (let item of this.gruposPerguntas)
                data["gruposPerguntas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioModeloVm {
    id?: number;
    titulo?: string | undefined;
    dataCriacao?: Date;
    usuarioCriacaoId?: string | undefined;
    dataAlteracao?: Date;
    usuarioAlteracaoId?: string | undefined;
    gruposPerguntas?: QuestionarioGrupoPerguntaVm[] | undefined;
}

export class QuestionarioGrupoPerguntaVm implements IQuestionarioGrupoPerguntaVm {
    id?: number;
    titulo?: string | undefined;
    ordemExibicao?: number;
    perguntas?: QuestionarioPerguntaVm[] | undefined;

    constructor(data?: IQuestionarioGrupoPerguntaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.ordemExibicao = _data["ordemExibicao"];
            if (Array.isArray(_data["perguntas"])) {
                this.perguntas = [] as any;
                for (let item of _data["perguntas"])
                    this.perguntas!.push(QuestionarioPerguntaVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioGrupoPerguntaVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioGrupoPerguntaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["ordemExibicao"] = this.ordemExibicao;
        if (Array.isArray(this.perguntas)) {
            data["perguntas"] = [];
            for (let item of this.perguntas)
                data["perguntas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioGrupoPerguntaVm {
    id?: number;
    titulo?: string | undefined;
    ordemExibicao?: number;
    perguntas?: QuestionarioPerguntaVm[] | undefined;
}

export class QuestionarioPerguntaVm implements IQuestionarioPerguntaVm {
    id?: number;
    titulo?: string | undefined;
    subtitulo?: string | undefined;
    obrigatoria?: boolean;
    exibirOpcaoEditavel?: boolean;
    labelOpcaoEditavel?: string | undefined;
    ordemExibicao?: number;
    questionarioGrupoPerguntaId?: number;
    tipoResposta?: QuestionarioTipoResposta;
    opcoes?: QuestionarioPerguntaOpcaoVm[] | undefined;
    opcaoGatilhoId?: number | undefined;
    perguntaGatilhoId?: number | undefined;
    opcoesGatilho?: QuestionarioPerguntaOpcaoGatilhoVm[] | undefined;

    constructor(data?: IQuestionarioPerguntaVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.subtitulo = _data["subtitulo"];
            this.obrigatoria = _data["obrigatoria"];
            this.exibirOpcaoEditavel = _data["exibirOpcaoEditavel"];
            this.labelOpcaoEditavel = _data["labelOpcaoEditavel"];
            this.ordemExibicao = _data["ordemExibicao"];
            this.questionarioGrupoPerguntaId = _data["questionarioGrupoPerguntaId"];
            this.tipoResposta = _data["tipoResposta"];
            if (Array.isArray(_data["opcoes"])) {
                this.opcoes = [] as any;
                for (let item of _data["opcoes"])
                    this.opcoes!.push(QuestionarioPerguntaOpcaoVm.fromJS(item));
            }
            this.opcaoGatilhoId = _data["opcaoGatilhoId"];
            this.perguntaGatilhoId = _data["perguntaGatilhoId"];
            if (Array.isArray(_data["opcoesGatilho"])) {
                this.opcoesGatilho = [] as any;
                for (let item of _data["opcoesGatilho"])
                    this.opcoesGatilho!.push(QuestionarioPerguntaOpcaoGatilhoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioPerguntaVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["subtitulo"] = this.subtitulo;
        data["obrigatoria"] = this.obrigatoria;
        data["exibirOpcaoEditavel"] = this.exibirOpcaoEditavel;
        data["labelOpcaoEditavel"] = this.labelOpcaoEditavel;
        data["ordemExibicao"] = this.ordemExibicao;
        data["questionarioGrupoPerguntaId"] = this.questionarioGrupoPerguntaId;
        data["tipoResposta"] = this.tipoResposta;
        if (Array.isArray(this.opcoes)) {
            data["opcoes"] = [];
            for (let item of this.opcoes)
                data["opcoes"].push(item.toJSON());
        }
        data["opcaoGatilhoId"] = this.opcaoGatilhoId;
        data["perguntaGatilhoId"] = this.perguntaGatilhoId;
        if (Array.isArray(this.opcoesGatilho)) {
            data["opcoesGatilho"] = [];
            for (let item of this.opcoesGatilho)
                data["opcoesGatilho"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioPerguntaVm {
    id?: number;
    titulo?: string | undefined;
    subtitulo?: string | undefined;
    obrigatoria?: boolean;
    exibirOpcaoEditavel?: boolean;
    labelOpcaoEditavel?: string | undefined;
    ordemExibicao?: number;
    questionarioGrupoPerguntaId?: number;
    tipoResposta?: QuestionarioTipoResposta;
    opcoes?: QuestionarioPerguntaOpcaoVm[] | undefined;
    opcaoGatilhoId?: number | undefined;
    perguntaGatilhoId?: number | undefined;
    opcoesGatilho?: QuestionarioPerguntaOpcaoGatilhoVm[] | undefined;
}

export class QuestionarioPerguntaOpcaoVm implements IQuestionarioPerguntaOpcaoVm {
    id?: number;
    titulo?: string | undefined;
    ordemExibicao?: number;
    exibeCampoTexto?: boolean;
    questionarioPerguntaId?: number;
    questionarioPerguntaGatilhoId?: number | undefined;
    exibirSelecaoPerguntas?: boolean;

    constructor(data?: IQuestionarioPerguntaOpcaoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.ordemExibicao = _data["ordemExibicao"];
            this.exibeCampoTexto = _data["exibeCampoTexto"];
            this.questionarioPerguntaId = _data["questionarioPerguntaId"];
            this.questionarioPerguntaGatilhoId = _data["questionarioPerguntaGatilhoId"];
            this.exibirSelecaoPerguntas = _data["exibirSelecaoPerguntas"];
        }
    }

    static fromJS(data: any): QuestionarioPerguntaOpcaoVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaOpcaoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["ordemExibicao"] = this.ordemExibicao;
        data["exibeCampoTexto"] = this.exibeCampoTexto;
        data["questionarioPerguntaId"] = this.questionarioPerguntaId;
        data["questionarioPerguntaGatilhoId"] = this.questionarioPerguntaGatilhoId;
        data["exibirSelecaoPerguntas"] = this.exibirSelecaoPerguntas;
        return data;
    }
}

export interface IQuestionarioPerguntaOpcaoVm {
    id?: number;
    titulo?: string | undefined;
    ordemExibicao?: number;
    exibeCampoTexto?: boolean;
    questionarioPerguntaId?: number;
    questionarioPerguntaGatilhoId?: number | undefined;
    exibirSelecaoPerguntas?: boolean;
}

export class QuestionarioPerguntaOpcaoGatilhoVm implements IQuestionarioPerguntaOpcaoGatilhoVm {
    id?: number;
    questionarioPerguntaId?: number;
    questionarioPerguntaOpcaoId?: number;

    constructor(data?: IQuestionarioPerguntaOpcaoGatilhoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.questionarioPerguntaId = _data["questionarioPerguntaId"];
            this.questionarioPerguntaOpcaoId = _data["questionarioPerguntaOpcaoId"];
        }
    }

    static fromJS(data: any): QuestionarioPerguntaOpcaoGatilhoVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaOpcaoGatilhoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["questionarioPerguntaId"] = this.questionarioPerguntaId;
        data["questionarioPerguntaOpcaoId"] = this.questionarioPerguntaOpcaoId;
        return data;
    }
}

export interface IQuestionarioPerguntaOpcaoGatilhoVm {
    id?: number;
    questionarioPerguntaId?: number;
    questionarioPerguntaOpcaoId?: number;
}

export class QuestionariosModeloObterQuery extends QueryRequestBase implements IQuestionariosModeloObterQuery {

    constructor(data?: IQuestionariosModeloObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): QuestionariosModeloObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionariosModeloObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IQuestionariosModeloObterQuery extends IQueryRequestBase {
}

export class PaginatedListOfQuestionarioVm implements IPaginatedListOfQuestionarioVm {
    items?: QuestionarioVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfQuestionarioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuestionarioVm.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfQuestionarioVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfQuestionarioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfQuestionarioVm {
    items?: QuestionarioVm[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class QuestionarioVm implements IQuestionarioVm {
    id?: number;
    titulo?: string | undefined;
    questionarioModeloId?: number;
    questionarioModelo?: QuestionarioModeloVm | undefined;
    projetoId?: number | undefined;
    projetoVm?: ProjetoVm | undefined;
    preProjetoId?: number | undefined;
    preProjetoVm?: PreProjetoVm | undefined;
    projetoPlurianualId?: number | undefined;
    projetoPlurianualVm?: ProjetoPlurianualVm | undefined;
    tipo?: TipoQuestionario;
    tipoDescricao?: string | undefined;
    gruposPerguntas?: QuestionarioGrupoPerguntaVm[] | undefined;
    questionarioPreenchimentos?: QuestionarioPreenchimentoVm[] | undefined;

    constructor(data?: IQuestionarioVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.questionarioModeloId = _data["questionarioModeloId"];
            this.questionarioModelo = _data["questionarioModelo"] ? QuestionarioModeloVm.fromJS(_data["questionarioModelo"]) : <any>undefined;
            this.projetoId = _data["projetoId"];
            this.projetoVm = _data["projetoVm"] ? ProjetoVm.fromJS(_data["projetoVm"]) : <any>undefined;
            this.preProjetoId = _data["preProjetoId"];
            this.preProjetoVm = _data["preProjetoVm"] ? PreProjetoVm.fromJS(_data["preProjetoVm"]) : <any>undefined;
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.projetoPlurianualVm = _data["projetoPlurianualVm"] ? ProjetoPlurianualVm.fromJS(_data["projetoPlurianualVm"]) : <any>undefined;
            this.tipo = _data["tipo"];
            this.tipoDescricao = _data["tipoDescricao"];
            if (Array.isArray(_data["gruposPerguntas"])) {
                this.gruposPerguntas = [] as any;
                for (let item of _data["gruposPerguntas"])
                    this.gruposPerguntas!.push(QuestionarioGrupoPerguntaVm.fromJS(item));
            }
            if (Array.isArray(_data["questionarioPreenchimentos"])) {
                this.questionarioPreenchimentos = [] as any;
                for (let item of _data["questionarioPreenchimentos"])
                    this.questionarioPreenchimentos!.push(QuestionarioPreenchimentoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["questionarioModeloId"] = this.questionarioModeloId;
        data["questionarioModelo"] = this.questionarioModelo ? this.questionarioModelo.toJSON() : <any>undefined;
        data["projetoId"] = this.projetoId;
        data["projetoVm"] = this.projetoVm ? this.projetoVm.toJSON() : <any>undefined;
        data["preProjetoId"] = this.preProjetoId;
        data["preProjetoVm"] = this.preProjetoVm ? this.preProjetoVm.toJSON() : <any>undefined;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["projetoPlurianualVm"] = this.projetoPlurianualVm ? this.projetoPlurianualVm.toJSON() : <any>undefined;
        data["tipo"] = this.tipo;
        data["tipoDescricao"] = this.tipoDescricao;
        if (Array.isArray(this.gruposPerguntas)) {
            data["gruposPerguntas"] = [];
            for (let item of this.gruposPerguntas)
                data["gruposPerguntas"].push(item.toJSON());
        }
        if (Array.isArray(this.questionarioPreenchimentos)) {
            data["questionarioPreenchimentos"] = [];
            for (let item of this.questionarioPreenchimentos)
                data["questionarioPreenchimentos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioVm {
    id?: number;
    titulo?: string | undefined;
    questionarioModeloId?: number;
    questionarioModelo?: QuestionarioModeloVm | undefined;
    projetoId?: number | undefined;
    projetoVm?: ProjetoVm | undefined;
    preProjetoId?: number | undefined;
    preProjetoVm?: PreProjetoVm | undefined;
    projetoPlurianualId?: number | undefined;
    projetoPlurianualVm?: ProjetoPlurianualVm | undefined;
    tipo?: TipoQuestionario;
    tipoDescricao?: string | undefined;
    gruposPerguntas?: QuestionarioGrupoPerguntaVm[] | undefined;
    questionarioPreenchimentos?: QuestionarioPreenchimentoVm[] | undefined;
}

export enum TipoQuestionario {
    Unico = 0,
    Multiplo = 1,
}

export class QuestionariosObterQuery extends QueryRequestBase implements IQuestionariosObterQuery {
    obterVigentes?: boolean | undefined;
    projetoId?: number | undefined;
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;

    constructor(data?: IQuestionariosObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.obterVigentes = _data["obterVigentes"];
            this.projetoId = _data["projetoId"];
            this.preProjetoId = _data["preProjetoId"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
        }
    }

    static fromJS(data: any): QuestionariosObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionariosObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["obterVigentes"] = this.obterVigentes;
        data["projetoId"] = this.projetoId;
        data["preProjetoId"] = this.preProjetoId;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        super.toJSON(data);
        return data;
    }
}

export interface IQuestionariosObterQuery extends IQueryRequestBase {
    obterVigentes?: boolean | undefined;
    projetoId?: number | undefined;
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
}

export class QuestionarioSalvarCommand implements IQuestionarioSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    questionarioModeloId?: number;
    dataInicioVigencia?: Date;
    dataTerminoVigencia?: Date | undefined;
    projetoId?: number | undefined;
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
    tipo?: TipoQuestionario;

    constructor(data?: IQuestionarioSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.questionarioModeloId = _data["questionarioModeloId"];
            this.dataInicioVigencia = _data["dataInicioVigencia"] ? new Date(_data["dataInicioVigencia"].toString()) : <any>undefined;
            this.dataTerminoVigencia = _data["dataTerminoVigencia"] ? new Date(_data["dataTerminoVigencia"].toString()) : <any>undefined;
            this.projetoId = _data["projetoId"];
            this.preProjetoId = _data["preProjetoId"];
            this.projetoPlurianualId = _data["projetoPlurianualId"];
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): QuestionarioSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["questionarioModeloId"] = this.questionarioModeloId;
        data["dataInicioVigencia"] = this.dataInicioVigencia ? this.dataInicioVigencia.toISOString() : <any>undefined;
        data["dataTerminoVigencia"] = this.dataTerminoVigencia ? this.dataTerminoVigencia.toISOString() : <any>undefined;
        data["projetoId"] = this.projetoId;
        data["preProjetoId"] = this.preProjetoId;
        data["projetoPlurianualId"] = this.projetoPlurianualId;
        data["tipo"] = this.tipo;
        return data;
    }
}

export interface IQuestionarioSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    questionarioModeloId?: number;
    dataInicioVigencia?: Date;
    dataTerminoVigencia?: Date | undefined;
    projetoId?: number | undefined;
    preProjetoId?: number | undefined;
    projetoPlurianualId?: number | undefined;
    tipo?: TipoQuestionario;
}

export class SelectItemEnum implements ISelectItemEnum {
    id?: number;
    text?: string | undefined;

    constructor(data?: ISelectItemEnum) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): SelectItemEnum {
        data = typeof data === 'object' ? data : {};
        let result = new SelectItemEnum();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        return data;
    }
}

export interface ISelectItemEnum {
    id?: number;
    text?: string | undefined;
}

export class QuestionarioGrupoPerguntaSalvarCommand implements IQuestionarioGrupoPerguntaSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    ordemExibicao?: number;
    questionarioId?: number | undefined;
    questionarioModeloId?: number | undefined;

    constructor(data?: IQuestionarioGrupoPerguntaSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.ordemExibicao = _data["ordemExibicao"];
            this.questionarioId = _data["questionarioId"];
            this.questionarioModeloId = _data["questionarioModeloId"];
        }
    }

    static fromJS(data: any): QuestionarioGrupoPerguntaSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioGrupoPerguntaSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["ordemExibicao"] = this.ordemExibicao;
        data["questionarioId"] = this.questionarioId;
        data["questionarioModeloId"] = this.questionarioModeloId;
        return data;
    }
}

export interface IQuestionarioGrupoPerguntaSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    ordemExibicao?: number;
    questionarioId?: number | undefined;
    questionarioModeloId?: number | undefined;
}

export class QuestionarioPerguntaSalvarCommand implements IQuestionarioPerguntaSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    subtitulo?: string | undefined;
    obrigatoria?: boolean;
    exibirOpcaoEditavel?: boolean;
    labelOpcaoEditavel?: string | undefined;
    ordemExibicao?: number;
    tipoResposta?: QuestionarioTipoResposta;
    questionarioGrupoPerguntaId?: number;

    constructor(data?: IQuestionarioPerguntaSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.subtitulo = _data["subtitulo"];
            this.obrigatoria = _data["obrigatoria"];
            this.exibirOpcaoEditavel = _data["exibirOpcaoEditavel"];
            this.labelOpcaoEditavel = _data["labelOpcaoEditavel"];
            this.ordemExibicao = _data["ordemExibicao"];
            this.tipoResposta = _data["tipoResposta"];
            this.questionarioGrupoPerguntaId = _data["questionarioGrupoPerguntaId"];
        }
    }

    static fromJS(data: any): QuestionarioPerguntaSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["subtitulo"] = this.subtitulo;
        data["obrigatoria"] = this.obrigatoria;
        data["exibirOpcaoEditavel"] = this.exibirOpcaoEditavel;
        data["labelOpcaoEditavel"] = this.labelOpcaoEditavel;
        data["ordemExibicao"] = this.ordemExibicao;
        data["tipoResposta"] = this.tipoResposta;
        data["questionarioGrupoPerguntaId"] = this.questionarioGrupoPerguntaId;
        return data;
    }
}

export interface IQuestionarioPerguntaSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    subtitulo?: string | undefined;
    obrigatoria?: boolean;
    exibirOpcaoEditavel?: boolean;
    labelOpcaoEditavel?: string | undefined;
    ordemExibicao?: number;
    tipoResposta?: QuestionarioTipoResposta;
    questionarioGrupoPerguntaId?: number;
}

export class QuestionarioPerguntaSalvarOrdemCommand implements IQuestionarioPerguntaSalvarOrdemCommand {
    perguntas?: QuestionarioPerguntaSalvarCommand[] | undefined;

    constructor(data?: IQuestionarioPerguntaSalvarOrdemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["perguntas"])) {
                this.perguntas = [] as any;
                for (let item of _data["perguntas"])
                    this.perguntas!.push(QuestionarioPerguntaSalvarCommand.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioPerguntaSalvarOrdemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaSalvarOrdemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.perguntas)) {
            data["perguntas"] = [];
            for (let item of this.perguntas)
                data["perguntas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioPerguntaSalvarOrdemCommand {
    perguntas?: QuestionarioPerguntaSalvarCommand[] | undefined;
}

export class QuestionarioPerguntaOpcaoSalvarCommand implements IQuestionarioPerguntaOpcaoSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    tituloTextoComplementar?: string | undefined;
    exibeTextoComplementar?: boolean;
    ordemExibicao?: number;
    questionarioPerguntaId?: number;
    questionarioPerguntaGatilhoId?: number | undefined;

    constructor(data?: IQuestionarioPerguntaOpcaoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.titulo = _data["titulo"];
            this.tituloTextoComplementar = _data["tituloTextoComplementar"];
            this.exibeTextoComplementar = _data["exibeTextoComplementar"];
            this.ordemExibicao = _data["ordemExibicao"];
            this.questionarioPerguntaId = _data["questionarioPerguntaId"];
            this.questionarioPerguntaGatilhoId = _data["questionarioPerguntaGatilhoId"];
        }
    }

    static fromJS(data: any): QuestionarioPerguntaOpcaoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaOpcaoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        data["tituloTextoComplementar"] = this.tituloTextoComplementar;
        data["exibeTextoComplementar"] = this.exibeTextoComplementar;
        data["ordemExibicao"] = this.ordemExibicao;
        data["questionarioPerguntaId"] = this.questionarioPerguntaId;
        data["questionarioPerguntaGatilhoId"] = this.questionarioPerguntaGatilhoId;
        return data;
    }
}

export interface IQuestionarioPerguntaOpcaoSalvarCommand {
    id?: number | undefined;
    titulo?: string | undefined;
    tituloTextoComplementar?: string | undefined;
    exibeTextoComplementar?: boolean;
    ordemExibicao?: number;
    questionarioPerguntaId?: number;
    questionarioPerguntaGatilhoId?: number | undefined;
}

export class QuestionarioPerguntaOpcaoSalvarOrdemCommand implements IQuestionarioPerguntaOpcaoSalvarOrdemCommand {
    opcoes?: QuestionarioPerguntaOpcaoSalvarCommand[] | undefined;

    constructor(data?: IQuestionarioPerguntaOpcaoSalvarOrdemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["opcoes"])) {
                this.opcoes = [] as any;
                for (let item of _data["opcoes"])
                    this.opcoes!.push(QuestionarioPerguntaOpcaoSalvarCommand.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionarioPerguntaOpcaoSalvarOrdemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionarioPerguntaOpcaoSalvarOrdemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.opcoes)) {
            data["opcoes"] = [];
            for (let item of this.opcoes)
                data["opcoes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionarioPerguntaOpcaoSalvarOrdemCommand {
    opcoes?: QuestionarioPerguntaOpcaoSalvarCommand[] | undefined;
}

export class UsuarioObterQuery extends QueryRequestBase implements IUsuarioObterQuery {
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    grupoId?: number | undefined;

    constructor(data?: IUsuarioObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.grupoId = _data["grupoId"];
        }
    }

    static fromJS(data: any): UsuarioObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["grupoId"] = this.grupoId;
        super.toJSON(data);
        return data;
    }
}

export interface IUsuarioObterQuery extends IQueryRequestBase {
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    grupoId?: number | undefined;
}

export class UsuarioCriarCommand implements IUsuarioCriarCommand {
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    situacao?: SituacaoUsuario;

    constructor(data?: IUsuarioCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): UsuarioCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface IUsuarioCriarCommand {
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    situacao?: SituacaoUsuario;
}

export class UsuarioAlterarCommand implements IUsuarioAlterarCommand {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    situacao?: SituacaoUsuario;

    constructor(data?: IUsuarioAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.situacao = _data["situacao"];
        }
    }

    static fromJS(data: any): UsuarioAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["situacao"] = this.situacao;
        return data;
    }
}

export interface IUsuarioAlterarCommand {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    situacao?: SituacaoUsuario;
}

export class UsuarioVincularDesvincularGrupoCommand implements IUsuarioVincularDesvincularGrupoCommand {
    vincular?: boolean;
    usuarioId?: number | undefined;
    usuarioLogin?: string | undefined;
    grupoAcessoId?: number;

    constructor(data?: IUsuarioVincularDesvincularGrupoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vincular = _data["vincular"];
            this.usuarioId = _data["usuarioId"];
            this.usuarioLogin = _data["usuarioLogin"];
            this.grupoAcessoId = _data["grupoAcessoId"];
        }
    }

    static fromJS(data: any): UsuarioVincularDesvincularGrupoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioVincularDesvincularGrupoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vincular"] = this.vincular;
        data["usuarioId"] = this.usuarioId;
        data["usuarioLogin"] = this.usuarioLogin;
        data["grupoAcessoId"] = this.grupoAcessoId;
        return data;
    }
}

export interface IUsuarioVincularDesvincularGrupoCommand {
    vincular?: boolean;
    usuarioId?: number | undefined;
    usuarioLogin?: string | undefined;
    grupoAcessoId?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}